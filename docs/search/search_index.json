{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\/\\s\\-\\.]+"},"docs":[{"location":"","text":"Let\u2019s Encrypt \u00b6 \u4e00\u4e2a\u4e3a 2.25 \u4ebf\u4e2a\u7f51\u7ad9\u63d0\u4f9b TLS \u8bc1\u4e66\u7684\u975e\u76c8\u5229\u6027\u8bc1\u4e66\u9881\u53d1\u673a\u6784\u3002 \u9605\u8bfb\u6211\u4eec\u76842021\u5e74\u5ea6\u62a5\u544a \u5feb\u901f\u5165\u95e8 \u6210\u4e3a\u8d5e\u52a9\u5546","title":"\u4e3b\u9875"},{"location":"#lets-encrypt","text":"\u4e00\u4e2a\u4e3a 2.25 \u4ebf\u4e2a\u7f51\u7ad9\u63d0\u4f9b TLS \u8bc1\u4e66\u7684\u975e\u76c8\u5229\u6027\u8bc1\u4e66\u9881\u53d1\u673a\u6784\u3002 \u9605\u8bfb\u6211\u4eec\u76842021\u5e74\u5ea6\u62a5\u544a \u5feb\u901f\u5165\u95e8 \u6210\u4e3a\u8d5e\u52a9\u5546","title":"Let\u2019s Encrypt"},{"location":"certbot/faq/","text":"\u5e38\u89c1\u95ee\u9898 \u00b6 \u6211\u7684\u6d4f\u89c8\u5668\u4fe1\u4efb Let 's Encrypt \u63d0\u4f9b\u7684\u8bc1\u4e66\u5417? \u5bf9\u4e8e\u5927\u591a\u6570\u6d4f\u89c8\u5668\u548c\u64cd\u4f5c\u7cfb\u7edf\u6765\u8bf4\uff0c\u662f\u7684\u3002\u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u517c\u5bb9\u6027\u5217\u8868\u3002 Certbot \u4f1a\u4e3a\u7f51\u7ad9\u9881\u53d1 SSL/TLS \u4ee5\u5916\u7684\u8bc1\u4e66\u5417? Certbot\u5c06\u83b7\u53d6Let 's Encrypt\u8bc1\u4e66\uff0c\u8fd9\u4e9b\u8bc1\u4e66\u5c06\u662f\u6807\u51c6\u7684\u57df\u9a8c\u8bc1\u8bc1\u4e66\uff0c\u56e0\u6b64\u60a8\u53ef\u4ee5\u5c06\u5b83\u4eec\u7528\u4e8e\u4efb\u4f55\u4f7f\u7528\u57df\u540d\u7684\u670d\u52a1\u5668\uff0c\u5982web\u670d\u52a1\u5668\u3002 \u60a8\u8fd8\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u8bc1\u4e66\u7528\u4e8eIMAPS\u7b49\u5176\u4ed6TLS\u5e94\u7528\u7a0b\u5e8f\u3002 \u6211\u53ef\u4ee5\u4f7f\u7528 Certbot \u7684\u8bc1\u4e66\u8fdb\u884c\u4ee3\u7801\u7b7e\u540d\u6216\u7535\u5b50\u90ae\u4ef6\u52a0\u5bc6\u5417? \u4e0d\u3002\u7535\u5b50\u90ae\u4ef6\u52a0\u5bc6\u548c\u4ee3\u7801\u7b7e\u540d\u9700\u8981\u4e0eLet's Encrypt CA\u9881\u53d1\u7684\u8bc1\u4e66\u7c7b\u578b\u4e0d\u540c\u7684\u8bc1\u4e66\u3002 Certbot \u4f1a\u5728 Let\u2019s Encrypt \u7684\u670d\u52a1\u5668\u4e0a\u751f\u6210\u6216\u5b58\u50a8\u6211\u7684\u8bc1\u4e66\u7684\u79c1\u94a5\u5417? \u4e0d\u3002\u4ece\u6765\u6ca1\u6709\u3002 \u79c1\u94a5\u603b\u662f\u5728\u60a8\u81ea\u5df1\u7684\u670d\u52a1\u5668\u4e0a\u751f\u6210\u548c\u7ba1\u7406\uff0c\u800c\u4e0d\u662f\u7531Let\u2019s Encrypt\u8bc1\u4e66\u9881\u53d1\u673a\u6784\u751f\u6210\u548c\u7ba1\u7406\u3002 Certbot \u4f1a\u9881\u53d1\u6269\u5c55\u9a8c\u8bc1(EV)\u8bc1\u4e66\u5417? Certbot and Let\u2019s Encrypt have no plans to issue EV certificates at this time. \u6211\u53ef\u4ee5\u83b7\u5f97\u591a\u4e2a\u57df\u540d\u7684\u8bc1\u4e66(SAN \u8bc1\u4e66)\u5417? Yes, the same certificate can apply to several different names using the Subject Alternative Name (SAN) mechanism. Certbot automatically requests certificates for multiple names when requested to do so. The resulting certificates will be accepted by browsers for any of the domain names listed in them. Let's Encrypt \u9881\u53d1\u901a\u914d\u7b26\u8bc1\u4e66\u5417? Yes! Let's Encrypt has begun issuing wildcard certificates in March 2018. Certbot has added support for wildcard certificates as of version 0.22.0. Obtaining a wildcard certificate requires using the DNS authentication method, either via --manual or via a Certbot DNS plugin appropriate to your DNS provider. Note that depending how you install Certbot, appropriate plugins to automate the process may not yet be available on your system. Information about the DNS plugins is available in the Certbot documentation. Certificates obtained with --manual cannot be renewed automatically with certbot renew (unless you've provided a custom authorization script). However, certificates obtained with a Certbot DNS plugin can be renewed automatically. In order to obtain wildcard certificates that can be renewed without human intervention, you'll need to use a Certbot DNS plugin that's compatible with an API supported by your DNS provider, or a script that can make appropriate DNS record changes upon demand. Even if your regular DNS provider doesn't support a compatible update mechanism, you can use a CNAME delegation for the _acme-challenge record in your DNS zone to a different provider that does. You can also point _acme-challenge to an acme-dns instance. Note that depending how you install Certbot, appropriate plugins to automate the process may not yet be available on your system. Please see Certbot documentation for more information about your situation. Certbot \u652f\u6301\u6211\u7684\u64cd\u4f5c\u7cfb\u7edf\u5417? We currently have Certbot support for major Linux and BSD variant operating systems. There are a large number of other client implementations available too. Certbot \u662f\u5426\u652f\u6301\u81ea\u52a8\u914d\u7f6e\u6211\u7684 web \u670d\u52a1\u5668? This website provides information about the level of support for various web servers and operating systems, which varies and is increasing over time. On supported systems, the automated configuration makes it fast and easy to obtain, install, and automatically renew certificates. If automated configuration is not supported for your web server, you can still get a certificate using Certbot and configure your server software manually. In this case, the certificate will not be renewed automatically. Note that automated configuration is not required. It can be disabled if you prefer to configure your server software yourself. Certbot \u9700\u8981 root/\u7ba1\u7406\u5458\u6743\u9650\u5417? Whether root is required to run Certbot or not depends on how you intend to use it. If you're asking this question because you have a hosting provider that doesn't grant you root access, you'll need to ensure first of all that you have a way to install a certificate if you get one. If the answer is \"no\", ask your hosting provider to support Let's Encrypt (many already do). If the answer is \"yes\", or you're asking the question for security reasons, read on... The webroot and manual plugins work well without root privileges. However, you need to provide writable paths for Certbot's working directories either by ensuring that /etc/letsencrypt/, /var/log/letsencrypt/, /var/lib/letsencrypt/ are writable, or by picking different directories with the --config-dir, --logs-dir, and --work-dir flags. The standalone plugin requires root to bind port 80 or 443, although on Linux you could also grant CAP_NET_BIND_SERVICE to the relevant user. Certbot's Apache and Nginx plugins normally require root both for making temporary and persistent changes to webserver configurations, and to perform graceful reload events for those servers. The certbot-auto script works on the assumption that root privileges will be used, both in order to install OS dependencies where required and because it needs to support all of the plugins mentioned above. The packaged versions of Certbot are more flexible, and some of the teams building these packages are working toward having Cerbot run with group rather than root privileges where possible. \u6211\u53ef\u4ee5\u5728 Certbot \u4e0a\u4f7f\u7528\u73b0\u6709\u7684\u79c1\u94a5\u6216\u8bc1\u4e66\u7b7e\u540d\u8bf7\u6c42(CSR)\u5417? Yes. You can obtain a certificate for an existing CSR, which means you may generate your own CSR using your own private key. However, Certbot will not accept a private key as input and generate a CSR for you. \u76ee\u524d\u7684\u5229\u7387\u9650\u5236\u662f\u4ec0\u4e48? https://letsencrypt.org/docs/rate-limits/ \u6211\u53ef\u4ee5\u5728\u4e0d\u5173\u95ed\u6211\u7684 web \u670d\u52a1\u5668\u7684\u60c5\u51b5\u4e0b\u9881\u53d1\u8bc1\u4e66\u5417? Yes, Certbot has different plugins to perform domain validation and none of them require any downtime except for the \"standalone\" plugin. \u201cLet's Encrypt\u201d\u670d\u52a1\u5668\u5c06\u4f7f\u7528\u54ea\u4e9b IP \u5730\u5740\u6765\u9a8c\u8bc1\u6211\u7684 web \u670d\u52a1\u5668? The Let's Encrypt CA doesn't publish a list of IP addresses it uses to validate, because they may change at any time. In the future, it may validate from multiple IP addresses at once. \u5982\u679c\u6211\u7684 web \u670d\u52a1\u5668\u6ca1\u6709\u76d1\u542c\u7aef\u53e3 80\uff0c\u6211\u53ef\u4ee5\u9881\u53d1\u8bc1\u4e66\u5417? Yes, using the DNS-01 or TLS-ALPN-01 challenge. However, Certbot does not include support for TLS-ALPN-01 yet. If you're using any Certbot with any method other than DNS authentication, your web server must listen on port 80, or at least be capable of doing so temporarily during certificate validation. If you have an ISP or firewall that blocks port 80 and you can't get it unblocked, you'll need to use DNS authentication or a different Let's Encrypt client. \u6211\u53ef\u4ee5\u4f7f\u7528\u4ec0\u4e48\u5de5\u5177\u6765\u8c03\u8bd5\u7ad9\u70b9\u7684 HTTPS \u914d\u7f6e? There are four scanning tools that are commonly suggested on the Let\u2019s Encrypt community forum: https://letsdebug.net/ (by Alex Zorin) https://check-your-website.server-daten.de/ (by J\u00fcrgen Auer) https://whynopadlock.com/ (by LexiConn) https://www.ssllabs.com/ssltest/ (by Qualys) They all have their strengths. Let's Debug would be used only by people who don't have HTTPS working yet, while SSL Labs would be used only by people who (at least sort of) do. Let\u2019s Debug: Let's Debug is most helpful if you have a failed challenge and want a straightforward explanation of why the challenge is failing. Check-Your-Website: J\u00fcrgen's scanner is most helpful if you have a confusing DNS or HTTP configuration error where some pages or some browsers work properly and others don't, or if your HTTP site works in a browser and yet you get failed challenges that you don't understand Why No Padlock: Why No Padlock is most helpful if you already have a certificate but all or some users don't see a valid HTTPS connection (and it gives very specific information about what's causing mixed content warnings) SSL Labs: SSL Labs is most helpful for cryptographic issues on an already set up HTTPS site, such as a case where some browsers work properly and others give a ciphersuite-related error, or if you want to convince nerds and/or regulatory bodies that you're following security best practices Certbot \u7684\u9690\u79c1\u653f\u7b56\u662f\u4ec0\u4e48? The Certbot privacy policy can be found here. Certbot \u548c\u8fd9\u4e2a\u7f51\u7ad9\u7684\u6388\u6743\u662f\u4ec0\u4e48? The Certbot software and documentation are licensed under the Apache 2.0 license as described here. Otherwise, this website is generally licensed under EFF's CC-BY license, except this FAQ page, which is a derivative of the Let\u2019s Encrypt FAQ (which was licensed under Let\u2019s Encrypt\u2019s CC-BY-NC).","title":"FAQ"},{"location":"certbot/faq/#_1","text":"\u6211\u7684\u6d4f\u89c8\u5668\u4fe1\u4efb Let 's Encrypt \u63d0\u4f9b\u7684\u8bc1\u4e66\u5417? \u5bf9\u4e8e\u5927\u591a\u6570\u6d4f\u89c8\u5668\u548c\u64cd\u4f5c\u7cfb\u7edf\u6765\u8bf4\uff0c\u662f\u7684\u3002\u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u517c\u5bb9\u6027\u5217\u8868\u3002 Certbot \u4f1a\u4e3a\u7f51\u7ad9\u9881\u53d1 SSL/TLS \u4ee5\u5916\u7684\u8bc1\u4e66\u5417? Certbot\u5c06\u83b7\u53d6Let 's Encrypt\u8bc1\u4e66\uff0c\u8fd9\u4e9b\u8bc1\u4e66\u5c06\u662f\u6807\u51c6\u7684\u57df\u9a8c\u8bc1\u8bc1\u4e66\uff0c\u56e0\u6b64\u60a8\u53ef\u4ee5\u5c06\u5b83\u4eec\u7528\u4e8e\u4efb\u4f55\u4f7f\u7528\u57df\u540d\u7684\u670d\u52a1\u5668\uff0c\u5982web\u670d\u52a1\u5668\u3002 \u60a8\u8fd8\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u8bc1\u4e66\u7528\u4e8eIMAPS\u7b49\u5176\u4ed6TLS\u5e94\u7528\u7a0b\u5e8f\u3002 \u6211\u53ef\u4ee5\u4f7f\u7528 Certbot \u7684\u8bc1\u4e66\u8fdb\u884c\u4ee3\u7801\u7b7e\u540d\u6216\u7535\u5b50\u90ae\u4ef6\u52a0\u5bc6\u5417? \u4e0d\u3002\u7535\u5b50\u90ae\u4ef6\u52a0\u5bc6\u548c\u4ee3\u7801\u7b7e\u540d\u9700\u8981\u4e0eLet's Encrypt CA\u9881\u53d1\u7684\u8bc1\u4e66\u7c7b\u578b\u4e0d\u540c\u7684\u8bc1\u4e66\u3002 Certbot \u4f1a\u5728 Let\u2019s Encrypt \u7684\u670d\u52a1\u5668\u4e0a\u751f\u6210\u6216\u5b58\u50a8\u6211\u7684\u8bc1\u4e66\u7684\u79c1\u94a5\u5417? \u4e0d\u3002\u4ece\u6765\u6ca1\u6709\u3002 \u79c1\u94a5\u603b\u662f\u5728\u60a8\u81ea\u5df1\u7684\u670d\u52a1\u5668\u4e0a\u751f\u6210\u548c\u7ba1\u7406\uff0c\u800c\u4e0d\u662f\u7531Let\u2019s Encrypt\u8bc1\u4e66\u9881\u53d1\u673a\u6784\u751f\u6210\u548c\u7ba1\u7406\u3002 Certbot \u4f1a\u9881\u53d1\u6269\u5c55\u9a8c\u8bc1(EV)\u8bc1\u4e66\u5417? Certbot and Let\u2019s Encrypt have no plans to issue EV certificates at this time. \u6211\u53ef\u4ee5\u83b7\u5f97\u591a\u4e2a\u57df\u540d\u7684\u8bc1\u4e66(SAN \u8bc1\u4e66)\u5417? Yes, the same certificate can apply to several different names using the Subject Alternative Name (SAN) mechanism. Certbot automatically requests certificates for multiple names when requested to do so. The resulting certificates will be accepted by browsers for any of the domain names listed in them. Let's Encrypt \u9881\u53d1\u901a\u914d\u7b26\u8bc1\u4e66\u5417? Yes! Let's Encrypt has begun issuing wildcard certificates in March 2018. Certbot has added support for wildcard certificates as of version 0.22.0. Obtaining a wildcard certificate requires using the DNS authentication method, either via --manual or via a Certbot DNS plugin appropriate to your DNS provider. Note that depending how you install Certbot, appropriate plugins to automate the process may not yet be available on your system. Information about the DNS plugins is available in the Certbot documentation. Certificates obtained with --manual cannot be renewed automatically with certbot renew (unless you've provided a custom authorization script). However, certificates obtained with a Certbot DNS plugin can be renewed automatically. In order to obtain wildcard certificates that can be renewed without human intervention, you'll need to use a Certbot DNS plugin that's compatible with an API supported by your DNS provider, or a script that can make appropriate DNS record changes upon demand. Even if your regular DNS provider doesn't support a compatible update mechanism, you can use a CNAME delegation for the _acme-challenge record in your DNS zone to a different provider that does. You can also point _acme-challenge to an acme-dns instance. Note that depending how you install Certbot, appropriate plugins to automate the process may not yet be available on your system. Please see Certbot documentation for more information about your situation. Certbot \u652f\u6301\u6211\u7684\u64cd\u4f5c\u7cfb\u7edf\u5417? We currently have Certbot support for major Linux and BSD variant operating systems. There are a large number of other client implementations available too. Certbot \u662f\u5426\u652f\u6301\u81ea\u52a8\u914d\u7f6e\u6211\u7684 web \u670d\u52a1\u5668? This website provides information about the level of support for various web servers and operating systems, which varies and is increasing over time. On supported systems, the automated configuration makes it fast and easy to obtain, install, and automatically renew certificates. If automated configuration is not supported for your web server, you can still get a certificate using Certbot and configure your server software manually. In this case, the certificate will not be renewed automatically. Note that automated configuration is not required. It can be disabled if you prefer to configure your server software yourself. Certbot \u9700\u8981 root/\u7ba1\u7406\u5458\u6743\u9650\u5417? Whether root is required to run Certbot or not depends on how you intend to use it. If you're asking this question because you have a hosting provider that doesn't grant you root access, you'll need to ensure first of all that you have a way to install a certificate if you get one. If the answer is \"no\", ask your hosting provider to support Let's Encrypt (many already do). If the answer is \"yes\", or you're asking the question for security reasons, read on... The webroot and manual plugins work well without root privileges. However, you need to provide writable paths for Certbot's working directories either by ensuring that /etc/letsencrypt/, /var/log/letsencrypt/, /var/lib/letsencrypt/ are writable, or by picking different directories with the --config-dir, --logs-dir, and --work-dir flags. The standalone plugin requires root to bind port 80 or 443, although on Linux you could also grant CAP_NET_BIND_SERVICE to the relevant user. Certbot's Apache and Nginx plugins normally require root both for making temporary and persistent changes to webserver configurations, and to perform graceful reload events for those servers. The certbot-auto script works on the assumption that root privileges will be used, both in order to install OS dependencies where required and because it needs to support all of the plugins mentioned above. The packaged versions of Certbot are more flexible, and some of the teams building these packages are working toward having Cerbot run with group rather than root privileges where possible. \u6211\u53ef\u4ee5\u5728 Certbot \u4e0a\u4f7f\u7528\u73b0\u6709\u7684\u79c1\u94a5\u6216\u8bc1\u4e66\u7b7e\u540d\u8bf7\u6c42(CSR)\u5417? Yes. You can obtain a certificate for an existing CSR, which means you may generate your own CSR using your own private key. However, Certbot will not accept a private key as input and generate a CSR for you. \u76ee\u524d\u7684\u5229\u7387\u9650\u5236\u662f\u4ec0\u4e48? https://letsencrypt.org/docs/rate-limits/ \u6211\u53ef\u4ee5\u5728\u4e0d\u5173\u95ed\u6211\u7684 web \u670d\u52a1\u5668\u7684\u60c5\u51b5\u4e0b\u9881\u53d1\u8bc1\u4e66\u5417? Yes, Certbot has different plugins to perform domain validation and none of them require any downtime except for the \"standalone\" plugin. \u201cLet's Encrypt\u201d\u670d\u52a1\u5668\u5c06\u4f7f\u7528\u54ea\u4e9b IP \u5730\u5740\u6765\u9a8c\u8bc1\u6211\u7684 web \u670d\u52a1\u5668? The Let's Encrypt CA doesn't publish a list of IP addresses it uses to validate, because they may change at any time. In the future, it may validate from multiple IP addresses at once. \u5982\u679c\u6211\u7684 web \u670d\u52a1\u5668\u6ca1\u6709\u76d1\u542c\u7aef\u53e3 80\uff0c\u6211\u53ef\u4ee5\u9881\u53d1\u8bc1\u4e66\u5417? Yes, using the DNS-01 or TLS-ALPN-01 challenge. However, Certbot does not include support for TLS-ALPN-01 yet. If you're using any Certbot with any method other than DNS authentication, your web server must listen on port 80, or at least be capable of doing so temporarily during certificate validation. If you have an ISP or firewall that blocks port 80 and you can't get it unblocked, you'll need to use DNS authentication or a different Let's Encrypt client. \u6211\u53ef\u4ee5\u4f7f\u7528\u4ec0\u4e48\u5de5\u5177\u6765\u8c03\u8bd5\u7ad9\u70b9\u7684 HTTPS \u914d\u7f6e? There are four scanning tools that are commonly suggested on the Let\u2019s Encrypt community forum: https://letsdebug.net/ (by Alex Zorin) https://check-your-website.server-daten.de/ (by J\u00fcrgen Auer) https://whynopadlock.com/ (by LexiConn) https://www.ssllabs.com/ssltest/ (by Qualys) They all have their strengths. Let's Debug would be used only by people who don't have HTTPS working yet, while SSL Labs would be used only by people who (at least sort of) do. Let\u2019s Debug: Let's Debug is most helpful if you have a failed challenge and want a straightforward explanation of why the challenge is failing. Check-Your-Website: J\u00fcrgen's scanner is most helpful if you have a confusing DNS or HTTP configuration error where some pages or some browsers work properly and others don't, or if your HTTP site works in a browser and yet you get failed challenges that you don't understand Why No Padlock: Why No Padlock is most helpful if you already have a certificate but all or some users don't see a valid HTTPS connection (and it gives very specific information about what's causing mixed content warnings) SSL Labs: SSL Labs is most helpful for cryptographic issues on an already set up HTTPS site, such as a case where some browsers work properly and others give a ciphersuite-related error, or if you want to convince nerds and/or regulatory bodies that you're following security best practices Certbot \u7684\u9690\u79c1\u653f\u7b56\u662f\u4ec0\u4e48? The Certbot privacy policy can be found here. Certbot \u548c\u8fd9\u4e2a\u7f51\u7ad9\u7684\u6388\u6743\u662f\u4ec0\u4e48? The Certbot software and documentation are licensed under the Apache 2.0 license as described here. Otherwise, this website is generally licensed under EFF's CC-BY license, except this FAQ page, which is a derivative of the Let\u2019s Encrypt FAQ (which was licensed under Let\u2019s Encrypt\u2019s CC-BY-NC).","title":"\u5e38\u89c1\u95ee\u9898"},{"location":"certbot/glossary/","text":"certbot \u672f\u8bed \u00b6 Admin Access \u5982\u679c\u60a8\u662f\u80fd\u591f\u63a7\u5236\u670d\u52a1\u5668\u5e76\u6267\u884c\u8bf8\u5982\u5b89\u88c5\u548c\u5220\u9664\u8f6f\u4ef6\u6216\u6574\u4f53\u66f4\u6539\u7cfb\u7edf\u7b49\u7ba1\u7406\u4efb\u52a1\u7684\u4eba\uff0c\u90a3\u4e48\u60a8\u5c31\u5177\u6709\u5bf9\u670d\u52a1\u5668\u7684\u7ba1\u7406\u8bbf\u95ee\u6743\u3002 \u8fd9\u901a\u5e38\u4e5f\u88ab\u79f0\u4e3a \u6839\u8bbf\u95ee \u3002\u5982\u679c\u60a8\u53ef\u4ee5\u6210\u529f\u5730\u5728\u670d\u52a1\u5668\u4e0a\u8fd0\u884c sudo \uff0c\u90a3\u4e48\u60a8\u5c31\u62e5\u6709\u7ba1\u7406\u5458\u8bbf\u95ee\u6743\u9650\u3002 \u5982\u679c\u60a8\u4f7f\u7528VPS\u6216\u4e13\u7528\u670d\u52a1\u5668\uff0c\u6216\u8005\u5176\u4ed6\u4eba\u5df2\u7ecf\u4e3a\u60a8\u8bbe\u7f6e\u4e86\u670d\u52a1\u5668\uff0c\u5219\u53ef\u80fd\u4f1a\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\u3002 \u5982\u679c\u60a8\u4f7f\u7528\u5171\u4eab\u670d\u52a1\u5668\uff0c\u6216\u8005\u60a8\u53ea\u80fd\u901a\u8fc7FTP\u3001SFTP\u6216\u63a7\u5236\u9762\u677f\u63a5\u53e3\u4e0e\u670d\u52a1\u5668\u4ea4\u4e92\uff0c\u5219\u53ef\u80fd\u4e0d\u4f1a\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\u3002 Automatic Renewal In the context of Certbot, this refers to a feature designed to automatically obtain new versions of a certificate before it expires. This feature is important as helps you avoid gaps between having valid certificates that can be trusted by the users of your server. Automatic Updates Automatic updates are when a piece of software downloads a new version of itself automatically, usually as soon as practical after it becomes available. This process is designed to help the software have the latest bug fixes and features that have been released by the developer. Backports Backports is a feature in some operating systems that provides an option for getting newer versions of software than those that your operating system package manager would otherwise provide you. The installation instructions for Certbot in some environments may ask you to follow instructions for enabling the backports feature on your operating system. Browser A browser is the program you use to view websites on the Internet. Firefox, Safari, Internet Explorer, and Chrome are all web browsers. Mobile devices have a web browser app for the same purpose. Certificate A certificate is a file that mathematically shows browsers or other software that they\u2019ve made an encrypted connection to the site they attempted to connect to. Certificate Authority A certificate authority is an organization that gives out certificates to website operators. Cloud Hosting Cloud hosting can refer to any situation in which your web site is hosted using someone else's infrastructure, typically on servers belonging to a web hosting company. This could be contrasted with a web site that's hosted on your own personal server, such as a physical machine running in your home. Command Line A command line is a way of interacting with a computer by typing text-based commands to it and receiving text-based replies. Certbot is run from a command-line interface, usually on a Unix-like server. In order to use Certbot for most purposes, you\u2019ll need to be able to install and run it on the command line of your web server, which is usually accessed over SSH. Control Panel A control panel is a type of software that provides an interface for configuring websites, such as cPanel. Cron Job A cron job is a task to be run at a scheduled time by the program cron. Crontab The cron table is a specific file that contains tasks to be run at a scheduled time by the program cron. DNS DNS is the Domain Name System which creates a worldwide directory of domain names, like example.com, certbot.eff.org, community.letsencrypt.org, or millions of others. These domain names can be looked up by Internet users\u2019 software anywhere in the world to learn IP addresses and other technical data that\u2019s used to make connections to servers. DNS is an important part of Internet infrastructure and is operated collectively by hundreds of organizations, including DNS registrars (which let you pay to register your own domain name for your own site) and various DNS providers. DNS Credentials DNS credentials are a password or other kind of secret (such as an API key) that your DNS provider lets you use to change the contents of your DNS records. They are usually issued by your domain registrar (or by another DNS provider, if your DNS provider isn\u2019t the same as your registrar). DNS credentials are a sensitive kind of secret because they can be used to take over your site completely. You should never share these credentials publicly or with an unauthorized person. It can be OK to provide a copy of them to Certbot to let it perform DNS validation automatically, since it runs locally on your machine. DNS Provider A Domain Name System (DNS) provider is an organization that runs DNS servers (also called nameservers) to host DNS records for domain names. Your DNS provider could be the same as, or different from, your DNS registrar (whom you pay to register your domain name), or your hosting provider (whom you pay to host your web site). You can also change your DNS provider if your current provider doesn\u2019t offer the features that you want. Your DNS provider must follow various Internet technical standards in order for Let\u2019s Encrypt to confirm that it\u2019s you who controls your domain name when you request a certificate. You need to interact with your DNS provider in order to change the DNS records that refer to your domain name. Some DNS providers can help you create Let\u2019s Encrypt certificates (including wildcard certificates) easily using Let\u2019s Encrypt\u2019s DNS validation method, including by providing a software interface that Certbot can use for updating DNS records automatically. DNS Record A DNS record is an entry in a nameserver that tells machines on the Internet some information about the domain. For example, an A record describes which IPv4 address a particular domain name should point to. DNS Validation DNS validation is a method to prove your control over your domain name by asking you to create specific DNS TXT records within the domain. This requires you to have appropriate credentials to change your DNS records. DNS validation is one of the options provided by Let\u2019s Encrypt to prove your control over your domain name. If you have a DNS provider that\u2019s supported by Certbot, Certbot can automate this process. Otherwise, you would have to perform it yourself every time you renew your certificate. Most Certbot users don\u2019t need to perform DNS validation, but it\u2019s required by Let\u2019s Encrypt if you want a wildcard certificate, and it can also be a useful option if your web server can\u2019t receive connections from the Internet (for example, because it\u2019s on a private network behind a firewall). Docker Docker is a system that allows website operators to run pre-configured systems called containers inside of their server. These containers come with everything needed to perform a task. Certbot\u2019s Docker containers ship with Certbot already set up inside of them. Domain Name A domain name is a human-readable identifier for a website that someone can type into the URL bar of their browser to go to that website. The domain name doesn\u2019t include the parts of the URL after the first single slash mark (/). Domain Registrar A domain registrar is an organization that website operators purchase domains from. Firewall A firewall monitors and controls network traffic on a machine. FTP The File Transfer Protocol (FTP) allows users to move files from one machine to another over the network. Hosting Provider A hosting provider is a company or other organization that helps you get your website online. Hosting providers are usually paid by a customer and offer a variety of different plans and services, including shared hosting, virtual private servers, and dedicated servers. Their servers are usually located in data centers, and the sites or servers they host are usually administered remotely over the Internet. HTTP HTTP (Hypertext Transfer Protocol) is the traditional, but insecure, method for web browsers to request the content of web pages and other online resources from web servers. It is an Internet standard and normally used with TCP port 80. Almost all websites in the world support HTTP, but websites that have been configured with Certbot or some other method of setting up HTTPS may automatically redirect users from the HTTP version of the site to the HTTPS version. HTTPS HTTPS (Hypertext Transfer Protocol Secure) is the update to HTTP that uses the SSL/TLS protocol to provide security for connections between web browsers and web servers. Using HTTPS normally requires a certificate from a certificate authority, such as Let\u2019s Encrypt, and will also require installing that certificate onto a web server. Certbot can help perform both of these steps automatically in many cases. HTTPS is an Internet standard and is normally used with TCP port 443. Internet Service Provider An Internet Service Provider (ISP) is an organization that people can obtain access to the Internet from. IP Address An IP address is a group of numbers, like 198.51.100.55, that identify a computer on the Internet and allow other computers to talk to it. Let\u2019s Encrypt Let\u2019s Encrypt is a certificate authority that issues digital certificates free of charge to let people get encrypted HTTPS connections to web sites on the Internet, which are substantially more secure than unencrypted connections. Certbot is a software tool made by the Electronic Frontier Foundation. Certbot is the most popular way for people who run their own web servers to get a Let\u2019s Encrypt certificate, set up HTTPS on the server, and renew the certificate automatically in the future. There are also many other tools and options for people in different situations to get Let\u2019s Encrypt certificates. Operating System The operating system is the core software running on a computer. The most common operating systems are Windows, macOS, and Linux. Linux is subdivided into distributions like Ubuntu, Debian, RedHat, and many more. Port 443 Port 443 is the port officially assigned for use with HTTPS. Different Internet services are distinguished by using different TCP port numbers. Unencrypted HTTP normally uses TCP port 80, while encrypted HTTPS normally uses TCP port 443. Port 80 Different Internet services are distinguished by using different TCP port numbers. Unencrypted HTTP normally uses TCP port 80, while encrypted HTTPS normally uses TCP port 443. To use certbot --webroot, certbot --apache, or certbot --nginx, you should have an existing HTTP website that\u2019s already online hosted on the server where you\u2019re going to use Certbot. This site should be available to the rest of the Internet on port 80. To use certbot --standalone, you don\u2019t need an existing site, but you have to make sure connections to port 80 on your server are not blocked by a firewall, including a firewall that may be run by your Internet service provider or web hosting provider. Please check with your ISP or hosting provider if you\u2019re not sure. (Using DNS validation does not require Let\u2019s Encrypt to make any inbound connection to your server, so with this method in particular it\u2019s not necessary to have an existing HTTP website or the ability to receive connections on port 80.) Server A server is a computer on the Internet that provides a service, like a web site or an email service. Most web site owners pay a hosting provider for the use of a server located in a data center and administered over the Internet. This might be a physical dedicated server, a virtual private server (VPS), or a shared server. Other servers provide other parts of the Internet infrastructure, such as DNS servers. Server - Dedicated Server A dedicated server is a server that only hosts the contents or services for a single website administrator. Server Plugin In the context of Certbot, this refers to software that works with Certbot to configure a specific piece of server software. For instance, Certbot has an Apache plugin and a nginx plugin which can be used to obtain and configure certificates with those servers. Server - Shared Server A shared server is a server that hosts content or services run by different people on the same machine. A popular version of this is shared hosting, where websites run by different people are provided by the same server that is shared between them. Server - Virtual Private Server (VPS) A virtual private server is a complete server environment within which the customer can control the entire operating system and software environment. That allows the customer to be the system administrator for this server environment. This is the second-most common kind of web hosting environment (following shared hosting), and is offered by major providers like Amazon AWS, Azure, DigitalOcean, and Linode, among others. Most successful Certbot users are running Certbot in a VPS environment. Server - Web Server Web server can refer to either the server (computer), application (software), or the combination of the two that\u2019s used to provide your web site\u2019s content to the rest of the Internet. SFTP SFTP is a more-secure version of FTP. Shared Hosting Shared hosting is a kind of web hosting in which several customers\u2019 web sites are hosted by the same server, which is mainly administered by the web hosting provider. Usually customers administer their own sites on a shared server using a web-based control panel interface. This is less expensive than VPS hosting and often calls for less technical knowledge on the customer\u2019s part; overall, it\u2019s the most popular type of web hosting environment. Certbot is less suitable for use in most shared hosting environments because it\u2019s usually easier and more reliable to ask the hosting provider to set up HTTPS. (Some shared hosting users use Certbot, most often because their hosting providers are uncooperative or don\u2019t have another way to enable HTTPS support for customer sites.) Software Software is a set of instructions that teach a computer how to perform a particular task. Certbot is one software application that can be useful for web site administrators who want to set up HTTPS on their web sites. Certbot documentation will also expect you to know the names and versions of some other software that you use on your web server. For instance, the way to install Certbot is different on different operating systems, so you'll be asked the operating system software that your web server uses. Software repository or repo A repo is a place where software is stored to be accessed by others. Examples of this include a GitHub repository that contains the files for a software project, or the repositories offered by popular operating systems such as Debian, Fedora, and Ubuntu, which contain many different pieces of software for their users to download and install. SSH SSH (which stands for secure shell ) is a technology for connecting to a remote server and accessing a command line on that server, often in order to administer it. The administrator of a server can grant SSH access to others, and can also use SSH access directly in order to administer the server remotely. SSH is usually used to access servers running Unix-like operating systems, but your own computer doesn\u2019t have to be running Unix in order to use SSH. You normally use SSH from your computer\u2019s command line in a terminal by typing a command such as ssh username@example.com, especially if your own computer runs Linux or macOS. After logging in, you\u2019ll have access to the server\u2019s command line. If you use Windows on your computer, you might also use a dedicated SSH application such as PuTTY. Most Certbot users run Certbot from a command prompt on a remote server over SSH. SSL/TLS SSL, aka TLS, is a protocol used to encrypt data sent between two computers. When you browse the web with encryption using HTTPS (instead of HTTP), your web browser is using SSL/TLS to talk to web sites under the hood. Sometimes SSL and TLS are used to distinguish different protocol versions, but for most common purposes they are synonyms. sudo Sudo is the most common command on Unix-like operating systems to run a specific command as root (the system administrator). If you\u2019re logged in to your server as a user other than root, you\u2019ll likely need to put sudo before your Certbot commands so that they run as root (for example, sudo certbot instead of just certbot), especially if you\u2019re using Certbot\u2019s integration with a web server like Apache or Nginx. (The certbot-auto script automatically runs sudo if it\u2019s necessary and you didn\u2019t specify it.) TCP TCP is a protocol that allows two computers to send data to each other. More complex protocols like HTTP, HTTPS, SSH, and FTP, are built using TCP as a building block. Updates It is important to keep software up-to-date so that the latest security fixes and features can be applied. Website That\u2019s Already Online Certbot is usually meant to be used to switch an existing HTTP site to work in HTTPS (and, afterward, to continue renewing the site\u2019s HTTPS certificates whenever necessary). Some Certbot documentation assumes or recommends that you have a working web site that can already be accessed using HTTP on port 80. That means, for example, that if you use a web browser to go to your domain using http://, your web server answers and some kind of content comes up (even if it\u2019s just a default welcome page rather than the final version of your site). Some methods of using Certbot have this as a prerequisite, so you\u2019ll have a smoother experience if you already have a site set up with HTTP. (If your site can\u2019t be accessed this way as a matter of policy, you\u2019ll probably need to use DNS validation in order to get a certificate with Certbot.) Wildcard Certificate \u901a\u914d\u7b26\u8bc1\u4e66\u662f\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a\u4ee5 *. \u5f00\u5934\u7684\u540d\u79f0\u7684\u8bc1\u4e66\u3002 \u6d4f\u89c8\u5668\u5c06\u63a5\u53d7\u4efb\u4f55\u66ff\u4ee3\u661f\u53f7(*)\u7684\u6807\u7b7e\u3002 \u4f8b\u5982\uff0c *.example.com \u7684\u8bc1\u4e66\u5c06\u5bf9 www.example.com \u3001 mail.example.com \u3001 hello.example.com \u548c .goodbye.example.com \u6709\u6548\u3002 \u4f46\u662f\uff0c\u53ea\u5305\u542b\u540d\u79f0 *.example.com \u7684\u901a\u914d\u7b26\u8bc1\u4e66\u5bf9 example.com \u65e0\u6548:\u66ff\u6362\u7684\u6807\u7b7e\u4e0d\u80fd\u4e3a\u7a7a\u3002 \u5982\u679c\u60a8\u5e0c\u671b\u8bc1\u4e66\u5bf9 example.com \u6709\u6548\uff0c\u8fd8\u9700\u8981\u5305\u62ec example.com (\u5373\u4e0d\u5e26 *. \u90e8\u5206)\u3002 \u6b64\u5916\uff0c\u661f\u53f7\u53ea\u80fd\u7531\u4e00\u4e2a\u6807\u7b7e\u4ee3\u66ff\uff0c\u4e0d\u80fd\u7531\u591a\u4e2a\u6807\u7b7e\u4ee3\u66ff\u3002 \u4f8b\u5982\uff0c\u540d\u79f0 hello.goodbye.example.com \u5c06\u4e0d\u4f1a\u88ab\u4ec5\u5305\u542b\u540d *.example.com \u7684\u8bc1\u4e66\u8986\u76d6\u3002 \u4f46\u662f\uff0c\u5b83\u5c06\u88ab *.goodbye.example.com \u8986\u76d6\u3002 \u6ce8\u610f\uff0c\u901a\u914d\u7b26\u540d\u79f0\u4e0d\u80fd\u5305\u542b\u591a\u4e2a\u661f\u53f7\u3002 \u4f8b\u5982\uff0c *.*.example.com \u65e0\u6548\u3002","title":"\u672f\u8bed"},{"location":"certbot/glossary/#certbot","text":"Admin Access \u5982\u679c\u60a8\u662f\u80fd\u591f\u63a7\u5236\u670d\u52a1\u5668\u5e76\u6267\u884c\u8bf8\u5982\u5b89\u88c5\u548c\u5220\u9664\u8f6f\u4ef6\u6216\u6574\u4f53\u66f4\u6539\u7cfb\u7edf\u7b49\u7ba1\u7406\u4efb\u52a1\u7684\u4eba\uff0c\u90a3\u4e48\u60a8\u5c31\u5177\u6709\u5bf9\u670d\u52a1\u5668\u7684\u7ba1\u7406\u8bbf\u95ee\u6743\u3002 \u8fd9\u901a\u5e38\u4e5f\u88ab\u79f0\u4e3a \u6839\u8bbf\u95ee \u3002\u5982\u679c\u60a8\u53ef\u4ee5\u6210\u529f\u5730\u5728\u670d\u52a1\u5668\u4e0a\u8fd0\u884c sudo \uff0c\u90a3\u4e48\u60a8\u5c31\u62e5\u6709\u7ba1\u7406\u5458\u8bbf\u95ee\u6743\u9650\u3002 \u5982\u679c\u60a8\u4f7f\u7528VPS\u6216\u4e13\u7528\u670d\u52a1\u5668\uff0c\u6216\u8005\u5176\u4ed6\u4eba\u5df2\u7ecf\u4e3a\u60a8\u8bbe\u7f6e\u4e86\u670d\u52a1\u5668\uff0c\u5219\u53ef\u80fd\u4f1a\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\u3002 \u5982\u679c\u60a8\u4f7f\u7528\u5171\u4eab\u670d\u52a1\u5668\uff0c\u6216\u8005\u60a8\u53ea\u80fd\u901a\u8fc7FTP\u3001SFTP\u6216\u63a7\u5236\u9762\u677f\u63a5\u53e3\u4e0e\u670d\u52a1\u5668\u4ea4\u4e92\uff0c\u5219\u53ef\u80fd\u4e0d\u4f1a\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\u3002 Automatic Renewal In the context of Certbot, this refers to a feature designed to automatically obtain new versions of a certificate before it expires. This feature is important as helps you avoid gaps between having valid certificates that can be trusted by the users of your server. Automatic Updates Automatic updates are when a piece of software downloads a new version of itself automatically, usually as soon as practical after it becomes available. This process is designed to help the software have the latest bug fixes and features that have been released by the developer. Backports Backports is a feature in some operating systems that provides an option for getting newer versions of software than those that your operating system package manager would otherwise provide you. The installation instructions for Certbot in some environments may ask you to follow instructions for enabling the backports feature on your operating system. Browser A browser is the program you use to view websites on the Internet. Firefox, Safari, Internet Explorer, and Chrome are all web browsers. Mobile devices have a web browser app for the same purpose. Certificate A certificate is a file that mathematically shows browsers or other software that they\u2019ve made an encrypted connection to the site they attempted to connect to. Certificate Authority A certificate authority is an organization that gives out certificates to website operators. Cloud Hosting Cloud hosting can refer to any situation in which your web site is hosted using someone else's infrastructure, typically on servers belonging to a web hosting company. This could be contrasted with a web site that's hosted on your own personal server, such as a physical machine running in your home. Command Line A command line is a way of interacting with a computer by typing text-based commands to it and receiving text-based replies. Certbot is run from a command-line interface, usually on a Unix-like server. In order to use Certbot for most purposes, you\u2019ll need to be able to install and run it on the command line of your web server, which is usually accessed over SSH. Control Panel A control panel is a type of software that provides an interface for configuring websites, such as cPanel. Cron Job A cron job is a task to be run at a scheduled time by the program cron. Crontab The cron table is a specific file that contains tasks to be run at a scheduled time by the program cron. DNS DNS is the Domain Name System which creates a worldwide directory of domain names, like example.com, certbot.eff.org, community.letsencrypt.org, or millions of others. These domain names can be looked up by Internet users\u2019 software anywhere in the world to learn IP addresses and other technical data that\u2019s used to make connections to servers. DNS is an important part of Internet infrastructure and is operated collectively by hundreds of organizations, including DNS registrars (which let you pay to register your own domain name for your own site) and various DNS providers. DNS Credentials DNS credentials are a password or other kind of secret (such as an API key) that your DNS provider lets you use to change the contents of your DNS records. They are usually issued by your domain registrar (or by another DNS provider, if your DNS provider isn\u2019t the same as your registrar). DNS credentials are a sensitive kind of secret because they can be used to take over your site completely. You should never share these credentials publicly or with an unauthorized person. It can be OK to provide a copy of them to Certbot to let it perform DNS validation automatically, since it runs locally on your machine. DNS Provider A Domain Name System (DNS) provider is an organization that runs DNS servers (also called nameservers) to host DNS records for domain names. Your DNS provider could be the same as, or different from, your DNS registrar (whom you pay to register your domain name), or your hosting provider (whom you pay to host your web site). You can also change your DNS provider if your current provider doesn\u2019t offer the features that you want. Your DNS provider must follow various Internet technical standards in order for Let\u2019s Encrypt to confirm that it\u2019s you who controls your domain name when you request a certificate. You need to interact with your DNS provider in order to change the DNS records that refer to your domain name. Some DNS providers can help you create Let\u2019s Encrypt certificates (including wildcard certificates) easily using Let\u2019s Encrypt\u2019s DNS validation method, including by providing a software interface that Certbot can use for updating DNS records automatically. DNS Record A DNS record is an entry in a nameserver that tells machines on the Internet some information about the domain. For example, an A record describes which IPv4 address a particular domain name should point to. DNS Validation DNS validation is a method to prove your control over your domain name by asking you to create specific DNS TXT records within the domain. This requires you to have appropriate credentials to change your DNS records. DNS validation is one of the options provided by Let\u2019s Encrypt to prove your control over your domain name. If you have a DNS provider that\u2019s supported by Certbot, Certbot can automate this process. Otherwise, you would have to perform it yourself every time you renew your certificate. Most Certbot users don\u2019t need to perform DNS validation, but it\u2019s required by Let\u2019s Encrypt if you want a wildcard certificate, and it can also be a useful option if your web server can\u2019t receive connections from the Internet (for example, because it\u2019s on a private network behind a firewall). Docker Docker is a system that allows website operators to run pre-configured systems called containers inside of their server. These containers come with everything needed to perform a task. Certbot\u2019s Docker containers ship with Certbot already set up inside of them. Domain Name A domain name is a human-readable identifier for a website that someone can type into the URL bar of their browser to go to that website. The domain name doesn\u2019t include the parts of the URL after the first single slash mark (/). Domain Registrar A domain registrar is an organization that website operators purchase domains from. Firewall A firewall monitors and controls network traffic on a machine. FTP The File Transfer Protocol (FTP) allows users to move files from one machine to another over the network. Hosting Provider A hosting provider is a company or other organization that helps you get your website online. Hosting providers are usually paid by a customer and offer a variety of different plans and services, including shared hosting, virtual private servers, and dedicated servers. Their servers are usually located in data centers, and the sites or servers they host are usually administered remotely over the Internet. HTTP HTTP (Hypertext Transfer Protocol) is the traditional, but insecure, method for web browsers to request the content of web pages and other online resources from web servers. It is an Internet standard and normally used with TCP port 80. Almost all websites in the world support HTTP, but websites that have been configured with Certbot or some other method of setting up HTTPS may automatically redirect users from the HTTP version of the site to the HTTPS version. HTTPS HTTPS (Hypertext Transfer Protocol Secure) is the update to HTTP that uses the SSL/TLS protocol to provide security for connections between web browsers and web servers. Using HTTPS normally requires a certificate from a certificate authority, such as Let\u2019s Encrypt, and will also require installing that certificate onto a web server. Certbot can help perform both of these steps automatically in many cases. HTTPS is an Internet standard and is normally used with TCP port 443. Internet Service Provider An Internet Service Provider (ISP) is an organization that people can obtain access to the Internet from. IP Address An IP address is a group of numbers, like 198.51.100.55, that identify a computer on the Internet and allow other computers to talk to it. Let\u2019s Encrypt Let\u2019s Encrypt is a certificate authority that issues digital certificates free of charge to let people get encrypted HTTPS connections to web sites on the Internet, which are substantially more secure than unencrypted connections. Certbot is a software tool made by the Electronic Frontier Foundation. Certbot is the most popular way for people who run their own web servers to get a Let\u2019s Encrypt certificate, set up HTTPS on the server, and renew the certificate automatically in the future. There are also many other tools and options for people in different situations to get Let\u2019s Encrypt certificates. Operating System The operating system is the core software running on a computer. The most common operating systems are Windows, macOS, and Linux. Linux is subdivided into distributions like Ubuntu, Debian, RedHat, and many more. Port 443 Port 443 is the port officially assigned for use with HTTPS. Different Internet services are distinguished by using different TCP port numbers. Unencrypted HTTP normally uses TCP port 80, while encrypted HTTPS normally uses TCP port 443. Port 80 Different Internet services are distinguished by using different TCP port numbers. Unencrypted HTTP normally uses TCP port 80, while encrypted HTTPS normally uses TCP port 443. To use certbot --webroot, certbot --apache, or certbot --nginx, you should have an existing HTTP website that\u2019s already online hosted on the server where you\u2019re going to use Certbot. This site should be available to the rest of the Internet on port 80. To use certbot --standalone, you don\u2019t need an existing site, but you have to make sure connections to port 80 on your server are not blocked by a firewall, including a firewall that may be run by your Internet service provider or web hosting provider. Please check with your ISP or hosting provider if you\u2019re not sure. (Using DNS validation does not require Let\u2019s Encrypt to make any inbound connection to your server, so with this method in particular it\u2019s not necessary to have an existing HTTP website or the ability to receive connections on port 80.) Server A server is a computer on the Internet that provides a service, like a web site or an email service. Most web site owners pay a hosting provider for the use of a server located in a data center and administered over the Internet. This might be a physical dedicated server, a virtual private server (VPS), or a shared server. Other servers provide other parts of the Internet infrastructure, such as DNS servers. Server - Dedicated Server A dedicated server is a server that only hosts the contents or services for a single website administrator. Server Plugin In the context of Certbot, this refers to software that works with Certbot to configure a specific piece of server software. For instance, Certbot has an Apache plugin and a nginx plugin which can be used to obtain and configure certificates with those servers. Server - Shared Server A shared server is a server that hosts content or services run by different people on the same machine. A popular version of this is shared hosting, where websites run by different people are provided by the same server that is shared between them. Server - Virtual Private Server (VPS) A virtual private server is a complete server environment within which the customer can control the entire operating system and software environment. That allows the customer to be the system administrator for this server environment. This is the second-most common kind of web hosting environment (following shared hosting), and is offered by major providers like Amazon AWS, Azure, DigitalOcean, and Linode, among others. Most successful Certbot users are running Certbot in a VPS environment. Server - Web Server Web server can refer to either the server (computer), application (software), or the combination of the two that\u2019s used to provide your web site\u2019s content to the rest of the Internet. SFTP SFTP is a more-secure version of FTP. Shared Hosting Shared hosting is a kind of web hosting in which several customers\u2019 web sites are hosted by the same server, which is mainly administered by the web hosting provider. Usually customers administer their own sites on a shared server using a web-based control panel interface. This is less expensive than VPS hosting and often calls for less technical knowledge on the customer\u2019s part; overall, it\u2019s the most popular type of web hosting environment. Certbot is less suitable for use in most shared hosting environments because it\u2019s usually easier and more reliable to ask the hosting provider to set up HTTPS. (Some shared hosting users use Certbot, most often because their hosting providers are uncooperative or don\u2019t have another way to enable HTTPS support for customer sites.) Software Software is a set of instructions that teach a computer how to perform a particular task. Certbot is one software application that can be useful for web site administrators who want to set up HTTPS on their web sites. Certbot documentation will also expect you to know the names and versions of some other software that you use on your web server. For instance, the way to install Certbot is different on different operating systems, so you'll be asked the operating system software that your web server uses. Software repository or repo A repo is a place where software is stored to be accessed by others. Examples of this include a GitHub repository that contains the files for a software project, or the repositories offered by popular operating systems such as Debian, Fedora, and Ubuntu, which contain many different pieces of software for their users to download and install. SSH SSH (which stands for secure shell ) is a technology for connecting to a remote server and accessing a command line on that server, often in order to administer it. The administrator of a server can grant SSH access to others, and can also use SSH access directly in order to administer the server remotely. SSH is usually used to access servers running Unix-like operating systems, but your own computer doesn\u2019t have to be running Unix in order to use SSH. You normally use SSH from your computer\u2019s command line in a terminal by typing a command such as ssh username@example.com, especially if your own computer runs Linux or macOS. After logging in, you\u2019ll have access to the server\u2019s command line. If you use Windows on your computer, you might also use a dedicated SSH application such as PuTTY. Most Certbot users run Certbot from a command prompt on a remote server over SSH. SSL/TLS SSL, aka TLS, is a protocol used to encrypt data sent between two computers. When you browse the web with encryption using HTTPS (instead of HTTP), your web browser is using SSL/TLS to talk to web sites under the hood. Sometimes SSL and TLS are used to distinguish different protocol versions, but for most common purposes they are synonyms. sudo Sudo is the most common command on Unix-like operating systems to run a specific command as root (the system administrator). If you\u2019re logged in to your server as a user other than root, you\u2019ll likely need to put sudo before your Certbot commands so that they run as root (for example, sudo certbot instead of just certbot), especially if you\u2019re using Certbot\u2019s integration with a web server like Apache or Nginx. (The certbot-auto script automatically runs sudo if it\u2019s necessary and you didn\u2019t specify it.) TCP TCP is a protocol that allows two computers to send data to each other. More complex protocols like HTTP, HTTPS, SSH, and FTP, are built using TCP as a building block. Updates It is important to keep software up-to-date so that the latest security fixes and features can be applied. Website That\u2019s Already Online Certbot is usually meant to be used to switch an existing HTTP site to work in HTTPS (and, afterward, to continue renewing the site\u2019s HTTPS certificates whenever necessary). Some Certbot documentation assumes or recommends that you have a working web site that can already be accessed using HTTP on port 80. That means, for example, that if you use a web browser to go to your domain using http://, your web server answers and some kind of content comes up (even if it\u2019s just a default welcome page rather than the final version of your site). Some methods of using Certbot have this as a prerequisite, so you\u2019ll have a smoother experience if you already have a site set up with HTTP. (If your site can\u2019t be accessed this way as a matter of policy, you\u2019ll probably need to use DNS validation in order to get a certificate with Certbot.) Wildcard Certificate \u901a\u914d\u7b26\u8bc1\u4e66\u662f\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a\u4ee5 *. \u5f00\u5934\u7684\u540d\u79f0\u7684\u8bc1\u4e66\u3002 \u6d4f\u89c8\u5668\u5c06\u63a5\u53d7\u4efb\u4f55\u66ff\u4ee3\u661f\u53f7(*)\u7684\u6807\u7b7e\u3002 \u4f8b\u5982\uff0c *.example.com \u7684\u8bc1\u4e66\u5c06\u5bf9 www.example.com \u3001 mail.example.com \u3001 hello.example.com \u548c .goodbye.example.com \u6709\u6548\u3002 \u4f46\u662f\uff0c\u53ea\u5305\u542b\u540d\u79f0 *.example.com \u7684\u901a\u914d\u7b26\u8bc1\u4e66\u5bf9 example.com \u65e0\u6548:\u66ff\u6362\u7684\u6807\u7b7e\u4e0d\u80fd\u4e3a\u7a7a\u3002 \u5982\u679c\u60a8\u5e0c\u671b\u8bc1\u4e66\u5bf9 example.com \u6709\u6548\uff0c\u8fd8\u9700\u8981\u5305\u62ec example.com (\u5373\u4e0d\u5e26 *. \u90e8\u5206)\u3002 \u6b64\u5916\uff0c\u661f\u53f7\u53ea\u80fd\u7531\u4e00\u4e2a\u6807\u7b7e\u4ee3\u66ff\uff0c\u4e0d\u80fd\u7531\u591a\u4e2a\u6807\u7b7e\u4ee3\u66ff\u3002 \u4f8b\u5982\uff0c\u540d\u79f0 hello.goodbye.example.com \u5c06\u4e0d\u4f1a\u88ab\u4ec5\u5305\u542b\u540d *.example.com \u7684\u8bc1\u4e66\u8986\u76d6\u3002 \u4f46\u662f\uff0c\u5b83\u5c06\u88ab *.goodbye.example.com \u8986\u76d6\u3002 \u6ce8\u610f\uff0c\u901a\u914d\u7b26\u540d\u79f0\u4e0d\u80fd\u5305\u542b\u591a\u4e2a\u661f\u53f7\u3002 \u4f8b\u5982\uff0c *.*.example.com \u65e0\u6548\u3002","title":"certbot \u672f\u8bed"},{"location":"certbot/help/","text":"\u5f97\u5230\u5e2e\u52a9 \u00b6 \u5728\u8fd9\u4e00\u9875\u6211\u80fd\u627e\u5230\u4ec0\u4e48? \u00b6 \u672c\u9875\u5305\u542b\u5b66\u4e60\u5982\u4f55\u6253\u5f00 https \u4ee5\u53ca Certbot \u5728\u6b64\u8fc7\u7a0b\u4e2d\u626e\u6f14\u7684\u89d2\u8272\u7684\u8d44\u6e90\u3002 \u6211\u4eec\u8ba4\u4e3a\u5b83\u4eec\u975e\u5e38\u6709\u7528! \u5982\u679c\u4ed6\u4eec\u6ca1\u6709\u56de\u7b54\u4f60\u7684\u95ee\u9898\uff0c\u5728 https://community.letsencrypt.org/ \u4e0a\u6709\u4e00\u4e2a\u719f\u6089\u9879\u76ee\u7684\u5927\u793e\u533a\uff0c\u4ed6\u4eec\u53ef\u80fd\u6709\u4f60\u6b63\u5728\u5bfb\u627e\u7684\u7b54\u6848\u3002 \u4e86\u89e3 Certbot \u548c HTTPS \u00b6 \u6b63\u5728\u5bfb\u627e\u914d\u7f6e Certbot \u7684\u65b9\u6cd5?\u9605\u8bfb Certbot \u6587\u6863\u3002 Certbot\u5f00\u53d1\u4eba\u5458\u548c\u5fd7\u613f\u8005\u5728\u9605\u8bfb\u6587\u6863\u4e2d\u4e3a\u672c\u6587\u6863\u505a\u51fa\u4e86\u8d21\u732e\u3002 \u4e0d\u77e5\u9053\u5982\u4f55\u8bbe\u7f6e\u4f60\u7684\u7f51\u7edc\u670d\u52a1\u5668?\u67e5\u770b\u5916\u90e8\u6559\u7a0b\u3002 DigitalOcean\u63d0\u4f9b\u4e86\u5728\u7279\u5b9a\u64cd\u4f5c\u7cfb\u7edf\u4e0a\u8bbe\u7f6eweb\u670d\u52a1\u5668\u7684\u5f88\u597d\u7684\u6307\u5357\uff0c\u65e0\u8bba\u60a8\u7684\u6258\u7ba1\u63d0\u4f9b\u5546\u662f\u4ec0\u4e48\u3002 \u5c1d\u8bd5\u641c\u7d22\u4f60\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e0e\u201cweb\u670d\u52a1\u5668\u201d\uff0c\u201cnginx\u201d\uff0c\u6216\u201capache\u201d\u5728\u4ed6\u4eec\u7684 \u6559\u7a0b\u9875\u9762 . \u60f3\u77e5\u9053\u4e00\u4e2a\u7279\u5b9a\u7684\u672f\u8bed\u662f\u4ec0\u4e48\u610f\u601d?\u67e5\u770b\u6211\u4eec\u7684\u8bcd\u6c47\u8868\u3002 \u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a \u672f\u8bed\u8868 \uff0c\u8fd9\u4e9b\u672f\u8bed\u5bf9\u7406\u89e3HTTPS\u751f\u6001\u7cfb\u7edf\u5f88\u91cd\u8981\u3002 \u6b63\u5728\u5bfb\u627e\u4e00\u4e2a\u63d0\u4f9b\u514d\u8d39 HTTPS \u8bc1\u4e66\u800c\u4e0d\u9700\u8981\u5b89\u88c5 Certbot \u7684\u5171\u4eab\u6258\u7ba1\u63d0\u4f9b\u5546? \u8bf7\u8bbf\u95ee\u6211\u4eec\u7684\u5fd7\u613f\u8005\u652f\u6301\u7684 HTTPS\u5171\u4eab\u6258\u7ba1\u63d0\u4f9b\u5546\u9875\u9762 \u3002 \u5982\u679c\u60a8\u6ca1\u6709\u770b\u5230\u60a8\u7684\u6258\u7ba1\u63d0\u4f9b\u5546\u6216\u6ce8\u610f\u5230\u8fc7\u65f6\u7684\u4fe1\u606f\uff0c\u8bf7\u901a\u8fc7\u6253\u5f00\u62c9\u8bf7\u6c42\u6765\u66f4\u6539\u6211\u4eec\u7f51\u7ad9Github repo \u4e0a\u7684\u6b64 json\u6587\u4ef6 \u4e0e\u6211\u4eec\u8054\u7cfb\u3002 \u60a8\u8fd8\u53ef\u4ee5\u627e\u5230 \u6210\u529f\u7f16\u8f91\u6258\u7ba1\u63d0\u4f9b\u5546\u5217\u8868\u7684\u6280\u5de7 \u3002 \u5b89\u88c5\u4e86 Certbot\uff0c\u4f46\u4e0d\u7ba1\u7528?\u8bd5\u8bd5\u8fd9\u4e9b\u5916\u90e8\u8d44\u6e90\u3002 \u5f53\u8bd5\u56fe\u8bf7\u6c42\u8bc1\u4e66\u65f6\uff0c\u4eceLet's Encrypt\u5f97\u5230\u9a8c\u8bc1\u9519\u8bef?\u8bd5\u8bd5 Let's Debug \u6216 check-your-website \u3002 \u8bc1\u4e66\u5df2\u7ecf\u5b89\u88c5\uff0c\u4f46\u7f51\u7ad9\u6ca1\u6709\u6309\u9884\u671f\u5de5\u4f5c?\u8bd5\u8bd5 whynopadlock , check-your-website \uff0c\u6216\u8005 SSL Labs \u3002 \u5173\u4e8e\u8fd9\u4e9b\u7ad9\u70b9\u662f\u4ec0\u4e48\u4ee5\u53ca\u5b83\u4eec\u7684\u6700\u4f73\u7528\u4f8b\u7684\u66f4\u591a\u4fe1\u606f\u53ef\u4ee5\u5728 \u6211\u4eec\u7684FAQ \u4e2d\u627e\u5230\u3002 \u5bf9\u4f60\u7684\u8bbe\u7f6e\u6709\u4e00\u4e2a\u5177\u4f53\u7684\u95ee\u9898\uff0c\u6bd4\u5982\u2026\u2026 \u4ece\u4e13\u7528\u4e3b\u673a\u63d0\u4f9b\u5546\u8d2d\u4e70\u4e86\u4e00\u4e2aVPS\uff0c\u4e0d\u786e\u5b9a\u4ec0\u4e48\u9002\u5408\u4f60? \u5bfb\u627e\u5982\u4f55\u8ba9\u4f60\u7684\u7f51\u7ad9\u8fd0\u884c\u8d77\u6765? \u5bfb\u627e\u53ef\u80fd\u4e0e\u60a8\u7684\u7528\u4f8b\u76f8\u5173\u7684\u5916\u90e8\u6559\u7a0b? \u770b\u770b\u6211\u4eec\u7684 \u5e38\u89c1\u95ee\u9898 \u4e2d\u662f\u5426\u5df2\u7ecf\u6db5\u76d6\u4e86\u5b83 \u627e\u4e0d\u5230\u4f60\u9700\u8981\u7684\u4e1c\u897f? \u00b6 \u628a\u4f60\u7684\u95ee\u9898\u5199\u5728 Let 's Encrypt \u793e\u533a\u8bba\u575b\u4e0a\u3002 Let 's Encrypt\u548cCertbot\u793e\u533a \u6216\u8bb8\u80fd\u591f\u56de\u7b54\u60a8\u7684\u95ee\u9898\u3002 \u67e5\u770b Certbot \u6e90\u4ee3\u7801\u3002 Certbot\u6e90\u4ee3\u7801\u53ef\u5728GitHub\u4e0a\u83b7\u5f97 \u3002\u5728Github\u4e0a\u63d0\u4ea4\u62c9\u8bf7\u6c42\u4e4b\u524d\uff0c\u8bf7\u5728Mattermost\u4e0a\u4e0e\u6211\u4eec\u4ea4\u8c08\u3002","title":"\u5e2e\u52a9"},{"location":"certbot/help/#_1","text":"","title":"\u5f97\u5230\u5e2e\u52a9"},{"location":"certbot/help/#_2","text":"\u672c\u9875\u5305\u542b\u5b66\u4e60\u5982\u4f55\u6253\u5f00 https \u4ee5\u53ca Certbot \u5728\u6b64\u8fc7\u7a0b\u4e2d\u626e\u6f14\u7684\u89d2\u8272\u7684\u8d44\u6e90\u3002 \u6211\u4eec\u8ba4\u4e3a\u5b83\u4eec\u975e\u5e38\u6709\u7528! \u5982\u679c\u4ed6\u4eec\u6ca1\u6709\u56de\u7b54\u4f60\u7684\u95ee\u9898\uff0c\u5728 https://community.letsencrypt.org/ \u4e0a\u6709\u4e00\u4e2a\u719f\u6089\u9879\u76ee\u7684\u5927\u793e\u533a\uff0c\u4ed6\u4eec\u53ef\u80fd\u6709\u4f60\u6b63\u5728\u5bfb\u627e\u7684\u7b54\u6848\u3002","title":"\u5728\u8fd9\u4e00\u9875\u6211\u80fd\u627e\u5230\u4ec0\u4e48?"},{"location":"certbot/help/#certbot-https","text":"\u6b63\u5728\u5bfb\u627e\u914d\u7f6e Certbot \u7684\u65b9\u6cd5?\u9605\u8bfb Certbot \u6587\u6863\u3002 Certbot\u5f00\u53d1\u4eba\u5458\u548c\u5fd7\u613f\u8005\u5728\u9605\u8bfb\u6587\u6863\u4e2d\u4e3a\u672c\u6587\u6863\u505a\u51fa\u4e86\u8d21\u732e\u3002 \u4e0d\u77e5\u9053\u5982\u4f55\u8bbe\u7f6e\u4f60\u7684\u7f51\u7edc\u670d\u52a1\u5668?\u67e5\u770b\u5916\u90e8\u6559\u7a0b\u3002 DigitalOcean\u63d0\u4f9b\u4e86\u5728\u7279\u5b9a\u64cd\u4f5c\u7cfb\u7edf\u4e0a\u8bbe\u7f6eweb\u670d\u52a1\u5668\u7684\u5f88\u597d\u7684\u6307\u5357\uff0c\u65e0\u8bba\u60a8\u7684\u6258\u7ba1\u63d0\u4f9b\u5546\u662f\u4ec0\u4e48\u3002 \u5c1d\u8bd5\u641c\u7d22\u4f60\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e0e\u201cweb\u670d\u52a1\u5668\u201d\uff0c\u201cnginx\u201d\uff0c\u6216\u201capache\u201d\u5728\u4ed6\u4eec\u7684 \u6559\u7a0b\u9875\u9762 . \u60f3\u77e5\u9053\u4e00\u4e2a\u7279\u5b9a\u7684\u672f\u8bed\u662f\u4ec0\u4e48\u610f\u601d?\u67e5\u770b\u6211\u4eec\u7684\u8bcd\u6c47\u8868\u3002 \u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a \u672f\u8bed\u8868 \uff0c\u8fd9\u4e9b\u672f\u8bed\u5bf9\u7406\u89e3HTTPS\u751f\u6001\u7cfb\u7edf\u5f88\u91cd\u8981\u3002 \u6b63\u5728\u5bfb\u627e\u4e00\u4e2a\u63d0\u4f9b\u514d\u8d39 HTTPS \u8bc1\u4e66\u800c\u4e0d\u9700\u8981\u5b89\u88c5 Certbot \u7684\u5171\u4eab\u6258\u7ba1\u63d0\u4f9b\u5546? \u8bf7\u8bbf\u95ee\u6211\u4eec\u7684\u5fd7\u613f\u8005\u652f\u6301\u7684 HTTPS\u5171\u4eab\u6258\u7ba1\u63d0\u4f9b\u5546\u9875\u9762 \u3002 \u5982\u679c\u60a8\u6ca1\u6709\u770b\u5230\u60a8\u7684\u6258\u7ba1\u63d0\u4f9b\u5546\u6216\u6ce8\u610f\u5230\u8fc7\u65f6\u7684\u4fe1\u606f\uff0c\u8bf7\u901a\u8fc7\u6253\u5f00\u62c9\u8bf7\u6c42\u6765\u66f4\u6539\u6211\u4eec\u7f51\u7ad9Github repo \u4e0a\u7684\u6b64 json\u6587\u4ef6 \u4e0e\u6211\u4eec\u8054\u7cfb\u3002 \u60a8\u8fd8\u53ef\u4ee5\u627e\u5230 \u6210\u529f\u7f16\u8f91\u6258\u7ba1\u63d0\u4f9b\u5546\u5217\u8868\u7684\u6280\u5de7 \u3002 \u5b89\u88c5\u4e86 Certbot\uff0c\u4f46\u4e0d\u7ba1\u7528?\u8bd5\u8bd5\u8fd9\u4e9b\u5916\u90e8\u8d44\u6e90\u3002 \u5f53\u8bd5\u56fe\u8bf7\u6c42\u8bc1\u4e66\u65f6\uff0c\u4eceLet's Encrypt\u5f97\u5230\u9a8c\u8bc1\u9519\u8bef?\u8bd5\u8bd5 Let's Debug \u6216 check-your-website \u3002 \u8bc1\u4e66\u5df2\u7ecf\u5b89\u88c5\uff0c\u4f46\u7f51\u7ad9\u6ca1\u6709\u6309\u9884\u671f\u5de5\u4f5c?\u8bd5\u8bd5 whynopadlock , check-your-website \uff0c\u6216\u8005 SSL Labs \u3002 \u5173\u4e8e\u8fd9\u4e9b\u7ad9\u70b9\u662f\u4ec0\u4e48\u4ee5\u53ca\u5b83\u4eec\u7684\u6700\u4f73\u7528\u4f8b\u7684\u66f4\u591a\u4fe1\u606f\u53ef\u4ee5\u5728 \u6211\u4eec\u7684FAQ \u4e2d\u627e\u5230\u3002 \u5bf9\u4f60\u7684\u8bbe\u7f6e\u6709\u4e00\u4e2a\u5177\u4f53\u7684\u95ee\u9898\uff0c\u6bd4\u5982\u2026\u2026 \u4ece\u4e13\u7528\u4e3b\u673a\u63d0\u4f9b\u5546\u8d2d\u4e70\u4e86\u4e00\u4e2aVPS\uff0c\u4e0d\u786e\u5b9a\u4ec0\u4e48\u9002\u5408\u4f60? \u5bfb\u627e\u5982\u4f55\u8ba9\u4f60\u7684\u7f51\u7ad9\u8fd0\u884c\u8d77\u6765? \u5bfb\u627e\u53ef\u80fd\u4e0e\u60a8\u7684\u7528\u4f8b\u76f8\u5173\u7684\u5916\u90e8\u6559\u7a0b? \u770b\u770b\u6211\u4eec\u7684 \u5e38\u89c1\u95ee\u9898 \u4e2d\u662f\u5426\u5df2\u7ecf\u6db5\u76d6\u4e86\u5b83","title":"\u4e86\u89e3 Certbot \u548c HTTPS"},{"location":"certbot/help/#_3","text":"\u628a\u4f60\u7684\u95ee\u9898\u5199\u5728 Let 's Encrypt \u793e\u533a\u8bba\u575b\u4e0a\u3002 Let 's Encrypt\u548cCertbot\u793e\u533a \u6216\u8bb8\u80fd\u591f\u56de\u7b54\u60a8\u7684\u95ee\u9898\u3002 \u67e5\u770b Certbot \u6e90\u4ee3\u7801\u3002 Certbot\u6e90\u4ee3\u7801\u53ef\u5728GitHub\u4e0a\u83b7\u5f97 \u3002\u5728Github\u4e0a\u63d0\u4ea4\u62c9\u8bf7\u6c42\u4e4b\u524d\uff0c\u8bf7\u5728Mattermost\u4e0a\u4e0e\u6211\u4eec\u4ea4\u8c08\u3002","title":"\u627e\u4e0d\u5230\u4f60\u9700\u8981\u7684\u4e1c\u897f?"},{"location":"certbot/install/","text":"\u83b7\u53d6 Certbot \u00b6 \u7cfb\u7edf\u9700\u6c42 \u00b6 Linux, macOS, BSD and Windows Linux/BSD \u63a8\u8350 root \u6743\u9650\uff0cWindows \u9700\u8981 Administrator \u6743\u9650 80 \u7aef\u53e3\u5f00\u653e Note Certbot\u5728root\u6743\u9650\u4e0b\u8fd0\u884c\u65f6\u6700\u6709\u7528\uff0c\u56e0\u4e3a\u5b83\u80fd\u591f\u81ea\u52a8\u4e3aApache\u548cnginx\u914d\u7f6eTLS/SSL\u3002 Certbot \u53ef\u4ee5\u76f4\u63a5\u5728\u7f51\u7edc\u670d\u52a1\u5668\u4e0a\u8fd0\u884c , \u901a\u5e38\u7531\u7cfb\u7edf\u7ba1\u7406\u5458\u8d1f\u8d23\u3002\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u5728\u4e2a\u4eba\u8ba1\u7b97\u673a\u4e0a\u8fd0\u884c Certbot \u5e76\u4e0d\u662f\u4e00\u4e2a\u6709\u7528\u7684\u9009\u62e9\u3002\u4e0b\u9762\u7684\u8bf4\u660e\u6d89\u53ca\u5728\u670d\u52a1\u5668\u4e0a\u5b89\u88c5\u548c\u8fd0\u884c Certbot\u3002 \u5b89\u88c5 \u00b6 \u9664\u975e\u60a8\u6709\u975e\u5e38\u7279\u6b8a\u7684\u8981\u6c42\uff0c\u5426\u5219\u6211\u4eec\u5efa\u8bae\u60a8\u4f7f\u7528 https://certbot.eff.org/instructions \u4e0a\u7684\u7cfb\u7edf\u5b89\u88c5\u8bf4\u660e\u3002 Snap (\u63a8\u8350) \u00b6 \u6211\u4eec\u7684\u6307\u4ee4\u5728\u6240\u6709\u4f7f\u7528 Snap \u7684\u7cfb\u7edf\u4e2d\u90fd\u662f\u76f8\u540c\u7684\u3002 \u60a8\u53ef\u4ee5\u5728 https://certbot.eff.org/instructions \u4e0a\u627e\u5230\u901a\u8fc7 Snap \u5b89\u88c5 Certbot \u7684\u8bf4\u660e\uff0c\u9009\u62e9\u60a8\u7684\u670d\u52a1\u5668\u8f6f\u4ef6\uff0c\u7136\u540e\u5728\"System\"\u4e0b\u62c9\u83dc\u5355\u4e2d\u9009\u62e9\u201csnapd\u201d\u3002 \u5927\u591a\u6570\u73b0\u4ee3 Linux \u53d1\u884c\u7248(\u57fa\u672c\u4e0a\u4efb\u4f55\u4f7f\u7528 systemd \u7684\u53d1\u884c\u7248)\u90fd\u53ef\u4ee5\u5b89\u88c5\u6253\u5305\u6210 snap \u7684 Certbot\u3002 snap \u53ef\u7528\u4e8e x86_64\u3001ARMv7 \u548c ARMv8 \u67b6\u6784\u3002 Certbot snap \u63d0\u4f9b\u4e86\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u6cd5\u6765\u786e\u4fdd\u60a8\u62e5\u6709\u6700\u65b0\u7248\u672c\u7684 Certbot\uff0c\u5e76\u9884\u5148\u914d\u7f6e\u4e86\u81ea\u52a8\u8bc1\u4e66\u66f4\u65b0\u7b49\u529f\u80fd\u3002 \u5982\u679c\u4f60\u4e0d\u80fd\u4f7f\u7528 snaps\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u53e6\u4e00\u79cd\u65b9\u6cd5\u6765\u5b89\u88c5 certbot \u3002 \u9009\u62e9 1: Docker \u00b6 Docker \u662f\u4e00\u79cd\u975e\u5e38\u7b80\u5355\u5feb\u901f\u7684\u83b7\u53d6\u8bc1\u4e66\u7684\u65b9\u6cd5\u3002 \u4f46\u662f\uff0c\u8fd9\u79cd\u64cd\u4f5c\u6a21\u5f0f\u65e0\u6cd5\u5b89\u88c5\u8bc1\u4e66\u6216\u914d\u7f6e\u60a8\u7684 web \u670d\u52a1\u5668\uff0c\u56e0\u4e3a\u6211\u4eec\u7684\u5b89\u88c5\u7a0b\u5e8f\u63d2\u4ef6\u65e0\u6cd5\u4ece Docker \u5bb9\u5668\u5185\u90e8\u5230\u8fbe\u60a8\u7684 web \u670d\u52a1\u5668\u3002 \u5927\u591a\u6570\u7528\u6237\u5e94\u8be5\u4f7f\u7528 certbot.eff.org \u4e0a\u7684\u8bf4\u660e\u3002 \u53ea\u6709\u5f53\u4f60\u786e\u5b9a\u81ea\u5df1\u5728\u505a\u4ec0\u4e48\u5e76\u4e14\u6709\u5145\u5206\u7684\u7406\u7531\u8fd9\u6837\u505a\u65f6\uff0c\u4f60\u624d\u5e94\u8be5\u4f7f\u7528 Docker\u3002 \u60a8\u4e00\u5b9a\u8981\u9605\u8bfb where-certs \u90e8\u5206\uff0c\u4ee5\u4fbf\u4e86\u89e3\u5982\u4f55\u624b\u52a8\u7ba1\u7406\u8bc1\u4e66\u3002 '\u6211\u4eec\u7684\u5bc6\u7801\u5957\u4ef6\u9875\u9762' \u63d0\u4f9b\u6709\u5173\u63a8\u8350\u7684\u5bc6\u7801\u5957\u4ef6\u7684\u4e00\u4e9b\u4fe1\u606f\u3002 \u5982\u679c\u8fd9\u4e9b\u5bf9\u60a8\u6765\u8bf4\u90fd\u4e0d\u592a\u6709\u610f\u4e49\uff0c\u90a3\u4e48\u60a8\u4e00\u5b9a\u8981\u4f7f\u7528 certbot.eff.org \u4e3a\u60a8\u7684\u7cfb\u7edf\u63a8\u8350\u7684\u5b89\u88c5\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u5141\u8bb8\u60a8\u4f7f\u7528\u6db5\u76d6\u8fd9\u4e24\u4e2a\u56f0\u96be\u4e3b\u9898\u7684\u5b89\u88c5\u7a0b\u5e8f\u63d2\u4ef6\u3002 \u5982\u679c\u60a8\u4ecd\u7136\u4e0d\u76f8\u4fe1\u5e76\u51b3\u5b9a\u4f7f\u7528\u6b64\u65b9\u6cd5\uff0c\u5219\u4ece\u60a8\u6b63\u5728\u8bf7\u6c42\u8bc1\u4e66\u7684\u57df\u7684\u670d\u52a1\u5668\u89e3\u6790\u5230[ install Docker ]\uff0c\u7136\u540e\u53d1\u51fa\u5982\u4e0b\u6240\u793a\u7684\u547d\u4ee4\u3002 \u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f\u5e26\u6709 Standalone \u63d2\u4ef6\u7684 Certbot\uff0c\u4f60\u9700\u8981\u5728 certbot/certbot \u4e4b\u524d\u7684\u547d\u4ee4\u884c\u4e2d\u5305\u542b -p 80:80 \u6216 -p 443:443 \u4e4b\u7c7b\u7684\u5185\u5bb9\uff0c\u4ece\u800c\u4f7f\u5b83\u6240\u4f7f\u7528\u7684\u7aef\u53e3\u4ece\u5bb9\u5668\u5916\u90e8\u53ef\u8bbf\u95ee\u3002 sudo docker run -it --rm --name certbot \\ -v \"/etc/letsencrypt:/etc/letsencrypt\" \\ -v \"/var/lib/letsencrypt:/var/lib/letsencrypt\" \\ certbot/certbot certonly \u4f7f\u7528 certonly \u547d\u4ee4\u8fd0\u884c Certbot \u5c06\u83b7\u5f97\u4e00\u4e2a\u8bc1\u4e66\uff0c\u5e76\u5c06\u5176\u653e\u5728\u7cfb\u7edf\u4e0a\u7684 /etc/letsencrypt/live \u76ee\u5f55\u4e0b\u3002 \u56e0\u4e3a Certonly \u4e0d\u80fd\u4ece Docker \u5185\u90e8\u5b89\u88c5\u8bc1\u4e66\uff0c\u6240\u4ee5\u60a8\u5fc5\u987b\u6309\u7167 web \u670d\u52a1\u5668\u63d0\u4f9b\u5546\u63a8\u8350\u7684\u6b65\u9aa4\u624b\u52a8\u5b89\u88c5\u8bc1\u4e66\u3002 \u5728 https://hub.docker.com/u/certbot \u4e0a\u4e5f\u6709 Certbot \u7684\u6bcf\u4e2a DNS \u63d2\u4ef6\u7684 Docker \u6620\u50cf\uff0c\u53ef\u4ee5\u81ea\u52a8\u4e3a\u6d41\u884c\u7684\u63d0\u4f9b\u5546\u8fdb\u884c DNS \u57df\u9a8c\u8bc1\u3002 \u8981\u4f7f\u7528\u4e00\u4e2a\uff0c\u53ea\u9700\u5c06\u4e0a\u9762\u547d\u4ee4\u4e2d\u7684 certbot/certbot \u66ff\u6362\u4e3a\u60a8\u60f3\u8981\u4f7f\u7528\u7684\u6620\u50cf\u7684\u540d\u79f0\u3002 \u4f8b\u5982\uff0c\u8981\u5728 Amazon Route 53 \u4e0a\u4f7f\u7528 Certbot \u7684\u63d2\u4ef6\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 certbot/dns-route53 \u3002 \u60a8\u53ef\u80fd\u8fd8\u9700\u8981\u5411 Certbot \u6dfb\u52a0\u6807\u5fd7\u548c/\u6216\u6302\u8f7d\u5176\u4ed6\u76ee\u5f55\uff0c\u4ee5\u63d0\u4f9b\u5bf9 DNS \u63d2\u4ef6\u6587\u6863 \u4e2d\u6307\u5b9a\u7684 DNS API \u51ed\u636e\u7684\u8bbf\u95ee\u3002 \u6709\u5173 /etc/letsencrypt \u76ee\u5f55\u5e03\u5c40\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605[ where-certs ]\u3002 \u9009\u62e9 2: Pip \u00b6 Installing Certbot through pip is only supported on a best effort basis and when using a virtual environment. Instructions for installing Certbot through pip can be found at https://certbot.eff.org/instructions by selecting your server software and then choosing \"pip\" in the \"System\" dropdown menu. \u9009\u62e9 3: \u7b2c\u4e09\u65b9\u5206\u53d1 \u00b6 Third party distributions exist for other specific needs. They often are maintained by these parties outside of Certbot and tend to rapidly fall out of date on LTS-style distributions. Certbot-Auto [\u4f5c\u5e9f] \u00b6 .. toctree:: :hidden: We used to have a shell script named certbot-auto to help people install Certbot on UNIX operating systems, however, this script is no longer supported. Please remove certbot-auto . To do so, you need to do three things: If you added a cron job or systemd timer to automatically run certbot-auto to renew your certificates, you should delete it. If you did this by following our instructions, you can delete the entry added to /etc/crontab by running a command like sudo sed -i '/certbot-auto/d' /etc/crontab . Delete the certbot-auto script. If you placed it in /usr/local/bin`` like we recommended, you can delete it by running sudo rm /usr/local/bin/certbot-auto`. Delete the Certbot installation created by certbot-auto by running sudo rm -rf /opt/eff.org .","title":"\u5b89\u88c5"},{"location":"certbot/install/#certbot","text":"","title":"\u83b7\u53d6 Certbot"},{"location":"certbot/install/#_1","text":"Linux, macOS, BSD and Windows Linux/BSD \u63a8\u8350 root \u6743\u9650\uff0cWindows \u9700\u8981 Administrator \u6743\u9650 80 \u7aef\u53e3\u5f00\u653e Note Certbot\u5728root\u6743\u9650\u4e0b\u8fd0\u884c\u65f6\u6700\u6709\u7528\uff0c\u56e0\u4e3a\u5b83\u80fd\u591f\u81ea\u52a8\u4e3aApache\u548cnginx\u914d\u7f6eTLS/SSL\u3002 Certbot \u53ef\u4ee5\u76f4\u63a5\u5728\u7f51\u7edc\u670d\u52a1\u5668\u4e0a\u8fd0\u884c , \u901a\u5e38\u7531\u7cfb\u7edf\u7ba1\u7406\u5458\u8d1f\u8d23\u3002\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u5728\u4e2a\u4eba\u8ba1\u7b97\u673a\u4e0a\u8fd0\u884c Certbot \u5e76\u4e0d\u662f\u4e00\u4e2a\u6709\u7528\u7684\u9009\u62e9\u3002\u4e0b\u9762\u7684\u8bf4\u660e\u6d89\u53ca\u5728\u670d\u52a1\u5668\u4e0a\u5b89\u88c5\u548c\u8fd0\u884c Certbot\u3002","title":"\u7cfb\u7edf\u9700\u6c42"},{"location":"certbot/install/#_2","text":"\u9664\u975e\u60a8\u6709\u975e\u5e38\u7279\u6b8a\u7684\u8981\u6c42\uff0c\u5426\u5219\u6211\u4eec\u5efa\u8bae\u60a8\u4f7f\u7528 https://certbot.eff.org/instructions \u4e0a\u7684\u7cfb\u7edf\u5b89\u88c5\u8bf4\u660e\u3002","title":"\u5b89\u88c5"},{"location":"certbot/install/#snap","text":"\u6211\u4eec\u7684\u6307\u4ee4\u5728\u6240\u6709\u4f7f\u7528 Snap \u7684\u7cfb\u7edf\u4e2d\u90fd\u662f\u76f8\u540c\u7684\u3002 \u60a8\u53ef\u4ee5\u5728 https://certbot.eff.org/instructions \u4e0a\u627e\u5230\u901a\u8fc7 Snap \u5b89\u88c5 Certbot \u7684\u8bf4\u660e\uff0c\u9009\u62e9\u60a8\u7684\u670d\u52a1\u5668\u8f6f\u4ef6\uff0c\u7136\u540e\u5728\"System\"\u4e0b\u62c9\u83dc\u5355\u4e2d\u9009\u62e9\u201csnapd\u201d\u3002 \u5927\u591a\u6570\u73b0\u4ee3 Linux \u53d1\u884c\u7248(\u57fa\u672c\u4e0a\u4efb\u4f55\u4f7f\u7528 systemd \u7684\u53d1\u884c\u7248)\u90fd\u53ef\u4ee5\u5b89\u88c5\u6253\u5305\u6210 snap \u7684 Certbot\u3002 snap \u53ef\u7528\u4e8e x86_64\u3001ARMv7 \u548c ARMv8 \u67b6\u6784\u3002 Certbot snap \u63d0\u4f9b\u4e86\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u6cd5\u6765\u786e\u4fdd\u60a8\u62e5\u6709\u6700\u65b0\u7248\u672c\u7684 Certbot\uff0c\u5e76\u9884\u5148\u914d\u7f6e\u4e86\u81ea\u52a8\u8bc1\u4e66\u66f4\u65b0\u7b49\u529f\u80fd\u3002 \u5982\u679c\u4f60\u4e0d\u80fd\u4f7f\u7528 snaps\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u53e6\u4e00\u79cd\u65b9\u6cd5\u6765\u5b89\u88c5 certbot \u3002","title":"Snap (\u63a8\u8350)"},{"location":"certbot/install/#1-docker","text":"Docker \u662f\u4e00\u79cd\u975e\u5e38\u7b80\u5355\u5feb\u901f\u7684\u83b7\u53d6\u8bc1\u4e66\u7684\u65b9\u6cd5\u3002 \u4f46\u662f\uff0c\u8fd9\u79cd\u64cd\u4f5c\u6a21\u5f0f\u65e0\u6cd5\u5b89\u88c5\u8bc1\u4e66\u6216\u914d\u7f6e\u60a8\u7684 web \u670d\u52a1\u5668\uff0c\u56e0\u4e3a\u6211\u4eec\u7684\u5b89\u88c5\u7a0b\u5e8f\u63d2\u4ef6\u65e0\u6cd5\u4ece Docker \u5bb9\u5668\u5185\u90e8\u5230\u8fbe\u60a8\u7684 web \u670d\u52a1\u5668\u3002 \u5927\u591a\u6570\u7528\u6237\u5e94\u8be5\u4f7f\u7528 certbot.eff.org \u4e0a\u7684\u8bf4\u660e\u3002 \u53ea\u6709\u5f53\u4f60\u786e\u5b9a\u81ea\u5df1\u5728\u505a\u4ec0\u4e48\u5e76\u4e14\u6709\u5145\u5206\u7684\u7406\u7531\u8fd9\u6837\u505a\u65f6\uff0c\u4f60\u624d\u5e94\u8be5\u4f7f\u7528 Docker\u3002 \u60a8\u4e00\u5b9a\u8981\u9605\u8bfb where-certs \u90e8\u5206\uff0c\u4ee5\u4fbf\u4e86\u89e3\u5982\u4f55\u624b\u52a8\u7ba1\u7406\u8bc1\u4e66\u3002 '\u6211\u4eec\u7684\u5bc6\u7801\u5957\u4ef6\u9875\u9762' \u63d0\u4f9b\u6709\u5173\u63a8\u8350\u7684\u5bc6\u7801\u5957\u4ef6\u7684\u4e00\u4e9b\u4fe1\u606f\u3002 \u5982\u679c\u8fd9\u4e9b\u5bf9\u60a8\u6765\u8bf4\u90fd\u4e0d\u592a\u6709\u610f\u4e49\uff0c\u90a3\u4e48\u60a8\u4e00\u5b9a\u8981\u4f7f\u7528 certbot.eff.org \u4e3a\u60a8\u7684\u7cfb\u7edf\u63a8\u8350\u7684\u5b89\u88c5\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u5141\u8bb8\u60a8\u4f7f\u7528\u6db5\u76d6\u8fd9\u4e24\u4e2a\u56f0\u96be\u4e3b\u9898\u7684\u5b89\u88c5\u7a0b\u5e8f\u63d2\u4ef6\u3002 \u5982\u679c\u60a8\u4ecd\u7136\u4e0d\u76f8\u4fe1\u5e76\u51b3\u5b9a\u4f7f\u7528\u6b64\u65b9\u6cd5\uff0c\u5219\u4ece\u60a8\u6b63\u5728\u8bf7\u6c42\u8bc1\u4e66\u7684\u57df\u7684\u670d\u52a1\u5668\u89e3\u6790\u5230[ install Docker ]\uff0c\u7136\u540e\u53d1\u51fa\u5982\u4e0b\u6240\u793a\u7684\u547d\u4ee4\u3002 \u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f\u5e26\u6709 Standalone \u63d2\u4ef6\u7684 Certbot\uff0c\u4f60\u9700\u8981\u5728 certbot/certbot \u4e4b\u524d\u7684\u547d\u4ee4\u884c\u4e2d\u5305\u542b -p 80:80 \u6216 -p 443:443 \u4e4b\u7c7b\u7684\u5185\u5bb9\uff0c\u4ece\u800c\u4f7f\u5b83\u6240\u4f7f\u7528\u7684\u7aef\u53e3\u4ece\u5bb9\u5668\u5916\u90e8\u53ef\u8bbf\u95ee\u3002 sudo docker run -it --rm --name certbot \\ -v \"/etc/letsencrypt:/etc/letsencrypt\" \\ -v \"/var/lib/letsencrypt:/var/lib/letsencrypt\" \\ certbot/certbot certonly \u4f7f\u7528 certonly \u547d\u4ee4\u8fd0\u884c Certbot \u5c06\u83b7\u5f97\u4e00\u4e2a\u8bc1\u4e66\uff0c\u5e76\u5c06\u5176\u653e\u5728\u7cfb\u7edf\u4e0a\u7684 /etc/letsencrypt/live \u76ee\u5f55\u4e0b\u3002 \u56e0\u4e3a Certonly \u4e0d\u80fd\u4ece Docker \u5185\u90e8\u5b89\u88c5\u8bc1\u4e66\uff0c\u6240\u4ee5\u60a8\u5fc5\u987b\u6309\u7167 web \u670d\u52a1\u5668\u63d0\u4f9b\u5546\u63a8\u8350\u7684\u6b65\u9aa4\u624b\u52a8\u5b89\u88c5\u8bc1\u4e66\u3002 \u5728 https://hub.docker.com/u/certbot \u4e0a\u4e5f\u6709 Certbot \u7684\u6bcf\u4e2a DNS \u63d2\u4ef6\u7684 Docker \u6620\u50cf\uff0c\u53ef\u4ee5\u81ea\u52a8\u4e3a\u6d41\u884c\u7684\u63d0\u4f9b\u5546\u8fdb\u884c DNS \u57df\u9a8c\u8bc1\u3002 \u8981\u4f7f\u7528\u4e00\u4e2a\uff0c\u53ea\u9700\u5c06\u4e0a\u9762\u547d\u4ee4\u4e2d\u7684 certbot/certbot \u66ff\u6362\u4e3a\u60a8\u60f3\u8981\u4f7f\u7528\u7684\u6620\u50cf\u7684\u540d\u79f0\u3002 \u4f8b\u5982\uff0c\u8981\u5728 Amazon Route 53 \u4e0a\u4f7f\u7528 Certbot \u7684\u63d2\u4ef6\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 certbot/dns-route53 \u3002 \u60a8\u53ef\u80fd\u8fd8\u9700\u8981\u5411 Certbot \u6dfb\u52a0\u6807\u5fd7\u548c/\u6216\u6302\u8f7d\u5176\u4ed6\u76ee\u5f55\uff0c\u4ee5\u63d0\u4f9b\u5bf9 DNS \u63d2\u4ef6\u6587\u6863 \u4e2d\u6307\u5b9a\u7684 DNS API \u51ed\u636e\u7684\u8bbf\u95ee\u3002 \u6709\u5173 /etc/letsencrypt \u76ee\u5f55\u5e03\u5c40\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605[ where-certs ]\u3002","title":"\u9009\u62e9 1: Docker"},{"location":"certbot/install/#2-pip","text":"Installing Certbot through pip is only supported on a best effort basis and when using a virtual environment. Instructions for installing Certbot through pip can be found at https://certbot.eff.org/instructions by selecting your server software and then choosing \"pip\" in the \"System\" dropdown menu.","title":"\u9009\u62e9 2: Pip"},{"location":"certbot/install/#3","text":"Third party distributions exist for other specific needs. They often are maintained by these parties outside of Certbot and tend to rapidly fall out of date on LTS-style distributions.","title":"\u9009\u62e9 3: \u7b2c\u4e09\u65b9\u5206\u53d1"},{"location":"certbot/install/#certbot-auto","text":".. toctree:: :hidden: We used to have a shell script named certbot-auto to help people install Certbot on UNIX operating systems, however, this script is no longer supported. Please remove certbot-auto . To do so, you need to do three things: If you added a cron job or systemd timer to automatically run certbot-auto to renew your certificates, you should delete it. If you did this by following our instructions, you can delete the entry added to /etc/crontab by running a command like sudo sed -i '/certbot-auto/d' /etc/crontab . Delete the certbot-auto script. If you placed it in /usr/local/bin`` like we recommended, you can delete it by running sudo rm /usr/local/bin/certbot-auto`. Delete the Certbot installation created by certbot-auto by running sudo rm -rf /opt/eff.org .","title":"Certbot-Auto [\u4f5c\u5e9f]"},{"location":"certbot/instructions/","text":"\u6211\u7684 HTTP \u7f51\u7ad9\u5728 macOS \u4e0a\u8fd0\u884c Nginx \u00b6 SSH \u8fdb\u5165\u670d\u52a1\u5668 \u4ee5\u5177\u6709 sudo \u6743\u9650\u7684\u7528\u6237 SSH \u5230\u8fd0\u884c HTTP \u7f51\u7ad9\u7684\u670d\u52a1\u5668\u3002 \u5b89\u88c5 Homebrew \u60a8\u9700\u8981\u5b89\u88c5 Homebrew\u3002 \u5728 Homebrew \u7f51\u7ad9\u4e0a\u6309\u7167\u4ee5\u4e0b\u8bf4\u660e\u5b89\u88c5 Homebrew\u3002 \u5b89\u88c5 Homebrew \u5b89\u88c5 Certbot \u5728\u673a\u5668\u7684\u547d\u4ee4\u884c\u4e0a\u8fd0\u884c\u6b64\u547d\u4ee4\u6765\u5b89\u88c5 Certbot\u3002 brew install certbot \u9009\u62e9\u4f60\u60f3\u5982\u4f55\u8fd0\u884c Certbot \u4f60\u53ef\u4ee5\u6682\u65f6\u505c\u6b62\u4f60\u7684\u7f51\u7ad9\u5417? \u662f\u7684\uff0c\u6211\u7684 web \u670d\u52a1\u5668\u76ee\u524d\u6ca1\u6709\u5728\u8fd9\u53f0\u673a\u5668\u4e0a\u8fd0\u884c\u3002 \u505c\u6b62\u60a8\u7684web\u670d\u52a1\u5668\uff0c\u7136\u540e\u8fd0\u884c\u6b64\u547d\u4ee4\u83b7\u53d6\u8bc1\u4e66\u3002Certbot\u4f1a\u6682\u65f6\u542f\u52a8\u4f60\u673a\u5668\u4e0a\u7684\u7f51\u7edc\u670d\u52a1\u5668\u3002 sudo certbot certonly --standalone \u4e0d\uff0c\u6211\u9700\u8981\u4fdd\u6301\u6211\u7684\u7f51\u7edc\u670d\u52a1\u5668\u6b63\u5e38\u8fd0\u884c\u3002 \u5982\u679c\u60a8\u7684web\u670d\u52a1\u5668\u5df2\u7ecf\u5728\u4f7f\u7528\u7aef\u53e380\uff0c\u5e76\u4e14\u4e0d\u60f3\u5728Certbot\u8fd0\u884c\u65f6\u505c\u6b62\u5b83\uff0c\u8bf7\u8fd0\u884c\u6b64\u547d\u4ee4\u5e76\u9075\u5faa\u7ec8\u7aef\u4e2d\u7684\u8bf4\u660e\u3002 sudo certbot certonly --webroot Note \u8981\u4f7f\u7528webroot\u63d2\u4ef6\uff0c\u60a8\u7684\u670d\u52a1\u5668\u5fc5\u987b\u914d\u7f6e\u4e3a\u63d0\u4f9b\u9690\u85cf\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u3002 \u5982\u679c\u60a8\u7684web\u670d\u52a1\u5668\u914d\u7f6e\u5bf9 /.well-known \u8fdb\u884c\u4e86\u7279\u6b8a\u5904\u7406\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u4fee\u6539\u914d\u7f6e\u4ee5\u786e\u4fdd /.well-known/acme-challenge \u5185\u7684\u6587\u4ef6\u7531web\u670d\u52a1\u5668\u63d0\u4f9b\u3002 \u5b89\u88c5\u8bc1\u4e66 \u60a8\u9700\u8981\u5728 web \u670d\u52a1\u5668\u7684\u914d\u7f6e\u6587\u4ef6\u4e2d\u5b89\u88c5\u65b0\u8bc1\u4e66\u3002 \u8bbe\u7f6e\u81ea\u52a8\u7eed\u8ba2 \u6211\u4eec\u5efa\u8bae\u8fd0\u884c\u4e0b\u9762\u7684\u4ee3\u7801\u884c\uff0c\u5b83\u5c06\u5411\u9ed8\u8ba4\u7684 crontab \u6dfb\u52a0\u4e00\u4e2a cron \u4f5c\u4e1a\u3002 echo \"0 0,12 * * * root $( command -v python3 ) -c 'import random; import time; time.sleep(random.random() * 3600)' && sudo $( command -v certbot ) renew -q\" | sudo tee -a /etc/crontab > /dev/null \u786e\u8ba4 Certbot \u5de5\u4f5c\u6b63\u5e38 \u8981\u786e\u8ba4\u60a8\u7684\u7ad9\u70b9\u5df2\u6b63\u786e\u8bbe\u7f6e\uff0c\u8bf7\u5728\u6d4f\u89c8\u5668\u4e2d\u8bbf\u95ee https://yourwebsite.com/ \uff0c\u5e76\u5728 URL \u680f\u4e2d\u5bfb\u627e\u9501\u56fe\u6807\u3002","title":"\u8bf4\u660e"},{"location":"certbot/instructions/#http-macos-nginx","text":"SSH \u8fdb\u5165\u670d\u52a1\u5668 \u4ee5\u5177\u6709 sudo \u6743\u9650\u7684\u7528\u6237 SSH \u5230\u8fd0\u884c HTTP \u7f51\u7ad9\u7684\u670d\u52a1\u5668\u3002 \u5b89\u88c5 Homebrew \u60a8\u9700\u8981\u5b89\u88c5 Homebrew\u3002 \u5728 Homebrew \u7f51\u7ad9\u4e0a\u6309\u7167\u4ee5\u4e0b\u8bf4\u660e\u5b89\u88c5 Homebrew\u3002 \u5b89\u88c5 Homebrew \u5b89\u88c5 Certbot \u5728\u673a\u5668\u7684\u547d\u4ee4\u884c\u4e0a\u8fd0\u884c\u6b64\u547d\u4ee4\u6765\u5b89\u88c5 Certbot\u3002 brew install certbot \u9009\u62e9\u4f60\u60f3\u5982\u4f55\u8fd0\u884c Certbot \u4f60\u53ef\u4ee5\u6682\u65f6\u505c\u6b62\u4f60\u7684\u7f51\u7ad9\u5417? \u662f\u7684\uff0c\u6211\u7684 web \u670d\u52a1\u5668\u76ee\u524d\u6ca1\u6709\u5728\u8fd9\u53f0\u673a\u5668\u4e0a\u8fd0\u884c\u3002 \u505c\u6b62\u60a8\u7684web\u670d\u52a1\u5668\uff0c\u7136\u540e\u8fd0\u884c\u6b64\u547d\u4ee4\u83b7\u53d6\u8bc1\u4e66\u3002Certbot\u4f1a\u6682\u65f6\u542f\u52a8\u4f60\u673a\u5668\u4e0a\u7684\u7f51\u7edc\u670d\u52a1\u5668\u3002 sudo certbot certonly --standalone \u4e0d\uff0c\u6211\u9700\u8981\u4fdd\u6301\u6211\u7684\u7f51\u7edc\u670d\u52a1\u5668\u6b63\u5e38\u8fd0\u884c\u3002 \u5982\u679c\u60a8\u7684web\u670d\u52a1\u5668\u5df2\u7ecf\u5728\u4f7f\u7528\u7aef\u53e380\uff0c\u5e76\u4e14\u4e0d\u60f3\u5728Certbot\u8fd0\u884c\u65f6\u505c\u6b62\u5b83\uff0c\u8bf7\u8fd0\u884c\u6b64\u547d\u4ee4\u5e76\u9075\u5faa\u7ec8\u7aef\u4e2d\u7684\u8bf4\u660e\u3002 sudo certbot certonly --webroot Note \u8981\u4f7f\u7528webroot\u63d2\u4ef6\uff0c\u60a8\u7684\u670d\u52a1\u5668\u5fc5\u987b\u914d\u7f6e\u4e3a\u63d0\u4f9b\u9690\u85cf\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u3002 \u5982\u679c\u60a8\u7684web\u670d\u52a1\u5668\u914d\u7f6e\u5bf9 /.well-known \u8fdb\u884c\u4e86\u7279\u6b8a\u5904\u7406\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u4fee\u6539\u914d\u7f6e\u4ee5\u786e\u4fdd /.well-known/acme-challenge \u5185\u7684\u6587\u4ef6\u7531web\u670d\u52a1\u5668\u63d0\u4f9b\u3002 \u5b89\u88c5\u8bc1\u4e66 \u60a8\u9700\u8981\u5728 web \u670d\u52a1\u5668\u7684\u914d\u7f6e\u6587\u4ef6\u4e2d\u5b89\u88c5\u65b0\u8bc1\u4e66\u3002 \u8bbe\u7f6e\u81ea\u52a8\u7eed\u8ba2 \u6211\u4eec\u5efa\u8bae\u8fd0\u884c\u4e0b\u9762\u7684\u4ee3\u7801\u884c\uff0c\u5b83\u5c06\u5411\u9ed8\u8ba4\u7684 crontab \u6dfb\u52a0\u4e00\u4e2a cron \u4f5c\u4e1a\u3002 echo \"0 0,12 * * * root $( command -v python3 ) -c 'import random; import time; time.sleep(random.random() * 3600)' && sudo $( command -v certbot ) renew -q\" | sudo tee -a /etc/crontab > /dev/null \u786e\u8ba4 Certbot \u5de5\u4f5c\u6b63\u5e38 \u8981\u786e\u8ba4\u60a8\u7684\u7ad9\u70b9\u5df2\u6b63\u786e\u8bbe\u7f6e\uff0c\u8bf7\u5728\u6d4f\u89c8\u5668\u4e2d\u8bbf\u95ee https://yourwebsite.com/ \uff0c\u5e76\u5728 URL \u680f\u4e2d\u5bfb\u627e\u9501\u56fe\u6807\u3002","title":"\u6211\u7684 HTTP \u7f51\u7ad9\u5728 macOS \u4e0a\u8fd0\u884c Nginx"},{"location":"certbot/intro/","text":"\u7b80\u4ecb \u00b6 Quote \u6587\u6863\u6e90\uff1a https://eff-certbot.readthedocs.io/en/stable/index.html Note \u8981\u5feb\u901f\u5165\u95e8\uff0c\u8bf7\u4f7f\u7528 \u4ea4\u4e92\u5f0f\u5b89\u88c5\u6307\u5357 \u3002 Certbot \u662f EFF \u4e3a\u6574\u4e2a\u4e92\u8054\u7f51\u52a0\u5bc6\u6240\u505a\u52aa\u529b\u7684\u4e00\u90e8\u5206\u3002 \u7f51\u7edc\u4e0a\u7684\u5b89\u5168\u901a\u4fe1\u4f9d\u8d56\u4e8e HTTPS\uff0c\u5b83\u9700\u8981\u4f7f\u7528\u6570\u5b57\u8bc1\u4e66\uff0c\u8ba9\u6d4f\u89c8\u5668\u9a8c\u8bc1\u7f51\u7edc\u670d\u52a1\u5668\u7684\u8eab\u4efd(\u4f8b\u5982\uff0c\u8fd9\u771f\u7684\u662f google.com \u5417?) Web \u670d\u52a1\u5668\u4ece\u88ab\u79f0\u4e3a\u8bc1\u4e66\u9881\u53d1\u673a\u6784(ca)\u7684\u53d7\u4fe1\u4efb\u7b2c\u4e09\u65b9\u83b7\u53d6\u8bc1\u4e66\u3002 Certbot \u662f\u4e00\u4e2a\u6613\u4e8e\u4f7f\u7528\u7684\u5ba2\u6237\u7aef\uff0c\u5b83\u53ef\u4ee5\u4ece Let\u2019s encrypt(\u4e00\u4e2a\u7531 EFF\u3001Mozilla \u548c\u5176\u4ed6\u673a\u6784\u63a8\u51fa\u7684\u5f00\u653e\u8bc1\u4e66\u9881\u53d1\u673a\u6784)\u83b7\u53d6\u8bc1\u4e66\uff0c\u5e76\u5c06\u5176\u90e8\u7f72\u5230 web \u670d\u52a1\u5668\u4e0a\u3002 \u4efb\u4f55\u7ecf\u5386\u8fc7\u5efa\u7acb\u5b89\u5168\u7f51\u7ad9\u7684\u4eba\u90fd\u77e5\u9053\u83b7\u5f97\u548c\u7ef4\u62a4\u8bc1\u4e66\u6709\u591a\u9ebb\u70e6\u3002 Certbot \u548c Let 's Encrypt \u53ef\u4ee5\u81ea\u52a8\u6d88\u9664\u8fd9\u79cd\u75db\u82e6\uff0c\u8ba9\u60a8\u901a\u8fc7\u7b80\u5355\u7684\u547d\u4ee4\u6253\u5f00\u548c\u7ba1\u7406 HTTPS\u3002 \u4f7f\u7528 Certbot \u548c Let 's Encrypt \u662f\u514d\u8d39\u7684\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u5b89\u6392\u4ed8\u6b3e\u3002 \u4f60\u5982\u4f55\u4f7f\u7528 Certbot \u53d6\u51b3\u4e8e\u4f60\u7684\u7f51\u7edc\u670d\u52a1\u5668\u7684\u914d\u7f6e\u3002\u6700\u597d\u7684\u65b9\u6cd5\u662f\u4f7f\u7528\u6211\u4eec\u7684\u4e92\u52a8\u6307\u5357\u3002 \u5b83\u6839\u636e\u60a8\u7684\u914d\u7f6e\u8bbe\u7f6e\u751f\u6210\u6307\u4ee4\u3002 \u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u60a8\u9700\u8981 root \u6216\u7ba1\u7406\u5458\u8bbf\u95ee\u60a8\u7684 web \u670d\u52a1\u5668\u624d\u80fd\u8fd0\u884c Certbot\u3002 Certbot \u53ef\u4ee5\u76f4\u63a5\u5728\u4f60\u7684\u7f51\u7edc\u670d\u52a1\u5668\u4e0a\u8fd0\u884c\uff0c\u800c\u4e0d\u662f\u5728\u4f60\u7684\u4e2a\u4eba\u7535\u8111\u4e0a\u3002 \u5982\u679c\u60a8\u6b63\u5728\u4f7f\u7528\u6258\u7ba1\u670d\u52a1\uff0c\u5e76\u4e14\u4e0d\u80fd\u76f4\u63a5\u8bbf\u95ee web \u670d\u52a1\u5668\uff0c\u5219\u53ef\u80fd\u65e0\u6cd5\u4f7f\u7528 Certbot\u3002 \u8bf7\u5411\u6258\u7ba1\u63d0\u4f9b\u5546\u67e5\u8be2\u6709\u5173\u4e0a\u4f20\u8bc1\u4e66\u6216\u4f7f\u7528 Let 's Encrypt \u9881\u53d1\u7684\u8bc1\u4e66\u7684\u6587\u6863\u3002 Certbot \u662f Let 's Encrypt CA(\u6216\u4efb\u4f55\u5176\u4ed6\u4f7f\u7528 ACME \u534f\u8bae\u7684 CA)\u7684\u529f\u80fd\u9f50\u5168\u3001\u53ef\u6269\u5c55\u7684\u5ba2\u6237\u7aef\uff0c\u53ef\u4ee5\u81ea\u52a8\u5316\u83b7\u53d6\u8bc1\u4e66\u548c\u914d\u7f6e web \u670d\u52a1\u5668\u4ee5\u4f7f\u7528\u5b83\u4eec\u7684\u4efb\u52a1\u3002 \u8be5\u5ba2\u6237\u7aef\u8fd0\u884c\u5728\u57fa\u4e8e unix \u7684\u64cd\u4f5c\u7cfb\u7edf\u4e0a\u3002 \u8981\u67e5\u770b Certbot \u5728\u4e0d\u540c\u7248\u672c\u4e4b\u95f4\u6240\u505a\u7684\u66f4\u6539\uff0c\u8bf7\u53c2\u9605\u6211\u4eec\u7684\u66f4\u65b0\u65e5\u5fd7\u3002 \u8d21\u732e \u00b6 \u5982\u679c\u4f60\u60f3\u4e3a\u8fd9\u4e2a\u9879\u76ee\u505a\u8d21\u732e\uff0c\u8bf7\u9605\u8bfb\u5f00\u53d1\u8005\u6307\u5357\u3002 \u672c\u9879\u76ee\u53d7 EFF \u516c\u5171\u9879\u76ee\u884c\u4e3a\u51c6\u5219\u7684\u7ea6\u675f\u3002 \u5982\u4f55\u8fd0\u884c\u5ba2\u6237\u7aef \u00b6 \u5b89\u88c5\u548c\u8fd0\u884c Certbot \u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u8bbf\u95ee \uff0c\u5728\u90a3\u91cc\u60a8\u53ef\u4ee5\u627e\u5230\u8bb8\u591a web \u670d\u52a1\u5668\u548c\u64cd\u4f5c\u7cfb\u7edf\u7ec4\u5408\u7684\u6b63\u786e\u8bf4\u660e\u3002 \u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 Get Certbot \u3002 \u66f4\u6df1\u5165\u5730\u4e86\u89e3\u5ba2\u6237 \u00b6 \u8981\u8be6\u7ec6\u7406\u89e3\u5ba2\u6237\u7aef\u5728\u505a\u4ec0\u4e48\uff0c\u4e86\u89e3\u5b83\u4f7f\u7528\u63d2\u4ef6\u7684\u65b9\u5f0f\u5f88\u91cd\u8981\u3002 \u8bf7\u53c2\u89c1\u7528\u6237\u6307\u5357\u4e2d\u5bf9 \u63d2\u4ef6\u7684\u8bf4\u660e \u3002 \u94fe\u63a5 \u00b6 \u6587\u6863: https://certbot.eff.org/docs \u8f6f\u4ef6\u9879\u76ee: https://github.com/certbot/certbot \u5f00\u53d1\u4eba\u5458\u6ce8\u610f\u4e8b\u9879: https://certbot.eff.org/docs/contributing.html \u4e3b\u8981\u7684\u7f51\u7ad9: https://certbot.eff.org Let\u2019s Encrypt \u7f51\u7ad9: https://letsencrypt.org \u793e\u533a: https://community.letsencrypt.org ACME spec: RFC 8555 github \u4e2d\u7684 ACME \u5de5\u4f5c\u533a(\u5b58\u6863): https://github.com/ietf-wg-acme/acme \u7cfb\u7edf\u9700\u6c42 \u00b6 \u67e5\u770b https://certbot.eff.org/docs/install.html#system-requirements .","title":"\u4ecb\u7ecd"},{"location":"certbot/intro/#_1","text":"Quote \u6587\u6863\u6e90\uff1a https://eff-certbot.readthedocs.io/en/stable/index.html Note \u8981\u5feb\u901f\u5165\u95e8\uff0c\u8bf7\u4f7f\u7528 \u4ea4\u4e92\u5f0f\u5b89\u88c5\u6307\u5357 \u3002 Certbot \u662f EFF \u4e3a\u6574\u4e2a\u4e92\u8054\u7f51\u52a0\u5bc6\u6240\u505a\u52aa\u529b\u7684\u4e00\u90e8\u5206\u3002 \u7f51\u7edc\u4e0a\u7684\u5b89\u5168\u901a\u4fe1\u4f9d\u8d56\u4e8e HTTPS\uff0c\u5b83\u9700\u8981\u4f7f\u7528\u6570\u5b57\u8bc1\u4e66\uff0c\u8ba9\u6d4f\u89c8\u5668\u9a8c\u8bc1\u7f51\u7edc\u670d\u52a1\u5668\u7684\u8eab\u4efd(\u4f8b\u5982\uff0c\u8fd9\u771f\u7684\u662f google.com \u5417?) Web \u670d\u52a1\u5668\u4ece\u88ab\u79f0\u4e3a\u8bc1\u4e66\u9881\u53d1\u673a\u6784(ca)\u7684\u53d7\u4fe1\u4efb\u7b2c\u4e09\u65b9\u83b7\u53d6\u8bc1\u4e66\u3002 Certbot \u662f\u4e00\u4e2a\u6613\u4e8e\u4f7f\u7528\u7684\u5ba2\u6237\u7aef\uff0c\u5b83\u53ef\u4ee5\u4ece Let\u2019s encrypt(\u4e00\u4e2a\u7531 EFF\u3001Mozilla \u548c\u5176\u4ed6\u673a\u6784\u63a8\u51fa\u7684\u5f00\u653e\u8bc1\u4e66\u9881\u53d1\u673a\u6784)\u83b7\u53d6\u8bc1\u4e66\uff0c\u5e76\u5c06\u5176\u90e8\u7f72\u5230 web \u670d\u52a1\u5668\u4e0a\u3002 \u4efb\u4f55\u7ecf\u5386\u8fc7\u5efa\u7acb\u5b89\u5168\u7f51\u7ad9\u7684\u4eba\u90fd\u77e5\u9053\u83b7\u5f97\u548c\u7ef4\u62a4\u8bc1\u4e66\u6709\u591a\u9ebb\u70e6\u3002 Certbot \u548c Let 's Encrypt \u53ef\u4ee5\u81ea\u52a8\u6d88\u9664\u8fd9\u79cd\u75db\u82e6\uff0c\u8ba9\u60a8\u901a\u8fc7\u7b80\u5355\u7684\u547d\u4ee4\u6253\u5f00\u548c\u7ba1\u7406 HTTPS\u3002 \u4f7f\u7528 Certbot \u548c Let 's Encrypt \u662f\u514d\u8d39\u7684\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u5b89\u6392\u4ed8\u6b3e\u3002 \u4f60\u5982\u4f55\u4f7f\u7528 Certbot \u53d6\u51b3\u4e8e\u4f60\u7684\u7f51\u7edc\u670d\u52a1\u5668\u7684\u914d\u7f6e\u3002\u6700\u597d\u7684\u65b9\u6cd5\u662f\u4f7f\u7528\u6211\u4eec\u7684\u4e92\u52a8\u6307\u5357\u3002 \u5b83\u6839\u636e\u60a8\u7684\u914d\u7f6e\u8bbe\u7f6e\u751f\u6210\u6307\u4ee4\u3002 \u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u60a8\u9700\u8981 root \u6216\u7ba1\u7406\u5458\u8bbf\u95ee\u60a8\u7684 web \u670d\u52a1\u5668\u624d\u80fd\u8fd0\u884c Certbot\u3002 Certbot \u53ef\u4ee5\u76f4\u63a5\u5728\u4f60\u7684\u7f51\u7edc\u670d\u52a1\u5668\u4e0a\u8fd0\u884c\uff0c\u800c\u4e0d\u662f\u5728\u4f60\u7684\u4e2a\u4eba\u7535\u8111\u4e0a\u3002 \u5982\u679c\u60a8\u6b63\u5728\u4f7f\u7528\u6258\u7ba1\u670d\u52a1\uff0c\u5e76\u4e14\u4e0d\u80fd\u76f4\u63a5\u8bbf\u95ee web \u670d\u52a1\u5668\uff0c\u5219\u53ef\u80fd\u65e0\u6cd5\u4f7f\u7528 Certbot\u3002 \u8bf7\u5411\u6258\u7ba1\u63d0\u4f9b\u5546\u67e5\u8be2\u6709\u5173\u4e0a\u4f20\u8bc1\u4e66\u6216\u4f7f\u7528 Let 's Encrypt \u9881\u53d1\u7684\u8bc1\u4e66\u7684\u6587\u6863\u3002 Certbot \u662f Let 's Encrypt CA(\u6216\u4efb\u4f55\u5176\u4ed6\u4f7f\u7528 ACME \u534f\u8bae\u7684 CA)\u7684\u529f\u80fd\u9f50\u5168\u3001\u53ef\u6269\u5c55\u7684\u5ba2\u6237\u7aef\uff0c\u53ef\u4ee5\u81ea\u52a8\u5316\u83b7\u53d6\u8bc1\u4e66\u548c\u914d\u7f6e web \u670d\u52a1\u5668\u4ee5\u4f7f\u7528\u5b83\u4eec\u7684\u4efb\u52a1\u3002 \u8be5\u5ba2\u6237\u7aef\u8fd0\u884c\u5728\u57fa\u4e8e unix \u7684\u64cd\u4f5c\u7cfb\u7edf\u4e0a\u3002 \u8981\u67e5\u770b Certbot \u5728\u4e0d\u540c\u7248\u672c\u4e4b\u95f4\u6240\u505a\u7684\u66f4\u6539\uff0c\u8bf7\u53c2\u9605\u6211\u4eec\u7684\u66f4\u65b0\u65e5\u5fd7\u3002","title":"\u7b80\u4ecb"},{"location":"certbot/intro/#_2","text":"\u5982\u679c\u4f60\u60f3\u4e3a\u8fd9\u4e2a\u9879\u76ee\u505a\u8d21\u732e\uff0c\u8bf7\u9605\u8bfb\u5f00\u53d1\u8005\u6307\u5357\u3002 \u672c\u9879\u76ee\u53d7 EFF \u516c\u5171\u9879\u76ee\u884c\u4e3a\u51c6\u5219\u7684\u7ea6\u675f\u3002","title":"\u8d21\u732e"},{"location":"certbot/intro/#_3","text":"\u5b89\u88c5\u548c\u8fd0\u884c Certbot \u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u8bbf\u95ee \uff0c\u5728\u90a3\u91cc\u60a8\u53ef\u4ee5\u627e\u5230\u8bb8\u591a web \u670d\u52a1\u5668\u548c\u64cd\u4f5c\u7cfb\u7edf\u7ec4\u5408\u7684\u6b63\u786e\u8bf4\u660e\u3002 \u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 Get Certbot \u3002","title":"\u5982\u4f55\u8fd0\u884c\u5ba2\u6237\u7aef"},{"location":"certbot/intro/#_4","text":"\u8981\u8be6\u7ec6\u7406\u89e3\u5ba2\u6237\u7aef\u5728\u505a\u4ec0\u4e48\uff0c\u4e86\u89e3\u5b83\u4f7f\u7528\u63d2\u4ef6\u7684\u65b9\u5f0f\u5f88\u91cd\u8981\u3002 \u8bf7\u53c2\u89c1\u7528\u6237\u6307\u5357\u4e2d\u5bf9 \u63d2\u4ef6\u7684\u8bf4\u660e \u3002","title":"\u66f4\u6df1\u5165\u5730\u4e86\u89e3\u5ba2\u6237"},{"location":"certbot/intro/#_5","text":"\u6587\u6863: https://certbot.eff.org/docs \u8f6f\u4ef6\u9879\u76ee: https://github.com/certbot/certbot \u5f00\u53d1\u4eba\u5458\u6ce8\u610f\u4e8b\u9879: https://certbot.eff.org/docs/contributing.html \u4e3b\u8981\u7684\u7f51\u7ad9: https://certbot.eff.org Let\u2019s Encrypt \u7f51\u7ad9: https://letsencrypt.org \u793e\u533a: https://community.letsencrypt.org ACME spec: RFC 8555 github \u4e2d\u7684 ACME \u5de5\u4f5c\u533a(\u5b58\u6863): https://github.com/ietf-wg-acme/acme","title":"\u94fe\u63a5"},{"location":"certbot/intro/#_6","text":"\u67e5\u770b https://certbot.eff.org/docs/install.html#system-requirements .","title":"\u7cfb\u7edf\u9700\u6c42"},{"location":"certbot/using/","text":"\u7528\u6237\u624b\u518c \u00b6 Certbot \u547d\u4ee4 \u00b6 Certbot \u4f7f\u7528\u8bb8\u591a\u4e0d\u540c\u7684\u547d\u4ee4(\u4e5f\u79f0\u4e3a\u201c\u5b50\u547d\u4ee4\u201d)\u6765\u8bf7\u6c42\u7279\u5b9a\u7684\u64cd\u4f5c\uff0c\u5982\u83b7\u53d6\u3001\u66f4\u65b0\u6216\u64a4\u9500\u8bc1\u4e66\u3002 \u672c\u6587\u6863\u5c06\u8ba8\u8bba\u6700\u91cd\u8981\u548c\u6700\u5e38\u7528\u7684\u547d\u4ee4;\u4e00\u4e2a\u8be6\u5c3d\u7684\u5217\u8868\u4e5f\u51fa\u73b0\u5728\u6587\u6863\u7684\u672b\u5c3e\u3002 \u5982\u679c\u60a8\u7684\u7cfb\u7edf\u4f7f\u7528\u8f83\u65e7\u7684\u5305\uff0cweb \u670d\u52a1\u5668\u4e0a\u7684\u201ccertbot\u201d\u811a\u672c\u53ef\u80fd\u88ab\u547d\u540d\u4e3a\u201cletsencrypt\u201d\u3002 \u5728\u6574\u4e2a\u6587\u6863\u4e2d\uff0c\u65e0\u8bba\u4f55\u65f6\u770b\u5230\u201ccertbot\u201d\uff0c\u8bf7\u6839\u636e\u9700\u8981\u66ff\u6362\u6b63\u786e\u7684\u540d\u79f0\u3002 \u83b7\u5f97\u8bc1\u4e66(\u5e76\u9009\u62e9\u63d2\u4ef6) \u00b6 Certbot \u5e2e\u52a9\u4f60\u5b8c\u6210\u4e24\u4e2a\u4efb\u52a1: \u83b7\u53d6\u8bc1\u4e66:\u81ea\u52a8\u6267\u884c\u6240\u9700\u7684\u8eab\u4efd\u9a8c\u8bc1\u6b65\u9aa4\u4ee5\u8bc1\u660e\u60a8\u63a7\u5236\u4e86\u57df\uff0c\u5c06\u8bc1\u4e66\u4fdd\u5b58\u5230\u201c/etc/letsencrypt/live/\u201d\u5e76\u5b9a\u671f\u66f4\u65b0\u3002 \u53ef\u9009\u5730\uff0c\u5c06\u8be5\u8bc1\u4e66\u5b89\u88c5\u5230\u53d7\u652f\u6301\u7684 web \u670d\u52a1\u5668(\u5982 Apache \u6216 nginx)\u548c\u5176\u4ed6\u7c7b\u578b\u7684\u670d\u52a1\u5668\u3002\u4e3a\u4e86\u4f7f\u7528\u8bc1\u4e66\uff0c\u53ef\u4ee5\u81ea\u52a8\u4fee\u6539\u670d\u52a1\u5668\u7684\u914d\u7f6e\u3002 \u8981\u83b7\u53d6\u8bc1\u4e66\u5e76\u5b89\u88c5\u5b83\uff0c\u8bf7\u4f7f\u7528 certbot run \u547d\u4ee4(\u6216 certbot \uff0c\u4e24\u8005\u662f\u76f8\u540c\u7684)\u3002 \u5982\u679c\u53ea\u83b7\u53d6\u8bc1\u4e66\u800c\u4e0d\u5c06\u5176\u5b89\u88c5\u5230\u4efb\u4f55\u5730\u65b9\uff0c\u53ef\u4ee5\u4f7f\u7528 certbot certonly (\"certificate only\")\u547d\u4ee4\u3002 \u4e00\u4e9b\u4f7f\u7528 Certbot \u7684\u4f8b\u5b50 # \u83b7\u53d6\u5e76\u5b89\u88c5\u8bc1\u4e66: certbot # \u83b7\u53d6\u8bc1\u4e66\u4f46\u4e0d\u5b89\u88c5: certbot certonly # \u60a8\u53ef\u4ee5\u4f7f\u7528-d\u6307\u5b9a\u591a\u4e2a\u57df\uff0c\u5e76\u901a\u8fc7\u591a\u6b21\u8fd0\u884cCertbot\u6765\u83b7\u53d6\u548c\u5b89\u88c5\u4e0d\u540c\u7684\u8bc1\u4e66: certbot certonly -d example.com -d www.example.com certbot certonly -d app.example.com -d api.example.com \u8981\u6267\u884c\u8fd9\u4e9b\u4efb\u52a1\uff0cCertbot \u5c06\u8981\u6c42\u60a8\u4ece\u8eab\u4efd\u9a8c\u8bc1\u5668\u548c\u5b89\u88c5\u7a0b\u5e8f\u63d2\u4ef6\u4e2d\u8fdb\u884c\u9009\u62e9\u3002 \u9002\u5f53\u7684\u63d2\u4ef6\u9009\u62e9\u5c06\u53d6\u51b3\u4e8e\u60a8\u6b63\u5728\u8fd0\u884c\u7684\u670d\u52a1\u5668\u8f6f\u4ef6\u7c7b\u578b\u4ee5\u53ca\u8ba1\u5212\u4f7f\u7528\u8bc1\u4e66\u7684\u670d\u52a1\u5668\u8f6f\u4ef6\u7c7b\u578b\u3002 \u8eab\u4efd\u9a8c\u8bc1\u5668 \u662f\u81ea\u52a8\u6267\u884c\u6240\u9700\u6b65\u9aa4\u4ee5\u8bc1\u660e\u60a8\u63a7\u5236\u4e86\u60a8\u8bd5\u56fe\u8bf7\u6c42\u8bc1\u4e66\u7684\u57df\u540d\u7684\u63d2\u4ef6\u3002\u9a8c\u8bc1\u8005\u603b\u662f\u9700\u8981\u83b7\u5f97\u8bc1\u4e66\u3002 \u5b89\u88c5\u7a0b\u5e8f \u662f\u53ef\u4ee5\u4f7f\u7528 Certbot \u83b7\u5f97\u7684\u8bc1\u4e66\u81ea\u52a8\u4fee\u6539\u60a8\u7684 web \u670d\u52a1\u5668\u914d\u7f6e\u4ee5\u901a\u8fc7 HTTPS \u670d\u52a1\u60a8\u7684\u7f51\u7ad9\u7684\u63d2\u4ef6\u3002 \u53ea\u6709\u5f53\u60a8\u5e0c\u671b Certbot \u5c06\u8bc1\u4e66\u5b89\u88c5\u5230 web \u670d\u52a1\u5668\u65f6\uff0c\u624d\u9700\u8981\u5b89\u88c5\u7a0b\u5e8f\u3002 \u6709\u4e9b\u63d2\u4ef6\u540c\u65f6\u662f\u9a8c\u8bc1\u5668\u548c\u5b89\u88c5\u5668\uff0c\u53ef\u4ee5\u6307\u5b9a\u9a8c\u8bc1\u5668\u548c\u63d2\u4ef6\u7684\u4e0d\u540c \u7ec4\u5408 \u3002 \u63d2\u4ef6 Auth Inst \u89e3\u91ca \u6311\u6218\u7c7b\u578b(\u548c\u7aef\u53e3) apache Y Y \u4f7f\u7528 Apache \u81ea\u52a8\u83b7\u53d6\u548c\u5b89\u88c5\u8bc1\u4e66\u3002 http-01 (80) nginx Y Y \u4f7f\u7528 Nginx \u81ea\u52a8\u83b7\u53d6\u548c\u5b89\u88c5\u8bc1\u4e66\u3002 http-01 (80) webroot Y N \u901a\u8fc7\u5199\u5165\u5df2\u7ecf\u8fd0\u884c\u7684 web \u670d\u52a1\u5668\u7684 webroot \u76ee\u5f55\u6765\u83b7\u53d6\u8bc1\u4e66\u3002 http-01 (80) standalone Y N \u4f7f\u7528\"standalone\" web \u670d\u52a1\u5668\u83b7\u53d6\u8bc1\u4e66\u3002\u8981\u6c42\u7aef\u53e3 80 \u53ef\u7528\u3002\u8fd9\u5728\u6ca1\u6709 web \u670d\u52a1\u5668\u7684\u7cfb\u7edf\u4e2d\u5f88\u6709\u7528\uff0c\u6216\u8005\u5728\u4e0d\u652f\u6301\u6216\u4e0d\u9700\u8981\u76f4\u63a5\u4e0e\u672c\u5730 web \u670d\u52a1\u5668\u96c6\u6210\u7684\u60c5\u51b5\u4e0b\u5f88\u6709\u7528\u3002 http-01 (80) dns plugs Y N \u8fd9\u7c7b\u63d2\u4ef6\u901a\u8fc7\u4fee\u6539 DNS \u8bb0\u5f55\u6765\u81ea\u52a8\u83b7\u53d6\u8bc1\u4e66\uff0c\u4ee5\u8bc1\u660e\u60a8\u62e5\u6709\u5bf9\u57df\u7684\u63a7\u5236\u6743\u3002\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u8fdb\u884c\u57df\u9a8c\u8bc1\u662f\u4ece Let's Encrypt \u83b7\u5f97\u901a\u914d\u7b26\u8bc1\u4e66\u7684\u552f\u4e00\u65b9\u6cd5\u3002 dns-01 (53) manual Y N \u6839\u636e\u8bf4\u660e\u624b\u52a8\u83b7\u53d6\u8bc1\u4e66\uff0c\u81ea\u884c\u6267\u884c\u57df\u9a8c\u8bc1\u3002\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u521b\u5efa\u7684\u8bc1\u4e66\u4e0d\u652f\u6301\u81ea\u52a8\u66f4\u65b0\u3002\u81ea\u52a8\u66f4\u65b0\u53ef\u4ee5\u901a\u8fc7\u63d0\u4f9b\u4e00\u4e2a\u8eab\u4efd\u9a8c\u8bc1\u94a9\u5b50\u811a\u672c\u6765\u5b9e\u73b0\u57df\u9a8c\u8bc1\u6b65\u9aa4\u7684\u81ea\u52a8\u5316\u3002 http-01 (80) or dns-01 (53) \u5728\u5e95\u5c42\uff0c\u63d2\u4ef6\u4f7f\u7528\u51e0\u4e2a ACME \u534f\u8bae\u6311\u6218\u4e4b\u4e00\u6765\u8bc1\u660e\u60a8\u63a7\u5236\u4e86\u4e00\u4e2a\u57df\u540d\u3002 \u9009\u9879\u662f http-01 (\u4f7f\u7528\u7aef\u53e3 80)\u548c dns-01 (\u9700\u8981\u5728\u7aef\u53e3 53 \u4e0a\u914d\u7f6e DNS \u670d\u52a1\u5668\uff0c\u5c3d\u7ba1\u8fd9\u901a\u5e38\u4e0d\u662f\u60a8\u7684 web \u670d\u52a1\u5668\u7684\u540c\u4e00\u53f0\u673a\u5668)\u3002 \u4e00\u4e9b\u63d2\u4ef6\u652f\u6301\u591a\u79cd\u6311\u6218\u7c7b\u578b\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2a\u5e26\u6709 --preferred-challenges \u7684\u3002 \u8fd8\u6709\u8bb8\u591a \u7b2c\u4e09\u65b9\u63d2\u4ef6 \u53ef\u7528\u3002 \u4e0b\u9762\u6211\u4eec\u5c06\u66f4\u8be6\u7ec6\u5730\u63cf\u8ff0\u6bcf\u4e2a\u63d2\u4ef6\u53ef\u4ee5\u4f7f\u7528\u7684\u60c5\u51b5\uff0c\u4ee5\u53ca\u5982\u4f55\u4f7f\u7528\u5b83\u3002 Apache \u00b6 Apache \u63d2\u4ef6\u76ee\u524d \u652f\u6301 \u57fa\u4e8e Debian\u3001Fedora\u3001SUSE\u3001Gentoo\u3001CentOS \u548c Darwin \u7684\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u3002 \u8fd9\u5c06\u81ea\u52a8\u5728 Apache web \u670d\u52a1\u5668\u4e0a\u83b7\u53d6\u548c\u5b89\u88c5\u8bc1\u4e66\u3002 \u8981\u5728\u547d\u4ee4\u884c\u4e0a\u6307\u5b9a\u8fd9\u4e2a\u63d2\u4ef6\uff0c\u53ea\u9700\u5305\u542b --apache \u3002 Webroot \u00b6 \u5982\u679c\u4f60\u6b63\u5728\u8fd0\u884c\u4e00\u4e2a\u672c\u5730 web \u670d\u52a1\u5668\uff0c\u4f60\u6709\u80fd\u529b\u4fee\u6539\u6240\u670d\u52a1\u7684\u5185\u5bb9\uff0c\u5e76\u4e14\u4f60\u4e0d\u5e0c\u671b\u5728\u8bc1\u4e66\u9881\u53d1\u8fc7\u7a0b\u4e2d\u505c\u6b62 web \u670d\u52a1\u5668\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 webroot \u63d2\u4ef6\u901a\u8fc7\u5728\u547d\u4ee4\u884c\u4e2d\u5305\u542b certonly \u548c --webroot \u6765\u83b7\u53d6\u8bc1\u4e66\u3002 \u6b64\u5916\uff0c\u4f60\u9700\u8981\u6307\u5b9a --webroot-path \u6216 -w \u4e0e\u9876\u7ea7\u76ee\u5f55( web root )\uff0c\u5176\u4e2d\u5305\u542b\u4f60\u7684 web \u670d\u52a1\u5668\u63d0\u4f9b\u7684\u6587\u4ef6\u3002 \u4f8b\u5982\uff0c --webroot-path /var/www/html \u6216 --webroot-path /usr/share/nginx/html \u662f\u4e24\u79cd\u5e38\u89c1\u7684 webroot \u8def\u5f84\u3002 \u5982\u679c\u60a8\u8981\u540c\u65f6\u83b7\u5f97\u591a\u4e2a\u57df\u7684\u8bc1\u4e66\uff0c\u63d2\u4ef6\u9700\u8981\u77e5\u9053\u6bcf\u4e2a\u57df\u7684\u6587\u4ef6\u662f\u4ece\u54ea\u91cc\u63d0\u4f9b\u7684\uff0c\u8fd9\u53ef\u80fd\u662f\u6bcf\u4e2a\u57df\u7684\u5355\u72ec\u76ee\u5f55\u3002 \u5f53\u4e3a\u591a\u4e2a\u57df\u8bf7\u6c42\u8bc1\u4e66\u65f6\uff0c\u6bcf\u4e2a\u57df\u5c06\u4f7f\u7528\u6700\u8fd1\u6307\u5b9a\u7684 --webroot-path \u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c certbot certonly --webroot -w /var/www/example -d www.example.com -d example.com -w /var/www/other -d other.example.net -d another.other.example.net \u5c06\u4e3a\u6240\u6709\u8fd9\u4e9b\u540d\u79f0\u83b7\u5f97\u4e00\u4e2a\u8bc1\u4e66\uff0c\u524d\u4e24\u4e2a\u4f7f\u7528 /var/www/example webroot \u76ee\u5f55\uff0c\u540e\u4e24\u4e2a\u4f7f\u7528 /var/www/other \u3002 webroot \u63d2\u4ef6\u7684\u5de5\u4f5c\u65b9\u5f0f\u662f\u5728 ${webroot-path}/.well-known/acme-challenge \u4e2d\u4e3a\u6bcf\u4e2a\u8bf7\u6c42\u7684\u57df\u521b\u5efa\u4e00\u4e2a\u4e34\u65f6\u6587\u4ef6\u3002 \u7136\u540e Let's Encrypt \u9a8c\u8bc1\u670d\u52a1\u5668\u53d1\u51fa HTTP \u8bf7\u6c42\uff0c\u4ee5\u9a8c\u8bc1\u6bcf\u4e2a\u8bf7\u6c42\u57df\u7684 DNS \u89e3\u6790\u5230\u8fd0\u884c certbot \u7684\u670d\u52a1\u5668\u3002 \u5411 web \u670d\u52a1\u5668\u53d1\u51fa\u7684\u8bf7\u6c42\u793a\u4f8b\u5982\u4e0b: 66.133.109.36 - - [05/Jan/2016:20:11:24 -0500] \"GET /.well-known/acme-challenge/HGr8U1IeTW4kY_Z6UIyaakzOkyQgPr_7ArlLgtZE8SX HTTP/1.1\" 200 87 \"-\" \"Mozilla/5.0 (compatible; Let's Encrypt validation server; +https://www.letsencrypt.org)\" \u8bf7\u6ce8\u610f\uff0c\u8981\u4f7f\u7528 webroot \u63d2\u4ef6\uff0c\u60a8\u7684\u670d\u52a1\u5668\u5fc5\u987b\u914d\u7f6e\u4e3a\u63d0\u4f9b\u9690\u85cf\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u3002 \u5982\u679c\u4f60\u7684 webserver \u914d\u7f6e\u5bf9 /.well-known \u8fdb\u884c\u4e86\u7279\u6b8a\u5904\u7406\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u4fee\u6539\u914d\u7f6e\uff0c\u4ee5\u786e\u4fdd /.well-known/acme-challenge \u4e2d\u7684\u6587\u4ef6\u7531 webserver \u63d0\u4f9b\u3002 \u5728 Windows \u4e0b\uff0cCertbot \u5c06\u5728 /.well-known/acme-challenge \u4e2d\u751f\u6210\u4e00\u4e2a web.config \u6587\u4ef6\uff0c\u4ee5\u4fbf\u8ba9 IIS \u670d\u52a1\u6311\u6218\u6587\u4ef6\uff0c\u5373\u4f7f\u5b83\u4eec\u6ca1\u6709\u6269\u5c55\u540d\u3002 Nginx \u00b6 Nginx \u63d2\u4ef6\u5e94\u8be5\u9002\u7528\u4e8e\u5927\u591a\u6570\u914d\u7f6e\u3002 \u6211\u4eec\u5efa\u8bae\u5728\u4f7f\u7528 Nginx \u4e4b\u524d\u5907\u4efd\u5b83\u7684\u914d\u7f6e(\u5c3d\u7ba1\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 certbot --nginx rollback \u5c06\u66f4\u6539\u6062\u590d\u5230\u914d\u7f6e)\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u547d\u4ee4\u884c\u4e0a\u63d0\u4f9b --nginx \u6807\u5fd7\u6765\u4f7f\u7528\u5b83\u3002 certbot --nginx Standalone \u00b6 \u5982\u679c\u4e0d\u60f3\u4f7f\u7528(\u6216\u76ee\u524d\u6ca1\u6709)\u73b0\u6709\u670d\u52a1\u5668\u8f6f\u4ef6\uff0c\u8bf7\u4f7f\u7528\u72ec\u7acb\u6a21\u5f0f\u83b7\u53d6\u8bc1\u4e66\u3002 \u72ec\u7acb\u63d2\u4ef6\u4e0d\u4f9d\u8d56\u4e8e\u5728\u60a8\u83b7\u53d6\u8bc1\u4e66\u7684\u673a\u5668\u4e0a\u8fd0\u884c\u7684\u4efb\u4f55\u5176\u4ed6\u670d\u52a1\u5668\u8f6f\u4ef6\u3002 \u8981\u4f7f\u7528\u201c\u72ec\u7acb\u201dweb \u670d\u52a1\u5668\u83b7\u53d6\u8bc1\u4e66\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u5728\u547d\u4ee4\u884c\u4e2d\u5305\u542b certonly \u548c \u2014\u2014standalone \u6765\u4f7f\u7528\u72ec\u7acb\u63d2\u4ef6\u3002 \u8fd9\u4e2a\u63d2\u4ef6\u9700\u8981\u7ed1\u5b9a\u5230\u7aef\u53e3 80 \u6765\u6267\u884c\u57df\u9a8c\u8bc1\uff0c\u6240\u4ee5\u4f60\u53ef\u80fd\u9700\u8981\u505c\u6b62\u4f60\u73b0\u6709\u7684 web \u670d\u52a1\u5668\u3002 \u60a8\u7684\u673a\u5668\u5fc5\u987b\u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528\u6bcf\u4e2a\u8bf7\u6c42\u7684\u57df\u540d\u5728\u6307\u5b9a\u7aef\u53e3\u4e0a\u63a5\u53d7\u6765\u81ea Internet \u7684\u5165\u7ad9\u8fde\u63a5\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cCertbot \u9996\u5148\u5c1d\u8bd5\u4f7f\u7528 IPv6 \u7ed1\u5b9a\u5230\u6240\u6709\u63a5\u53e3\u7684\u7aef\u53e3\uff0c\u7136\u540e\u4f7f\u7528 IPv4 \u7ed1\u5b9a\u5230\u8be5\u7aef\u53e3;\u53ea\u8981\u81f3\u5c11\u6709\u4e00\u4e2a\u7ed1\u5b9a\u6210\u529f\uff0cCertbot \u5c31\u4f1a\u7ee7\u7eed\u3002\u5728\u5927\u591a\u6570 Linux \u7cfb\u7edf\u4e0a\uff0cIPv4 \u6d41\u91cf\u5c06\u88ab\u8def\u7531\u5230\u7ed1\u5b9a\u7684 IPv6 \u7aef\u53e3\uff0c\u5728\u7b2c\u4e8c\u6b21\u7ed1\u5b9a\u671f\u95f4\u5931\u8d25\u662f\u610f\u6599\u4e4b\u4e2d\u7684\u3002 \u4f7f\u7528 --<challenge-type>-address \u663e\u5f0f\u544a\u8bc9 Certbot \u7ed1\u5b9a\u54ea\u4e2a\u63a5\u53e3(\u548c\u534f\u8bae)\u3002 DNS \u63d2\u4ef6 \u00b6 \u5982\u679c\u4f60\u60f3\u4ece Let's Encrypt \u83b7\u5f97\u4e00\u4e2a\u901a\u914d\u7b26\u8bc1\u4e66\uff0c\u6216\u8005\u5728\u76ee\u6807\u670d\u52a1\u5668\u4ee5\u5916\u7684\u673a\u5668\u4e0a\u8fd0\u884c\u201ccertbot\u201d\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 certbot \u7684 DNS \u63d2\u4ef6\u4e4b\u4e00\u3002 \u8fd9\u4e9b\u63d2\u4ef6\u4e0d\u5305\u542b\u5728\u9ed8\u8ba4\u7684 Certbot \u5b89\u88c5\u4e2d\uff0c\u5fc5\u987b\u5355\u72ec\u5b89\u88c5\u3002 \u5b83\u4eec\u53ef\u4ee5\u4f5c\u4e3a Docker \u6620\u50cf\u548c\u5feb\u7167\u5728\u8bb8\u591a OS \u5305\u7ba1\u7406\u5668\u4e2d\u4f7f\u7528\u3002 \u8bbf\u95ee https://certbot.eff.org \u4e86\u89e3\u5728\u60a8\u7684\u7cfb\u7edf\u4e0a\u4f7f\u7528 DNS \u63d2\u4ef6\u7684\u6700\u4f73\u65b9\u6cd5\u3002 \u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u4f60\u53ef\u4ee5\u5728\u4ee5\u4e0b\u5730\u5740\u627e\u5230\u5982\u4f55\u4f7f\u7528\u6bcf\u4e2a\u63d2\u4ef6\u7684\u6587\u6863: certbot-dns-cloudflare certbot-dns-digitalocean certbot-dns-dnsimple certbot-dns-dnsmadeeasy certbot-dns-gehirn certbot-dns-google certbot-dns-linode certbot-dns-luadns certbot-dns-nsone certbot-dns-ovh certbot-dns-rfc2136 certbot-dns-route53 certbot-dns-sakuracloud \u624b\u52a8 \u00b6 \u5982\u679c\u4f60\u60f3\u5728\u76ee\u6807\u670d\u52a1\u5668\u4ee5\u5916\u7684\u673a\u5668\u4e0a\u83b7\u5f97\u8fd0\u884c certbot \u7684\u8bc1\u4e66\uff0c\u6216\u8005\u81ea\u5df1\u6267\u884c\u57df\u9a8c\u8bc1\u7684\u6b65\u9aa4\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u624b\u52a8\u63d2\u4ef6\u3002 \u867d\u7136\u9690\u85cf\u5728 UI \u4e2d\uff0c\u4f46\u60a8\u53ef\u4ee5\u4f7f\u7528\u63d2\u4ef6\u901a\u8fc7\u5728\u547d\u4ee4\u884c\u4e0a\u6307\u5b9a certonly \u548c --manual \u6765\u83b7\u53d6\u8bc1\u4e66\u3002 \u8fd9\u8981\u6c42\u60a8\u5c06\u547d\u4ee4\u590d\u5236\u5e76\u7c98\u8d34\u5230\u53e6\u4e00\u4e2a\u7ec8\u7aef\u4f1a\u8bdd\u4e2d\uff0c\u8be5\u4f1a\u8bdd\u53ef\u80fd\u4f4d\u4e8e\u4e0d\u540c\u7684\u8ba1\u7b97\u673a\u4e0a\u3002 \u624b\u52a8\u63d2\u4ef6\u53ef\u4ee5\u4f7f\u7528 http \u6216 dns \u6311\u6218\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528 --preferred-challenges \u9009\u9879\u6765\u9009\u62e9\u60a8\u559c\u6b22\u7684\u6311\u6218\u3002 http \u6311\u6218\u5c06\u8981\u6c42\u60a8\u5c06\u5177\u6709\u7279\u5b9a\u540d\u79f0\u548c\u7279\u5b9a\u5185\u5bb9\u7684\u6587\u4ef6\u76f4\u63a5\u653e\u7f6e\u5728\u9876\u7ea7\u76ee\u5f55( web root )\u7684\u76ee\u5f55\u4e2d\uff0c\u8be5\u76ee\u5f55\u5305\u542b\u60a8\u7684 web \u670d\u52a1\u5668\u63d0\u4f9b\u7684\u6587\u4ef6\u3002 \u672c\u8d28\u4e0a\u5b83\u548c webroot \u63d2\u4ef6\u662f\u4e00\u6837\u7684\uff0c\u4f46\u4e0d\u662f\u81ea\u52a8\u5316\u7684\u3002 \u5f53\u4f7f\u7528 dns \u6311\u6218\u65f6\uff0c certbot \u4f1a\u8981\u6c42\u4f60\u5728\u57df\u540d\u4e0b\u653e\u7f6e\u4e00\u4e2a\u5305\u542b\u7279\u5b9a\u5185\u5bb9\u7684 TXT DNS \u8bb0\u5f55\uff0c\u8be5\u8bb0\u5f55\u7531\u4f60\u60f3\u8981\u9881\u53d1\u8bc1\u4e66\u7684\u4e3b\u673a\u540d\u7ec4\u6210\uff0c\u4ee5 _acme-challenge \u4e3a\u524d\u7f00\u3002 \u5bf9\u4e8e\u57df\u540d example.com \uff0c\u533a\u57df\u6587\u4ef6\u6761\u76ee\u770b\u8d77\u6765\u662f\u8fd9\u6837\u7684 _acme-challenge.example.com. 300 IN TXT \"gfj9Xq...Rg85nM\" \u4f7f\u7528\u624b\u52a8\u63d2\u4ef6\u66f4\u65b0 \u4f7f\u7528 --manual \u521b\u5efa\u7684\u8bc1\u4e66 \u4e0d \u652f\u6301\u81ea\u52a8\u66f4\u65b0\uff0c\u9664\u975e\u901a\u8fc7 --manual-auth-hook \u4e0e \u8ba4\u8bc1\u94a9\u5b50\u811a\u672c \u7ed3\u5408\u4f7f\u7528\uff0c\u4ee5\u81ea\u52a8\u8bbe\u7f6e\u6240\u9700\u7684 HTTP \u548c/\u6216 TXT \u6311\u6218\u3002 \u5982\u679c\u60a8\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u652f\u6301\u81ea\u52a8\u66f4\u65b0\u7684 \u63d2\u4ef6 \u6765\u521b\u5efa\u8bc1\u4e66\uff0c\u5f3a\u70c8\u5efa\u8bae\u60a8\u8fd9\u6837\u505a\u3002 \u5982\u679c\u8981\u624b\u52a8\u66f4\u65b0\u4e0d\u5e26\u94a9\u5b50\u7684 --manual \u8bc1\u4e66\uff0c\u8bf7\u91cd\u590d\u6700\u521d\u521b\u5efa\u8bc1\u4e66\u65f6\u4f7f\u7528\u7684 certbot --manual \u547d\u4ee4\u3002 \u7531\u4e8e\u8fd9\u9700\u8981\u590d\u5236\u548c\u7c98\u8d34\u65b0\u7684 HTTP \u6587\u4ef6\u6216 DNS TXT \u8bb0\u5f55\uff0c\u56e0\u6b64 cron \u4f5c\u4e1a\u4e0d\u80fd\u81ea\u52a8\u6267\u884c\u8be5\u547d\u4ee4\u3002 \u7ec4\u5408\u63d2\u4ef6 \u00b6 \u6709\u65f6\u60a8\u53ef\u80fd\u5e0c\u671b\u6307\u5b9a\u4e0d\u540c\u7684\u9a8c\u8bc1\u7a0b\u5e8f\u548c\u5b89\u88c5\u7a0b\u5e8f\u63d2\u4ef6\u7684\u7ec4\u5408\u3002 \u4e3a\u6b64\uff0c\u4f7f\u7528 --authenticator \u6216 -a \u6307\u5b9a\u9a8c\u8bc1\u7a0b\u5e8f\u63d2\u4ef6\uff0c\u4f7f\u7528 --installer \u6216 -i \u6307\u5b9a\u5b89\u88c5\u7a0b\u5e8f\u63d2\u4ef6\u3002 \u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 webroot \u63d2\u4ef6\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\uff0c\u4f7f\u7528 apache \u63d2\u4ef6\u8fdb\u884c\u5b89\u88c5\u6765\u521b\u5efa\u8bc1\u4e66\u3002 certbot run -a webroot -i apache -w /var/www/html -d example.com \u6216\u8005\u4f60\u53ef\u4ee5\u4f7f\u7528\u624b\u52a8\u63d2\u4ef6\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\uff0c\u4f7f\u7528 nginx \u63d2\u4ef6\u8fdb\u884c\u5b89\u88c5\u6765\u521b\u5efa\u8bc1\u4e66\u3002(\u6ce8\u610f\u6b64\u8bc1\u4e66\u4e0d\u80fd\u81ea\u52a8\u66f4\u65b0\u3002) certbot run -a manual -i nginx -d example.com \u7b2c\u4e09\u65b9\u63d2\u4ef6 \u00b6 \u8fd8\u6709\u8bb8\u591a\u7b2c\u4e09\u65b9\u63d2\u4ef6\uff0c\u7531\u5176\u4ed6\u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u3002\u8bb8\u591a\u662f\u6d4b\u8bd5\u7248/\u8bd5\u9a8c\u6027\u7684\uff0c\u4f46\u6709\u4e9b\u5df2\u7ecf\u88ab\u5e7f\u6cdb\u4f7f\u7528: Plugin Auth Inst Notes haproxy Y Y Integration with the HAProxy load balancer s3front Y Y Integration with Amazon CloudFront distribution of S3 buckets gandi Y N Obtain certificates via the Gandi LiveDNS API varnish Y N Obtain certificates via a Varnish server external-auth Y Y A plugin for convenient scripting pritunl N Y Install certificates in pritunl distributed OpenVPN servers proxmox N Y Install certificates in Proxmox Virtualization servers dns-standalone Y N Obtain certificates via an integrated DNS server dns-ispconfig Y N DNS Authentication using ISPConfig as DNS server dns-clouddns Y N DNS Authentication using CloudDNS API dns-lightsail Y N DNS Authentication using Amazon Lightsail DNS API dns-inwx Y Y DNS Authentication for INWX through the XML API dns-azure Y N DNS Authentication using Azure DNS dns-godaddy Y N DNS Authentication using Godaddy DNS dns-yandexcloud Y N DNS Authentication using Yandex Cloud DNS dns-bunny Y N DNS Authentication using BunnyDNS njalla Y N DNS Authentication for njalla DuckDNS Y N DNS Authentication for DuckDNS Porkbun Y N DNS Authentication for Porkbun Infomaniak Y N DNS Authentication using Infomaniak Domains API dns-multi Y N DNS authentication of 100+ providers using go-acme/lego \u5982\u679c\u4f60\u611f\u5174\u8da3\uff0c\u4f60\u4e5f\u53ef\u4ee5 \u7f16\u5199\u81ea\u5df1\u7684\u63d2\u4ef6 . \u7ba1\u7406\u8bc1\u4e66 \u00b6 \u8981\u67e5\u770b Certbot \u77e5\u9053\u7684\u8bc1\u4e66\u5217\u8868\uff0c\u8fd0\u884c certificates \u5b50\u547d\u4ee4: certbot certificates \u8fd9\u5c06\u4ee5\u4ee5\u4e0b\u683c\u5f0f\u8fd4\u56de\u4fe1\u606f Found the following certificates: Certificate Name: example.com Domains: example.com, www.example.com Expiry Date: 2017-02-19 19:53:00+00:00 (VALID: 30 days) Certificate Path: /etc/letsencrypt/live/example.com/fullchain.pem Key Type: RSA Private Key Path: /etc/letsencrypt/live/example.com/privkey.pem Certificate Name \u663e\u793a\u8bc1\u4e66\u7684\u540d\u79f0\u3002 \u4f7f\u7528 --cert-name \u6807\u5fd7\u4f20\u9012\u8be5\u540d\u79f0\uff0c\u4e3a run , certonly , certificates , renew , \u548c delete \u547d\u4ee4\u6307\u5b9a\u4e00\u4e2a\u7279\u5b9a\u7684\u8bc1\u4e66\u3002 Example certbot certonly --cert-name example.com \u91cd\u65b0\u521b\u5efa\u548c\u66f4\u65b0\u5df2\u6709\u8bc1\u4e66 \u00b6 You can use certonly or run subcommands to request the creation of a single new certificate even if you already have an existing certificate with some of the same domain names. If a certificate is requested with run or certonly specifying a certificate name that already exists, Certbot updates the existing certificate. Otherwise a new certificate is created and assigned the specified name. The --force-renewal , --duplicate , and --expand options control Certbot's behavior when re-creating a certificate with the same name as an existing certificate. If you don't specify a requested behavior, Certbot may ask you what you intended. --force-renewal tells Certbot to request a new certificate with the same domains as an existing certificate. Each domain must be explicitly specified via -d . If successful, this certificate is saved alongside the earlier one and symbolic links (the \" live \" reference) will be updated to point to the new certificate. This is a valid method of renewing a specific individual certificate. --duplicate tells Certbot to create a separate, unrelated certificate with the same domains as an existing certificate. This certificate is saved completely separately from the prior one. Most users will not need to issue this command in normal circumstances. --expand tells Certbot to update an existing certificate with a new certificate that contains all of the old domains and one or more additional new domains. With the --expand option, use the -d option to specify all existing domains and one or more new domains. Example: certbot --expand -d existing.com,example.com,newdomain.com If you prefer, you can specify the domains individually like this: certbot --expand -d existing.com -d example.com -d newdomain.com Consider using --cert-name instead of --expand , as it gives more control over which certificate is modified and it lets you remove domains as well as adding them. --allow-subset-of-names tells Certbot to continue with certificate generation if only some of the specified domain authorizations can be obtained. This may be useful if some domains specified in a certificate no longer point at this system. Whenever you obtain a new certificate in any of these ways, the new certificate exists alongside any previously obtained certificates, whether or not the previous certificates have expired. The generation of a new certificate counts against several rate limits that are intended to prevent abuse of the ACME protocol, as described here . \u66f4\u6539\u8bc1\u4e66\u7684\u57df \u00b6 The --cert-name flag can also be used to modify the domains a certificate contains, by specifying new domains using the -d or --domains flag. If certificate example.com previously contained example.com and www.example.com , it can be modified to only contain example.com by specifying only example.com with the -d or --domains flag. Example:: certbot certonly --cert-name example.com -d example.com The same format can be used to expand the set of domains a certificate contains, or to replace that set entirely:: certbot certonly --cert-name example.com -d example.org,www.example.org RSA \u548c ECDSA \u94a5\u5319 \u00b6 Certbot \u652f\u6301\u4e24\u79cd\u8bc1\u4e66\u79c1\u94a5\u7b97\u6cd5: rsa \u548c ecdsa \u3002 \u4ece\u7248\u672c 2.0.0 \u5f00\u59cb\uff0cCertbot \u5bf9\u6240\u6709\u65b0\u8bc1\u4e66\u9ed8\u8ba4\u4f7f\u7528 ECDSA secp256r1 (P-256)\u8bc1\u4e66\u79c1\u94a5\u3002 \u73b0\u6709\u8bc1\u4e66\u5c06\u7ee7\u7eed\u4f7f\u7528\u5176\u73b0\u6709\u5bc6\u94a5\u7c7b\u578b\u8fdb\u884c\u66f4\u65b0\uff0c\u9664\u975e\u8bf7\u6c42\u66f4\u6539\u5bc6\u94a5\u7c7b\u578b\u3002 Certbot \u4f7f\u7528\u7684\u5bc6\u94a5\u7c7b\u578b\u53ef\u4ee5\u901a\u8fc7 --key-type \u9009\u9879\u6765\u63a7\u5236\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528 --elliptic-curve \u9009\u9879\u6765\u63a7\u5236 ECDSA \u8bc1\u4e66\u4e2d\u4f7f\u7528\u7684\u66f2\u7ebf\uff0c\u4f7f\u7528 --rsa-key-size \u9009\u9879\u6765\u63a7\u5236 RSA \u5bc6\u94a5\u7684\u5927\u5c0f\u3002 Warning \u5982\u679c\u4f7f\u7528ECDSA\u5bc6\u94a5\u83b7\u53d6\u8bc1\u4e66\uff0c\u5e94\u6ce8\u610f\u4e0d\u8981\u964d\u7ea7\u5230\u4e0d\u652f\u6301ECDSA\u5bc6\u94a5\u76841.10.0\u4e4b\u524d\u7684Certbot\u7248\u672c\u3002 \u5982\u679c\u4f60\u4ecesnap\u6216pip\u4e4b\u7c7b\u7684\u8f6f\u4ef6\u5305\u5207\u6362\u5230\u901a\u5e38\u6ede\u540e\u7684\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u7684\u8f6f\u4ef6\u5305\uff0c\u5c31\u6709\u53ef\u80fd\u51fa\u73b0\u8fd9\u6837\u7684\u964d\u7ea7\u3002 \u66f4\u6539\u8bc1\u4e66\u7684\u5bc6\u94a5\u7c7b\u578b \u00b6 \u5982\u679c\u60a8\u60f3\u66f4\u6539\u5355\u4e2a\u8bc1\u4e66\u4ee5\u4f7f\u7528 ECDSA \u5bc6\u94a5\uff0c\u60a8\u9700\u8981\u5728\u547d\u4ee4\u884c\u4e0a\u8bbe\u7f6e --key-type ecdsa \u65f6\u521b\u5efa\u6216\u66f4\u65b0\u8bc1\u4e66: certbot renew --key-type ecdsa --cert-name example.com --force-renewal \u5982\u679c\u60a8\u5e0c\u671b\u5c06\u6765\u5bf9\u6240\u6709\u8bc1\u4e66\u4f7f\u7528 ECDSA \u5bc6\u94a5(\u5305\u62ec\u73b0\u6709\u8bc1\u4e66\u7684\u66f4\u65b0)\uff0c\u53ef\u4ee5\u5728 Certbot \u7684[\u914d\u7f6e\u6587\u4ef6][config-file]\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u884c key-type = ecdsa \u8be5\u6761\u4f8b\u5c06\u4e8e\u6bcf\u6b21\u8bc1\u4e66\u7eed\u671f\u65f6\u751f\u6548\u3002 \u64a4\u9500\u8bc1\u4e66 \u00b6 \u5982\u679c\u60a8\u9700\u8981\u64a4\u9500\u8bc1\u4e66\uff0c\u8bf7\u4f7f\u7528 revoke \u5b50\u547d\u4ee4\u6765\u6267\u884c\u3002 \u8bc1\u4e66\u53ef\u4ee5\u901a\u8fc7\u63d0\u4f9b\u5176\u540d\u79f0(\u53c2\u89c1 certbot certificates )\u6216\u76f4\u63a5\u63d0\u4f9b\u5176\u8def\u5f84\u6765\u64a4\u9500 certbot revoke --cert-name example.com certbot revoke --cert-path /etc/letsencrypt/live/example.com/cert.pem \u5982\u679c\u88ab\u64a4\u9500\u7684\u8bc1\u4e66\u662f\u901a\u8fc7 --staging , --test-cert \u6216\u975e\u9ed8\u8ba4\u7684 --server \u6807\u5fd7\u83b7\u5f97\u7684\uff0c\u5219\u8be5\u6807\u5fd7\u5fc5\u987b\u4f20\u9012\u7ed9 revoke \u5b50\u547d\u4ee4\u3002 Note \u5728\u64a4\u9500\u8bc1\u4e66\u540e\uff0cCertbot\u5c06(\u9ed8\u8ba4\u60c5\u51b5\u4e0b)\u8be2\u95ee\u60a8\u662f\u5426\u8981 \u5220\u9664 \u8bc1\u4e66\u3002 \u9664\u975e\u5220\u9664\uff0c\u5426\u5219Certbot\u5c06\u5728 certbot renew \u4e0b\u6b21\u8fd0\u884c\u65f6\u5c1d\u8bd5\u66f4\u65b0\u5df2\u64a4\u9500\u7684\u8bc1\u4e66\u3002 You can also specify the reason for revoking your certificate by using the reason flag. Reasons include unspecified which is the default, as well as keycompromise , affiliationchanged , superseded , and cessationofoperation certbot revoke --cert-name example.com --reason keycompromise Revoking by account key or certificate private key By default, Certbot will try revoke the certificate using your ACME account key. If the certificate was created from the same ACME account, the revocation will be successful. If you instead have the corresponding private key file to the certificate you wish to revoke, use --key-path to perform the revocation from any ACME account certbot revoke --cert-path /etc/letsencrypt/live/example.com/cert.pem --key-path /etc/letsencrypt/live/example.com/privkey.pem \u5220\u9664\u8bc1\u4e66 \u00b6 \u5982\u679c\u60a8\u9700\u8981\u5220\u9664\u8bc1\u4e66\uff0c\u8bf7\u4f7f\u7528 delete \u5b50\u547d\u4ee4\u3002 Note \u8bf7\u4ed4\u7ec6\u9605\u8bfb\u672c\u6587\u548c \u5b89\u5168\u5220\u9664\u8bc1\u4e66 \u90e8\u5206\u3002\u8fd9\u662f\u4e00\u4e2a\u4e0d\u53ef\u9006\u7684\u624b\u672f\uff0c\u5fc5\u987b\u5c0f\u5fc3\u64cd\u4f5c\u3002 Certbot does not automatically revoke a certificate before deleting it. If you're no longer using a certificate and don't plan to use it anywhere else, you may want to follow the instructions in Revoking certificates _ instead. Generally, there's no need to revoke a certificate if its private key has not been compromised, but you may still receive expiration emails from Let's Encrypt unless you revoke. Note Do not manually delete certificate files from inside /etc/letsencrypt/ . Always use the delete subcommand. A certificate may be deleted by providing its name with --cert-name . You may find its name using certbot certificates . Otherwise, you will be prompted to choose one or more certificates to delete certbot delete --cert-name example.com ## or to choose from a list: certbot delete Safely deleting certificates \u00b6 Deleting a certificate without following the proper steps can result in a non-functioning server. To safely delete a certificate, follow all the steps below to make sure that references to a certificate are removed from the configuration of any installed server software (Apache, nginx, Postfix, etc) before deleting the certificate. To explain further, when installing a certificate, Certbot modifies Apache or nginx's configuration to load the certificate and its private key from the /etc/letsencrypt/live/ directory. Before deleting a certificate, it is necessary to undo that modification, by removing any references to the certificate from the webserver's configuration files. Follow these steps to safely delete a certificate: Find all references to the certificate (substitute example.com in the command for the name of the certificate you wish to delete) sudo bash -c 'grep -R live/example.com /etc/{nginx,httpd,apache2}' If there are no references found, skip directly to Step 4. If some references are found, they will look something like /etc/apache2/sites-available/000-default-le-ssl.conf:SSLCertificateFile /etc/letsencrypt/live/example.com/fullchain.pem /etc/apache2/sites-available/000-default-le-ssl.conf:SSLCertificateKeyFile /etc/letsencrypt/live/example.com/privkey.pem You will need a self-signed certificate to replace the certificate you are deleting. The following command will generate one for you, saving the certificate at /etc/letsencrypt/self-signed-cert.pem and its private key at /etc/letsencrypt/self-signed-privkey.pem sudo openssl req -nodes -batch -x509 -newkey rsa:2048 -keyout /etc/letsencrypt/self-signed-privkey.pem -out /etc/letsencrypt/self-signed-cert.pem -days 356 For each reference found in Step 1, open the file in a text editor and replace the reference to the existing certificate with a reference to the self-signed certificate. Continuing from the previous example, you would open /etc/apache2/sites-available/000-default-le-ssl.conf in a text editor and modify the two matching lines of text to instead say SSLCertificateFile /etc/letsencrypt/self-signed-cert.pem SSLCertificateKeyFile /etc/letsencrypt/self-signed-privkey.pem It is now safe to delete the certificate. Do so by running sudo certbot delete --cert-name example.com \u66f4\u65b0\u7684\u8bc1\u4e66 \u00b6 Note \u8ba9\u6211\u4eec\u52a0\u5bc6CA\u9881\u53d1\u77ed\u547d\u8bc1\u4e66(90\u5929)\u3002\u8bf7\u786e\u4fdd\u60a8\u81f3\u5c11\u6bcf3\u4e2a\u6708\u66f4\u65b0\u4e00\u6b21\u8bc1\u4e66\u3002 Quote \u5927\u591a\u6570Certbot\u5b89\u88c5\u90fd\u5e26\u6709\u81ea\u52a8\u66f4\u65b0\u529f\u80fd\u3002\u8be6\u60c5\u8bf7\u53c2\u89c1 \u81ea\u52a8\u7eed\u8ba2 \u3002 Quote Manual \u63d2\u4ef6\u7684\u7528\u6237\u5e94\u8be5\u6ce8\u610f\uff0c --manual \u8bc1\u4e66\u4e0d\u4f1a\u81ea\u52a8\u66f4\u65b0\uff0c\u9664\u975e\u7ed3\u5408\u4e86\u8eab\u4efd\u9a8c\u8bc1\u94a9\u5b50\u811a\u672c\u3002 \u67e5\u770b ` \u4f7f\u7528\u624b\u52a8\u63d2\u4ef6\u66f4\u65b0 . As of version 0.10.0, Certbot supports a renew action to check all installed certificates for impending expiry and attempt to renew them. The simplest form is simply certbot renew This command attempts to renew any previously-obtained certificates that expire in less than 30 days. The same plugin and options that were used at the time the certificate was originally issued will be used for the renewal attempt, unless you specify other plugins or options. Unlike certonly , renew acts on multiple certificates and always takes into account whether each one is near expiry. Because of this, renew is suitable (and designed) for automated use, to allow your system to automatically renew each certificate when appropriate. Since renew only renews certificates that are near expiry it can be run as frequently as you want - since it will usually take no action. The renew command includes hooks for running commands or scripts before or after a certificate is renewed. For example, if you have a single certificate obtained using the standalone_ plugin, you might need to stop the webserver before renewing so standalone can bind to the necessary ports, and then restart it after the plugin is finished. Example:: certbot renew --pre-hook \"service nginx stop\" --post-hook \"service nginx start\" If a hook exits with a non-zero exit code, the error will be printed to stderr but renewal will be attempted anyway. A failing hook doesn't directly cause Certbot to exit with a non-zero exit code, but since Certbot exits with a non-zero exit code when renewals fail, a failed hook causing renewal failures will indirectly result in a non-zero exit code. Hooks will only be run if a certificate is due for renewal, so you can run the above command frequently without unnecessarily stopping your webserver. When Certbot detects that a certificate is due for renewal, --pre-hook and --post-hook hooks run before and after each attempt to renew it. If you want your hook to run only after a successful renewal, use --deploy-hook in a command like this. certbot renew --deploy-hook /path/to/deploy-hook-script You can also specify hooks by placing files in subdirectories of Certbot's configuration directory. Assuming your configuration directory is /etc/letsencrypt , any executable files found in /etc/letsencrypt/renewal-hooks/pre , /etc/letsencrypt/renewal-hooks/deploy , and /etc/letsencrypt/renewal-hooks/post will be run as pre, deploy, and post hooks respectively when any certificate is renewed with the renew subcommand. These hooks are run in alphabetical order and are not run for other subcommands. (The order the hooks are run is determined by the byte value of the characters in their filenames and is not dependent on your locale.) Hooks specified in the command line, :ref: configuration file <config-file> , or :ref: renewal configuration files <renewal-config-file> are run as usual after running all hooks in these directories. One minor exception to this is if a hook specified elsewhere is simply the path to an executable file in the hook directory of the same type (e.g. your pre-hook is the path to an executable in /etc/letsencrypt/renewal-hooks/pre ), the file is not run a second time. You can stop Certbot from automatically running executables found in these directories by including --no-directory-hooks on the command line. More information about hooks can be found by running certbot --help renew . If you're sure that this command executes successfully without human intervention, you can add the command to crontab (since certificates are only renewed when they're determined to be near expiry, the command can run on a regular basis, like every week or every day). In that case, you are likely to want to use the -q or --quiet quiet flag to silence all output except errors. If you are manually renewing all of your certificates, the --force-renewal flag may be helpful; it causes the expiration time of the certificate(s) to be ignored when considering renewal, and attempts to renew each and every installed certificate regardless of its age. (This form is not appropriate to run daily because each certificate will be renewed every day, which will quickly run into the certificate authority rate limit.) Note that options provided to certbot renew will apply to every certificate for which renewal is attempted; for example, certbot renew --rsa-key-size 4096 would try to replace every near-expiry certificate with an equivalent certificate using a 4096-bit RSA public key. If a certificate is successfully renewed using specified options, those options will be saved and used for future renewals of that certificate. An alternative form that provides for more fine-grained control over the renewal process (while renewing specified certificates one at a time), is certbot certonly with the complete set of subject domains of a specific certificate specified via -d flags. You may also want to include the -n or --noninteractive flag to prevent blocking on user input (which is useful when running the command from cron). certbot certonly -n -d example.com -d www.example.com All of the domains covered by the certificate must be specified in this case in order to renew and replace the old certificate rather than obtaining a new one; don't forget any www. domains! Specifying a subset of the domains creates a new, separate certificate containing only those domains, rather than replacing the original certificate. When run with a set of domains corresponding to an existing certificate, the certonly command attempts to renew that specific certificate. Please note that the CA will send notification emails to the address you provide if you do not renew certificates that are about to expire. Certbot is working hard to improve the renewal process, and we apologize for any inconvenience you encounter in integrating these commands into your individual environment. Note certbot renew exit status will only be 1 if a renewal attempt failed. This means certbot renew exit status will be 0 if no certificate needs to be updated. If you write a custom script and expect to run a command only after a certificate was actually renewed you will need to use the --deploy-hook since the exit status will be 0 both on successful renewal and when renewal is not necessary. .. _renewal-config-file: .. _Modifying the Renewal Configuration File: \u4fee\u6539\u5df2\u6709\u8bc1\u4e66\u7684\u66f4\u65b0\u914d\u7f6e \u00b6 \u5728\u521b\u5efa\u8bc1\u4e66\u65f6\uff0cCertbot \u5c06\u8ddf\u8e2a\u7528\u6237\u9009\u62e9\u7684\u6240\u6709\u76f8\u5173\u9009\u9879\u3002 \u5728\u66f4\u65b0\u65f6\uff0cCertbot \u5c06\u8bb0\u4f4f\u8fd9\u4e9b\u9009\u9879\u5e76\u518d\u6b21\u5e94\u7528\u5b83\u4eec\u3002 \u6709\u65f6\uff0c\u60a8\u53ef\u80fd\u4f1a\u9047\u5230\u9700\u8981\u66f4\u6539\u5176\u4e2d\u4e00\u4e9b\u9009\u9879\u4ee5\u7528\u4e8e\u5c06\u6765\u7684\u8bc1\u4e66\u66f4\u65b0\u3002 \u4e3a\u6b64\uff0c\u60a8\u9700\u8981\u6267\u884c\u4ee5\u4e0b\u6b65\u9aa4: Perform a dry run renewal with the amended options on the command line. This allows you to confirm that the change is valid and will result in successful future renewals. If the dry run is successful, perform a live renewal of the certificate. This will persist the change for future renewals. If the certificate is not yet due to expire, you will need to force a renewal using --force-renewal . Note \u8bc1\u4e66\u9881\u53d1\u673a\u6784\u7684\u8d39\u7387\u9650\u5236\u53ef\u80fd\u4f1a\u963b\u6b62\u60a8\u5728\u77ed\u65f6\u95f4\u5185\u6267\u884c\u591a\u6b21\u66f4\u65b0 period of time. It is strongly recommended to perform the second step only once, when you have decided on what options should change. As a practical example, if you were using the webroot authenticator and had relocated your website to another directory, you would need to change the --webroot-path to the new directory. Following the above advice: Perform a dry-run renewal of the individual certificate with the amended options:: certbot renew --cert-name example.com --webroot-path /path/to/new/location --dry-run If the dry-run was successful, make the change permanent by performing a live renewal of the certificate with the amended options, including --force-renewal :: certbot renew --cert-name example.com --webroot-path /path/to/new/location --force-renewal --cert-name selects the particular certificate to be modified. Without this option, all certificates will be selected. --webroot-path is the option intended to be changed. All other previously selected options will be kept the same and do not need to be included in the command. For advanced certificate management tasks, it is also possible to manually modify the certificate's renewal configuration file, but this is discouraged since it can easily break Certbot's ability to renew your certificates. These renewal configuration files are located at /etc/letsencrypt/renewal/CERTNAME.conf . If you choose to modify the renewal configuration file we advise you to make a backup of the file beforehand and test its validity with the certbot renew --dry-run command. .. warning:: Manually modifying files under /etc/letsencrypt/renewal/ can damage them if done improperly and we do not recommend doing so. \u81ea\u52a8\u66f4\u65b0 \u00b6 Most Certbot installations come with automatic renewals preconfigured. This is done by means of a scheduled task which runs certbot renew periodically. If you are unsure whether you need to configure automated renewal: Review the instructions for your system and installation method at https://certbot.eff.org/instructions. They will describe how to set up a scheduled task, if necessary. If no step is listed, your system comes with automated renewal pre-installed, and you should not need to take any additional actions. On Linux and BSD, you can check to see if your installation method has pre-installed a timer for you. To do so, look for the certbot renew command in either your system's crontab (typically /etc/crontab or /etc/cron.*/* ) or systemd timers ( systemctl list-timers ). If you're still not sure, you can configure automated renewal manually by following the steps in the next section. Certbot has been carefully engineered to handle the case where both manual automated renewal and pre-installed automated renewal are set up. Setting up automated renewal If you think you may need to set up automated renewal, follow these instructions to set up a scheduled task to automatically renew your certificates in the background. If you are unsure whether your system has a pre-installed scheduled task for Certbot, it is safe to follow these instructions to create one. Note If you're using Windows, these instructions are not neccessary as Certbot on Windows comes with a scheduled task for automated renewal pre-installed. If you are using macOS and installed Certbot using Homebrew, follow the instructions at https://certbot.eff.org/instructions to set up automated renewal. The instructions below are not applicable on macOS. Run the following line, which will add a cron job to /etc/crontab : SLEEPTIME = $( awk 'BEGIN{srand(); print int(rand()_(3600+1))}' ) ; echo \"0 0,12 _ \\* \\* root sleep $SLEEPTIME && certbot renew -q\" | sudo tee -a /etc/crontab > /dev/null If you needed to stop your webserver to run Certbot, you'll want to add pre and post hooks to stop and start your webserver automatically. For example, if your webserver is HAProxy, run the following commands to create the hook files in the appropriate directory: sudo sh -c 'printf \"#!/bin/sh\\nservice haproxy stop\\n\" > /etc/letsencrypt/renewal-hooks/pre/haproxy.sh' sudo sh -c 'printf \"#!/bin/sh\\nservice haproxy start\\n\" > /etc/letsencrypt/renewal-hooks/post/haproxy.sh' sudo chmod 755 /etc/letsencrypt/renewal-hooks/pre/haproxy.sh sudo chmod 755 /etc/letsencrypt/renewal-hooks/post/haproxy.sh Congratulations, Certbot will now automatically renew your certificates in the background. If you are interested in learning more about how Certbot renews your certificates, see the Renewing certificates _ section above. \u6211\u7684\u8bc1\u4e66\u5728\u54ea\u91cc? \u00b6 \u6240\u6709\u751f\u6210\u7684\u5bc6\u94a5\u548c\u9881\u53d1\u7684\u8bc1\u4e66\u90fd\u53ef\u4ee5\u5728 /etc/letsencrypt/live/$domain \u4e2d\u627e\u5230\uff0c\u5176\u4e2d $domain \u662f\u8bc1\u4e66\u540d\u79f0(\u53c2\u89c1\u4e0b\u9762\u7684\u8bf4\u660e)\u3002 \u4e0d\u8981\u590d\u5236\uff0c\u8bf7\u5c06\u60a8\u7684(web)\u670d\u52a1\u5668\u914d\u7f6e\u76f4\u63a5\u6307\u5411\u8fd9\u4e9b\u6587\u4ef6(\u6216\u521b\u5efa\u7b26\u53f7\u94fe\u63a5)\u3002 \u5728\u66f4\u65b0\u671f\u95f4\uff0c /etc/letsencrypt/live \u5c06\u4f7f\u7528\u6700\u65b0\u7684\u5fc5\u8981\u6587\u4ef6\u8fdb\u884c\u66f4\u65b0\u3002 Note \u5728\u8def\u5f84 /etc/letsencrypt/live/$domain \u4e2d\u4f7f\u7528\u7684\u8bc1\u4e66\u540d\u79f0 $domain \u9075\u5faa\u4ee5\u4e0b\u7ea6\u5b9a: \u8fd9\u662f\u5b83\u7684\u540d\u5b57 --cert-name , \u5982\u679c\u7528\u6237\u6ca1\u6709\u8bbe\u7f6e --cert-name \uff0c\u5b83\u662f\u7ed9 --domains \u7684\u7b2c\u4e00\u4e2a\u57df\uff0c \u5982\u679c\u7b2c\u4e00\u4e2a\u57df\u662f\u901a\u914d\u7b26\u57df(\u4f8b\u5982; *.example.com )\u8bc1\u4e66\u540d\u79f0\u5c06\u4e3a example.com \uff0c \u5982\u679c\u4e0e\u5df2\u547d\u540d\u4e3a example.com \u7684\u8bc1\u4e66\u53d1\u751f\u540d\u79f0\u51b2\u7a81\uff0c\u5219\u5c06\u4f7f\u7528 example.com-001 \u6570\u5b57\u5e8f\u5217\u6784\u9020\u65b0\u7684\u8bc1\u4e66\u540d\u79f0\u3002. \u7531\u4e8e\u5386\u53f2\u539f\u56e0\uff0c\u5305\u542b\u76ee\u5f55\u7684\u521b\u5efa\u6743\u9650\u4e3a 0700 \uff0c\u8fd9\u610f\u5473\u7740\u53ea\u6709\u4f5c\u4e3a\u6839\u7528\u6237\u8fd0\u884c\u7684\u670d\u52a1\u5668\u624d\u80fd\u8bbf\u95ee\u8bc1\u4e66\u3002 \u5982\u679c\u4f60\u6c38\u8fdc\u4e0d\u4f1a\u964d\u7ea7\u5230\u65e7\u7248\u672c\u7684 Certbot \uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u4f7f\u7528 chmod 0755 /etc/letsencrypt/{live,archive} \u6765\u5b89\u5168\u5730\u4fee\u590d\u8fd9\u4e2a\u95ee\u9898\u3002 \u5bf9\u4e8e\u5728\u5c1d\u8bd5\u8bfb\u53d6\u79c1\u94a5\u6587\u4ef6\u4e4b\u524d\u653e\u5f03\u6839\u6743\u9650\u7684\u670d\u52a1\u5668\uff0c\u60a8\u8fd8\u9700\u8981\u4f7f\u7528 chgrp \u548c chmod 0640 \u6765\u5141\u8bb8\u670d\u52a1\u5668\u8bfb\u53d6 /etc/letsencrypt/live/$domain/privkey.pem \u3002 Note /etc/letsencrypt/archive \u548c /etc/letsencrypt/keys \u5305\u542b\u6240\u6709\u4ee5\u524d\u7684\u5bc6\u94a5\u548c\u8bc1\u4e66\uff0c \u800c /etc/letsencrypt/live \u7b26\u53f7\u94fe\u63a5\u5230\u6700\u65b0\u7248\u672c\u3002 \u5df2\u83b7\u53d6\u4ee5\u4e0b\u6587\u4ef6: privkey.pem \u8bc1\u4e66\u7684\u79c1\u94a5\u3002 \u8fd9 \u5fc5\u987b\u4e00\u76f4\u4fdd\u5bc6 !\u5343\u4e07\u4e0d\u8981\u548c\u4efb\u4f55\u4eba\u5206\u4eab\uff0c\u5305\u62ecCertbot\u7684\u5f00\u53d1\u8005\u3002 \u4f46\u662f\uff0c\u60a8\u4e0d\u80fd\u5c06\u5176\u653e\u5165\u4fdd\u9669\u7bb1\u4e2d\u2014\u60a8\u7684\u670d\u52a1\u5668\u4ecd\u7136\u9700\u8981\u8bbf\u95ee\u6b64\u6587\u4ef6\u624d\u80fd\u4f7fSSL/TLS\u5de5\u4f5c\u3002 \u4eceCertbot 0.29.0\u7248\u672c\u5f00\u59cb\uff0c\u65b0\u8bc1\u4e66\u7684\u79c1\u94a5\u9ed8\u8ba4\u4e3a 0600 \u3002\u5bf9\u8be5\u6587\u4ef6\u7684\u7ec4\u6a21\u5f0f\u6216\u7ec4\u6240\u6709\u8005(gid)\u7684\u4efb\u4f55\u66f4\u6539\u90fd\u5c06\u5728\u66f4\u65b0\u65f6\u4fdd\u7559\u3002 \u8fd9\u662fApache\u4e3a SSLCertificateKeyFile \u548cNginx\u4e3a ssl_certificate_key \u6240\u9700\u8981\u7684 fullchain.pem \u6240\u6709\u8bc1\u4e66\uff0c \u5305\u62ec \u670d\u52a1\u5668\u8bc1\u4e66(\u53c8\u540d\u53f6\u8bc1\u4e66\u6216\u6700\u7ec8\u5b9e\u4f53\u8bc1\u4e66)\u3002 \u670d\u52a1\u5668\u8bc1\u4e66\u662f\u8be5\u6587\u4ef6\u4e2d\u7684\u7b2c\u4e00\u4e2a\u8bc1\u4e66\uff0c\u968f\u540e\u662f\u4efb\u4f55\u4e2d\u95f4\u8bc1\u4e66\u3002 \u8fd9\u662fApache >= 2.4.8\u9700\u8981\u7684 SSLCertificateFile \u548cNginx\u9700\u8981\u7684 ssl_certificate cert.pem and chain.pem (\u4e0d\u592a\u5e38\u89c1) cert.pem \u5305\u542b\u670d\u52a1\u5668\u8bc1\u4e66\u672c\u8eab\uff0c chain.pem \u5305\u542b\u6d4f\u89c8\u5668\u9a8c\u8bc1\u670d\u52a1\u5668\u8bc1\u4e66\u6240\u9700\u7684\u989d\u5916\u4e2d\u95f4\u8bc1\u4e66\u6216\u8bc1\u4e66\u3002 \u5982\u679c\u60a8\u5411web\u670d\u52a1\u5668\u63d0\u4f9b\u5176\u4e2d\u4e00\u4e2a\u6587\u4ef6\uff0c\u60a8 \u5fc5\u987b \u540c\u65f6\u63d0\u4f9b\u4e24\u4e2a\u6587\u4ef6\uff0c\u5426\u5219\u67d0\u4e9b\u6d4f\u89c8\u5668\u4f1a\u4e3a\u60a8\u7684\u7ad9\u70b9\u663e\u793a\u201cThis Connection is Untrusted\u201d\u9519\u8bef \u6709\u65f6 \u3002 Apache < 2.4.8\u5206\u522b\u9700\u8981\u8fd9\u4e9b SSLCertificateFile \u548c SSLCertificateChainFile \u3002 \u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528Nginx >= 1.3.7\u7684OCSP\u9489\u4e66\uff0c chain.pem \u5e94\u8be5\u4f5c\u4e3a ssl_trusted_certificate \u6765\u9a8c\u8bc1OCSP\u54cd\u5e94\u3002 Note \u6240\u6709\u6587\u4ef6\u90fd\u662fPEM-encoded\u7684\u3002 \u5982\u679c\u60a8\u9700\u8981\u5176\u4ed6\u683c\u5f0f\uff0c\u4f8b\u5982DER\u6216PFX\uff0c\u90a3\u4e48\u60a8\u53ef\u4ee5\u4f7f\u7528 openssl \u8fdb\u884c\u8f6c\u6362\u3002 \u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f\u81ea\u52a8\u66f4\u65b0\uff0c\u4f60\u53ef\u4ee5\u7528 --deploy-hook \u6765\u81ea\u52a8 \u66f4\u65b0 \u3002 \u524d\u548c\u540e\u9a8c\u8bc1\u6302\u94a9 \u00b6 Certbot \u5141\u8bb8\u5728\u624b\u52a8\u6a21\u5f0f\u4e0b\u8fd0\u884c\u524d\u548c\u540e\u9a8c\u8bc1\u6302\u94a9\u7684\u89c4\u8303\u3002 \u6307\u5b9a\u8fd9\u4e9b\u811a\u672c\u7684\u6807\u5fd7\u5206\u522b\u662f --manual-auth-hook \u548c --manual-cleanup-hook \uff0c\u53ef\u4ee5\u5982\u4e0b\u4f7f\u7528: certbot certonly --manual --manual-auth-hook /path/to/http/authenticator.sh --manual-cleanup-hook /path/to/http/cleanup.sh -d secure.example.com \u8fd9\u5c06\u8fd0\u884c authenticator.sh \u811a\u672c\uff0c\u5c1d\u8bd5\u9a8c\u8bc1\uff0c\u7136\u540e\u8fd0\u884c cleanup.sh \u811a\u672c\u3002 \u6b64\u5916\uff0ccertbot \u5c06\u628a\u76f8\u5173\u7684\u73af\u5883\u53d8\u91cf\u4f20\u9012\u7ed9\u8fd9\u4e9b\u811a\u672c: CERTBOT_DOMAIN : \u6b63\u5728\u9a8c\u8bc1\u7684\u57df CERTBOT_VALIDATION : \u9a8c\u8bc1\u5b57\u7b26\u4e32 CERTBOT_TOKEN : HTTP-01 \u6311\u6218\u7684\u8d44\u6e90\u540d\u90e8\u5206(\u4ec5\u9650 HTTP-01) CERTBOT_REMAINING_CHALLENGES : \u5f53\u524d\u6311\u6218\u7ed3\u675f\u540e\u5269\u4f59\u7684\u6311\u6218\u6570 CERTBOT_ALL_DOMAINS : \u5f53\u524d\u8bc1\u4e66\u6311\u6218\u7684\u6240\u6709\u57df\u7684\u9017\u53f7\u5206\u9694\u5217\u8868 \u53e6\u5916\u7528\u4e8e\u6e05\u7406: CERTBOT_AUTH_OUTPUT : \u8ba4\u8bc1\u811a\u672c\u5199\u5165\u6807\u51c6\u8f93\u51fa\u7684\u5185\u5bb9 HTTP-01 \u7684\u4f7f\u7528\u793a\u4f8b: certbot certonly --manual --preferred-challenges = http --manual-auth-hook /path/to/http/authenticator.sh --manual-cleanup-hook /path/to/http/cleanup.sh -d secure.example.com /path/to/http/authenticator.sh #!/bin/bash echo $CERTBOT_VALIDATION > /var/www/htdocs/.well-known/acme-challenge/ $CERTBOT_TOKEN /path/to/http/cleanup.sh #!/bin/bash rm -f /var/www/htdocs/.well-known/acme-challenge/ $CERTBOT_TOKEN DNS-01 (Cloudflare API v4)\u7684\u4f7f\u7528\u793a\u4f8b(\u4ec5\u4f9b\u793a\u4f8b\u4f7f\u7528\uff0c\u4e0d\u6309\u539f\u6837\u4f7f\u7528) certbot certonly --manual --preferred-challenges = dns --manual-auth-hook /path/to/dns/authenticator.sh --manual-cleanup-hook /path/to/dns/cleanup.sh -d secure.example.com /path/to/dns/authenticator.sh #!/bin/bash # Get your API key from https://www.cloudflare.com/a/account/my-account API_KEY = \"your-api-key\" EMAIL = \"your.email@example.com\" # Strip only the top domain to get the zone id DOMAIN = $( expr match \" $CERTBOT_DOMAIN \" '.*\\.\\(.*\\..*\\)' ) # Get the Cloudflare zone id ZONE_EXTRA_PARAMS = \"status=active&page=1&per_page=20&order=status&direction=desc&match=all\" ZONE_ID = $( curl -s -X GET \"https://api.cloudflare.com/client/v4/zones?name= $DOMAIN & $ZONE_EXTRA_PARAMS \" \\ -H \"X-Auth-Email: $EMAIL \" \\ -H \"X-Auth-Key: $API_KEY \" \\ -H \"Content-Type: application/json\" | python -c \"import sys,json;print(json.load(sys.stdin)['result'][0]['id'])\" ) # Create TXT record CREATE_DOMAIN = \"_acme-challenge. $CERTBOT_DOMAIN \" RECORD_ID = $( curl -s -X POST \"https://api.cloudflare.com/client/v4/zones/ $ZONE_ID /dns_records\" \\ -H \"X-Auth-Email: $EMAIL \" \\ -H \"X-Auth-Key: $API_KEY \" \\ -H \"Content-Type: application/json\" \\ --data '{\"type\":\"TXT\",\"name\":\"' \" $CREATE_DOMAIN \" '\",\"content\":\"' \" $CERTBOT_VALIDATION \" '\",\"ttl\":120}' \\ | python -c \"import sys,json;print(json.load(sys.stdin)['result']['id'])\" ) # Save info for cleanup if [ ! -d /tmp/CERTBOT_ $CERTBOT_DOMAIN ] ; then mkdir -m 0700 /tmp/CERTBOT_ $CERTBOT_DOMAIN fi echo $ZONE_ID > /tmp/CERTBOT_ $CERTBOT_DOMAIN /ZONE_ID echo $RECORD_ID > /tmp/CERTBOT_ $CERTBOT_DOMAIN /RECORD_ID # Sleep to make sure the change has time to propagate over to DNS sleep 25 /path/to/dns/cleanup.sh #!/bin/bash # Get your API key from https://www.cloudflare.com/a/account/my-account API_KEY = \"your-api-key\" EMAIL = \"your.email@example.com\" if [ -f /tmp/CERTBOT_ $CERTBOT_DOMAIN /ZONE_ID ] ; then ZONE_ID = $( cat /tmp/CERTBOT_ $CERTBOT_DOMAIN /ZONE_ID ) rm -f /tmp/CERTBOT_ $CERTBOT_DOMAIN /ZONE_ID fi if [ -f /tmp/CERTBOT_ $CERTBOT_DOMAIN /RECORD_ID ] ; then RECORD_ID = $( cat /tmp/CERTBOT_ $CERTBOT_DOMAIN /RECORD_ID ) rm -f /tmp/CERTBOT_ $CERTBOT_DOMAIN /RECORD_ID fi # Remove the challenge TXT record from the zone if [ -n \" ${ ZONE_ID } \" ] ; then if [ -n \" ${ RECORD_ID } \" ] ; then curl -s -X DELETE \"https://api.cloudflare.com/client/v4/zones/ $ZONE_ID /dns_records/ $RECORD_ID \" \\ -H \"X-Auth-Email: $EMAIL \" \\ -H \"X-Auth-Key: $API_KEY \" \\ -H \"Content-Type: application/json\" fi fi \u66f4\u6539 ACME \u670d\u52a1\u5668 \u00b6 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cCertbot \u4f7f\u7528 Let\u2019s Encrypt \u7684\u751f\u4ea7\u670d\u52a1\u5668 https://acme-v02.api.letsencrypt.org/directory \u3002 \u60a8\u53ef\u4ee5\u544a\u8bc9 Certbot \u4f7f\u7528\u4e0d\u540c\u7684 CA\uff0c\u65b9\u6cd5\u662f\u5728\u547d\u4ee4\u884c\u4e0a\u63d0\u4f9b --server \uff0c\u6216\u8005\u5728 \u914d\u7f6e\u6587\u4ef6 \u4e2d\u63d0\u4f9b\u670d\u52a1\u5668 ACME \u76ee\u5f55\u7684 URL\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4f60\u60f3\u4f7f\u7528 Let's Encrypt \u7684\u767b\u53f0\u670d\u52a1\u5668\uff0c\u4f60\u53ef\u4ee5\u5728\u547d\u4ee4\u884c\u4e2d\u6dfb\u52a0 \u2014\u2014server https://acme-staging-v02.api.letsencrypt.org/directory \u3002 \u5982\u679c Certbot \u4e0d\u4fe1\u4efb ACME \u670d\u52a1\u5668\u4f7f\u7528\u7684 SSL \u8bc1\u4e66\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528 REQUESTS_CA_BUNDLE \u73af\u5883\u53d8\u91cf\u8986\u76d6 Certbot \u4fe1\u4efb\u7684\u6839\u8bc1\u4e66\u3002 Certbot \u4f7f\u7528 requests \u5e93\uff0c\u5b83\u4e0d\u4f7f\u7528\u64cd\u4f5c\u7cfb\u7edf\u53d7\u4fe1\u4efb\u7684\u6839\u5b58\u50a8\u3002 \u5982\u679c\u4f7f\u7528 --server \u6307\u5b9a\u5b9e\u73b0\u89c4\u8303\u7684\u6807\u51c6\u5316\u7248\u672c\u7684 ACME CA\uff0c\u5219\u53ef\u4ee5\u83b7\u5f97\u901a\u914d\u7b26\u57df\u7684\u8bc1\u4e66\u3002 \u4e00\u4e9b CAs(\u4f8b\u5982 Let\u2019s Encrypt)\u8981\u6c42\u901a\u914d\u7b26\u57df\u7684\u57df\u9a8c\u8bc1\u5fc5\u987b\u901a\u8fc7\u4fee\u6539 DNS \u8bb0\u5f55\u6765\u5b8c\u6210\uff0c\u8fd9\u610f\u5473\u7740\u5fc5\u987b\u4f7f\u7528 dns-01 \u6311\u6218\u7c7b\u578b\u3002 \u8981\u67e5\u770b\u652f\u6301\u6b64\u6311\u6218\u7c7b\u578b\u7684 Certbot \u63d2\u4ef6\u5217\u8868\u4ee5\u53ca\u5982\u4f55\u4f7f\u7528\u5b83\u4eec\uff0c\u8bf7\u53c2\u9605 \u63d2\u4ef6 \u3002 \u9501\u6587\u4ef6 \u00b6 \u5728\u5904\u7406\u9a8c\u8bc1\u65f6\uff0cCertbot \u4f1a\u5728\u60a8\u7684\u7cfb\u7edf\u4e0a\u5199\u5165\u4e00\u4e9b\u9501\u6587\u4ef6\uff0c\u4ee5\u9632\u6b62\u591a\u4e2a\u5b9e\u4f8b\u76f8\u4e92\u8986\u76d6\u66f4\u6539\u3002 \u8fd9\u610f\u5473\u7740\u9ed8\u8ba4\u60c5\u51b5\u4e0b Certbot \u7684\u4e24\u4e2a\u5b9e\u4f8b\u4e0d\u80fd\u5e76\u884c\u8fd0\u884c\u3002 \u7531\u4e8e Certbot \u4f7f\u7528\u7684\u76ee\u5f55\u662f\u53ef\u914d\u7f6e\u7684\uff0c\u56e0\u6b64 Certbot \u5c06\u4e3a\u5b83\u4f7f\u7528\u7684\u6240\u6709\u76ee\u5f55\u7f16\u5199\u4e00\u4e2a\u9501\u6587\u4ef6\u3002 \u8fd9\u5305\u62ec Certbot \u7684 --work-dir , --logs-dir , \u548c --config-dir \u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5b83\u4eec\u5206\u522b\u662f /var/lib/letsencrypt , /var/log/letsencrypt , \u548c /etc/letsencrypt \u3002 \u6b64\u5916\uff0c\u5982\u679c\u4f60\u5728 Apache \u6216 nginx \u4e0a\u4f7f\u7528 Certbot\uff0c\u5b83\u4f1a\u9501\u5b9a\u8be5\u7a0b\u5e8f\u7684\u914d\u7f6e\u6587\u4ef6\u5939\uff0c\u901a\u5e38\u4e5f\u5728 /etc \u76ee\u5f55\u4e0b\u3002 \u6ce8\u610f\uff0c\u8fd9\u4e9b\u9501\u6587\u4ef6\u53ea\u4f1a\u963b\u6b62 Certbot \u7684\u5176\u4ed6\u5b9e\u4f8b\u4f7f\u7528\u8fd9\u4e9b\u76ee\u5f55\uff0c\u800c\u4e0d\u662f\u5176\u4ed6\u8fdb\u7a0b\u3002 \u5982\u679c\u4f60\u60f3\u540c\u65f6\u8fd0\u884c Certbot \u7684\u591a\u4e2a\u5b9e\u4f8b\uff0c\u4f60\u5e94\u8be5\u4e3a\u4f60\u60f3\u8981\u8fd0\u884c\u7684\u6bcf\u4e2a Certbot \u5b9e\u4f8b\u6307\u5b9a\u4e0d\u540c\u7684\u76ee\u5f55\uff0c\u5982 --work-dir , --logs-dir , \u548c --config-dir \u3002 \u914d\u7f6e\u6587\u4ef6 \u00b6 Certbot \u63a5\u53d7\u4e00\u4e2a\u5168\u5c40\u914d\u7f6e\u6587\u4ef6\uff0c\u8be5\u6587\u4ef6\u5c06\u5176\u9009\u9879\u5e94\u7528\u4e8e Certbot \u7684\u6240\u6709\u8c03\u7528\u3002 \u7279\u5b9a\u4e8e\u8bc1\u4e66\u7684\u914d\u7f6e\u9009\u9879\u5e94\u8be5\u8bbe\u7f6e\u5728 .conf \u6587\u4ef6\u4e2d\uff0c\u8be5\u6587\u4ef6\u53ef\u4ee5\u5728 /etc/letsencrypt/renewal \u4e2d\u627e\u5230\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e0d\u4f1a\u521b\u5efa cli.ini \u6587\u4ef6(\u4f8b\u5982\uff0c\u5982\u679c\u901a\u8fc7\u5305\u7ba1\u7406\u5668\u5b89\u88c5 Certbot\uff0c\u5219\u53ef\u80fd\u5df2\u7ecf\u5b58\u5728 cli.ini \u6587\u4ef6)\u3002 \u5728\u521b\u5efa\u4e00\u4e2a\u914d\u7f6e\u6587\u4ef6\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528 certbot --config cli.ini (\u6216\u66f4\u77ed\u7684 -c cli.ini )\u6307\u5b9a\u8be5\u914d\u7f6e\u6587\u4ef6\u7684\u4f4d\u7f6e\u3002 \u914d\u7f6e\u6587\u4ef6\u793a\u4f8b\u5982\u4e0b\u6240\u793a: # This is an example of the kind of things you can do in a configuration file. # All flags used by the client can be configured here. Run Certbot with # \"--help\" to learn more about the available options. # # Note that these options apply automatically to all use of Certbot for # obtaining or renewing certificates, so options specific to a single # certificate on a system with several certificates should not be placed # here. # Use ECC for the private key key-type = ecdsa elliptic-curve = secp384r1 # Use a 4096 bit RSA key instead of 2048 rsa-key-size = 4096 # Uncomment and update to register with the specified e-mail address # email = foo@example.com # Uncomment to use the standalone authenticator on port 443 # authenticator = standalone # Uncomment to use the webroot authenticator. Replace webroot-path with the # path to the public_html / webroot folder being served by your web server. # authenticator = webroot # webroot-path = /usr/share/nginx/html # Uncomment to automatically agree to the terms of service of the ACME server # agree-tos = true # An example of using an alternate ACME server that uses EAB credentials # server = https://acme.sectigo.com/v2/InCommonRSAOV # eab-kid = somestringofstuffwithoutquotes # eab-hmac-key = yaddayaddahexhexnotquoted \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u641c\u7d22\u4ee5\u4e0b\u4f4d\u7f6e: /etc/letsencrypt/cli.ini $XDG_CONFIG_HOME/letsencrypt/cli.ini (or ~/.config/letsencrypt/cli.ini if $XDG_CONFIG_HOME is not set). \u7531\u4e8e\u8be5\u914d\u7f6e\u6587\u4ef6\u9002\u7528\u4e8e certbot \u7684\u6240\u6709\u8c03\u7528\uff0c\u56e0\u6b64\u5728\u5176\u4e2d\u5217\u51fa\u57df\u662f\u4e0d\u6b63\u786e\u7684\u3002 \u5728 cli.ini \u4e2d\u5217\u51fa\u57df\u540d\u53ef\u80fd\u4f1a\u963b\u6b62\u66f4\u65b0\u5de5\u4f5c\u3002 \u6b64\u5916\uff0c\u7531\u4e8e cli.ini \u4e2d\u7684\u53c2\u6570\u662f\u5982\u4f55\u89e3\u6790\u7684\uff0c\u4e0d\u5e94\u8be5\u5217\u51fa\u4e0d\u5e0c\u671b\u8bbe\u7f6e\u7684\u9009\u9879\u3002 \u8bbe\u7f6e\u4e3a false \u7684\u9009\u9879\u5c06\u88ab\u65e7\u7248\u672c\u7684 Certbot \u8bfb\u53d6\u4e3a true\uff0c\u56e0\u4e3a\u5b83\u4eec\u5df2\u7ecf\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u5217\u51fa\u3002 .. \u4f7f\u7528 constants.py \u4f7f\u5176\u4fdd\u6301\u6700\u65b0 \u65e5\u5fd7\u8f6e\u8f6c \u00b6 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0ccertbot \u5c06\u72b6\u6001\u65e5\u5fd7\u5b58\u50a8\u5728 /var/log/letsencrypt \u4e2d\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5f53\u65e5\u5fd7\u76ee\u5f55\u4e2d\u6709 1000 \u4e2a\u65e5\u5fd7\u65f6\uff0ccertbot \u5c06\u5f00\u59cb\u65cb\u8f6c\u65e5\u5fd7\u3002 \u8fd9\u610f\u5473\u7740\u4e00\u65e6\u6709 1000 \u4e2a\u6587\u4ef6\u5728 /var/log/letsencrypt \u4e2d\uff0cCertbot \u5c06\u5220\u9664\u6700\u65e7\u7684\u6587\u4ef6\uff0c\u4e3a\u65b0\u65e5\u5fd7\u817e\u51fa\u7a7a\u95f4\u3002 \u540e\u7eed\u65e5\u5fd7\u7684\u6570\u91cf\u53ef\u4ee5\u901a\u8fc7\u5c06\u6240\u9700\u7684\u6570\u91cf\u4f20\u9012\u7ed9\u547d\u4ee4\u884c\u6807\u5fd7 --max-log-backups \u6765\u66f4\u6539\u3002 \u5c06\u6b64\u6807\u5fd7\u8bbe\u7f6e\u4e3a 0 \u5c06\u5b8c\u5168\u7981\u7528\u65e5\u5fd7\u65cb\u8f6c\uff0c\u5bfc\u81f4 certbot \u59cb\u7ec8\u9644\u52a0\u5230\u76f8\u540c\u7684\u65e5\u5fd7\u6587\u4ef6\u3002 Note \u4e00\u4e9b\u53d1\u884c\u7248\uff0c\u5305\u62ecDebian\u548cUbuntu\uff0c\u7981\u7528\u4e86certbot\u7684\u5185\u90e8\u65e5\u5fd7\u65cb\u8f6c\uff0c\u800c\u652f\u6301\u66f4\u4f20\u7edf\u7684logrotate\u811a\u672c\u3002 \u5982\u679c\u60a8\u6b63\u5728\u4f7f\u7528\u53d1\u884c\u7248\u7684\u5305\uff0c\u5e76\u60f3\u8981\u66f4\u6539\u65e5\u5fd7\u8f6e\u6362\uff0c\u8bf7\u68c0\u67e5 /etc/logrotate.d/ \u8868\u793acertbot\u65cb\u8f6c\u811a\u672c\u3002 Certbot \u547d\u4ee4\u884c\u9009\u9879 \u00b6 Certbot \u652f\u6301\u5f88\u591a\u547d\u4ee4\u884c\u9009\u9879\u3002\u4ee5\u4e0b\u662f\u6765\u81ea certbot --help all \u7684\u5b8c\u6574\u5217\u8868: usage: certbot [SUBCOMMAND] [options] [-d DOMAIN] [-d DOMAIN] ... Certbot can obtain and install HTTPS/TLS/SSL certificates. By default, it will attempt to use a webserver both for obtaining and installing the certificate. The most common SUBCOMMANDS and flags are: obtain, install, and renew certificates: (default) run Obtain & install a certificate in your current webserver certonly Obtain or renew a certificate, but do not install it renew Renew all previously obtained certificates that are near expiry enhance Add security enhancements to your existing configuration -d DOMAINS Comma-separated list of domains to obtain a certificate for --apache Use the Apache plugin for authentication & installation --standalone Run a standalone webserver for authentication --nginx Use the Nginx plugin for authentication & installation --webroot Place files in a server's webroot folder for authentication --manual Obtain certificates interactively, or using shell script hooks -n Run non-interactively --test-cert Obtain a test certificate from a staging server --dry-run Test \"renew\" or \"certonly\" without saving any certificates to disk manage certificates: certificates Display information about certificates you have from Certbot revoke Revoke a certificate (supply --cert-name or --cert-path) delete Delete a certificate (supply --cert-name) manage your account: register Create an ACME account unregister Deactivate an ACME account update_account Update an ACME account show_account Display account details --agree-tos Agree to the ACME server's Subscriber Agreement -m EMAIL Email address for important account notifications optional arguments: -h, --help show this help message and exit -c CONFIG_FILE, --config CONFIG_FILE path to config file (default: /etc/letsencrypt/cli.ini and ~/.config/letsencrypt/cli.ini) -v, --verbose This flag can be used multiple times to incrementally increase the verbosity of output, e.g. -vvv. (default: 0) --max-log-backups MAX_LOG_BACKUPS Specifies the maximum number of backup logs that should be kept by Certbot's built in log rotation. Setting this flag to 0 disables log rotation entirely, causing Certbot to always append to the same log file. (default: 1000) -n, --non-interactive, --noninteractive Run without ever asking for user input. This may require additional command line flags; the client will try to explain which ones are required if it finds one missing (default: False) --force-interactive Force Certbot to be interactive even if it detects it's not being run in a terminal. This flag cannot be used with the renew subcommand. (default: False) -d DOMAIN, --domains DOMAIN, --domain DOMAIN Domain names to apply. For multiple domains you can use multiple -d flags or enter a comma separated list of domains as a parameter. The first domain provided will be the subject CN of the certificate, and all domains will be Subject Alternative Names on the certificate. The first domain will also be used in some software user interfaces and as the file paths for the certificate and related material unless otherwise specified or you already have a certificate with the same name. In the case of a name collision it will append a number like 0001 to the file path name. (default: Ask) --eab-kid EAB_KID Key Identifier for External Account Binding (default: None) --eab-hmac-key EAB_HMAC_KEY HMAC key for External Account Binding (default: None) --cert-name CERTNAME Certificate name to apply. This name is used by Certbot for housekeeping and in file paths; it doesn't affect the content of the certificate itself. To see certificate names, run 'certbot certificates'. When creating a new certificate, specifies the new certificate's name. (default: the first provided domain or the name of an existing certificate on your system for the same domains) --dry-run Perform a test run of the client, obtaining test (invalid) certificates but not saving them to disk. This can currently only be used with the 'certonly' and 'renew' subcommands. Note: Although --dry-run tries to avoid making any persistent changes on a system, it is not completely side-effect free: if used with webserver authenticator plugins like apache and nginx, it makes and then reverts temporary config changes in order to obtain test certificates, and reloads webservers to deploy and then roll back those changes. It also calls --pre-hook and --post-hook commands if they are defined because they may be necessary to accurately simulate renewal. --deploy- hook commands are not called. (default: False) --debug-challenges After setting up challenges, wait for user input before submitting to CA. When used in combination with the `-v` option, the challenge URLs or FQDNs and their expected return values are shown. (default: False) --preferred-chain PREFERRED_CHAIN Set the preferred certificate chain. If the CA offers multiple certificate chains, prefer the chain whose topmost certificate was issued from this Subject Common Name. If no match, the default offered chain will be used. (default: None) --preferred-challenges PREF_CHALLS A sorted, comma delimited list of the preferred challenge to use during authorization with the most preferred challenge listed first (Eg, \"dns\" or \"http,dns\"). Not all plugins support all challenges. See https://certbot.eff.org/docs/using.html#plugins for details. ACME Challenges are versioned, but if you pick \"http\" rather than \"http-01\", Certbot will select the latest version automatically. (default: []) --issuance-timeout ISSUANCE_TIMEOUT This option specifies how long (in seconds) Certbot will wait for the server to issue a certificate. (default: 90) --user-agent USER_AGENT Set a custom user agent string for the client. User agent strings allow the CA to collect high level statistics about success rates by OS, plugin and use case, and to know when to deprecate support for past Python versions and flags. If you wish to hide this information from the Let's Encrypt server, set this to \"\". (default: CertbotACMEClient/2.1.1 (certbot; OS_NAME OS_VERSION) Authenticator/XXX Installer/YYY (SUBCOMMAND; flags: FLAGS) Py/major.minor.patchlevel). The flags encoded in the user agent are: --duplicate, --force-renew, --allow-subset-of-names, -n, and whether any hooks are set. --user-agent-comment USER_AGENT_COMMENT Add a comment to the default user agent string. May be used when repackaging Certbot or calling it from another tool to allow additional statistical data to be collected. Ignored if --user-agent is set. (Example: Foo-Wrapper/1.0) (default: None) automation: Flags for automating execution & other tweaks --keep-until-expiring, --keep, --reinstall If the requested certificate matches an existing certificate, always keep the existing one until it is due for renewal (for the 'run' subcommand this means reinstall the existing certificate). (default: Ask) --expand If an existing certificate is a strict subset of the requested names, always expand and replace it with the additional names. (default: Ask) --version show program's version number and exit --force-renewal, --renew-by-default If a certificate already exists for the requested domains, renew it now, regardless of whether it is near expiry. (Often --keep-until-expiring is more appropriate). Also implies --expand. (default: False) --renew-with-new-domains If a certificate already exists for the requested certificate name but does not match the requested domains, renew it now, regardless of whether it is near expiry. (default: False) --reuse-key When renewing, use the same private key as the existing certificate. (default: False) --no-reuse-key When renewing, do not use the same private key as the existing certificate. Not reusing private keys is the default behavior of Certbot. This option may be used to unset --reuse-key on an existing certificate. (default: False) --new-key When renewing or replacing a certificate, generate a new private key, even if --reuse-key is set on the existing certificate. Combining --new-key and --reuse- key will result in the private key being replaced and then reused in future renewals. (default: False) --allow-subset-of-names When performing domain validation, do not consider it a failure if authorizations can not be obtained for a strict subset of the requested domains. This may be useful for allowing renewals for multiple domains to succeed even if some domains no longer point at this system. This option cannot be used with --csr. (default: False) --agree-tos Agree to the ACME Subscriber Agreement (default: Ask) --duplicate Allow making a certificate lineage that duplicates an existing one (both can be renewed in parallel) (default: False) -q, --quiet Silence all output except errors. Useful for automation via cron. Implies --non-interactive. (default: False) security: Security parameters & server settings --rsa-key-size N Size of the RSA key. (default: 2048) --key-type {rsa,ecdsa} Type of generated private key. Only *ONE* per invocation can be provided at this time. (default: ecdsa) --elliptic-curve N The SECG elliptic curve name to use. Please see RFC 8446 for supported values. (default: secp256r1) --must-staple Adds the OCSP Must-Staple extension to the certificate. Autoconfigures OCSP Stapling for supported setups (Apache version >= 2.3.3 ). (default: False) --redirect Automatically redirect all HTTP traffic to HTTPS for the newly authenticated vhost. (default: redirect enabled for install and run, disabled for enhance) --no-redirect Do not automatically redirect all HTTP traffic to HTTPS for the newly authenticated vhost. (default: redirect enabled for install and run, disabled for enhance) --hsts Add the Strict-Transport-Security header to every HTTP response. Forcing browser to always use SSL for the domain. Defends against SSL Stripping. (default: None) --uir Add the \"Content-Security-Policy: upgrade-insecure- requests\" header to every HTTP response. Forcing the browser to use https:// for every http:// resource. (default: None) --staple-ocsp Enables OCSP Stapling. A valid OCSP response is stapled to the certificate that the server offers during TLS. (default: None) --strict-permissions Require that all configuration files are owned by the current user; only needed if your config is somewhere unsafe like /tmp/ (default: False) --auto-hsts Gradually increasing max-age value for HTTP Strict Transport Security security header (default: False) testing: The following flags are meant for testing and integration purposes only. --test-cert, --staging Use the staging server to obtain or revoke test (invalid) certificates; equivalent to --server https://acme-staging-v02.api.letsencrypt.org/directory (default: False) --debug Show tracebacks in case of errors (default: False) --no-verify-ssl Disable verification of the ACME server's certificate. The root certificates trusted by Certbot can be overriden by setting the REQUESTS_CA_BUNDLE environment variable. (default: False) --http-01-port HTTP01_PORT Port used in the http-01 challenge. This only affects the port Certbot listens on. A conforming ACME server will still attempt to connect on port 80. (default: 80) --http-01-address HTTP01_ADDRESS The address the server listens to during http-01 challenge. (default: ) --https-port HTTPS_PORT Port used to serve HTTPS. This affects which port Nginx will listen on after a LE certificate is installed. (default: 443) --break-my-certs Be willing to replace or renew valid certificates with invalid (testing/staging) certificates (default: False) paths: Flags for changing execution paths & servers --cert-path CERT_PATH Path to where certificate is saved (with certonly --csr), installed from, or revoked (default: None) --key-path KEY_PATH Path to private key for certificate installation or revocation (if account key is missing) (default: None) --fullchain-path FULLCHAIN_PATH Accompanying path to a full certificate chain (certificate plus chain). (default: None) --chain-path CHAIN_PATH Accompanying path to a certificate chain. (default: None) --config-dir CONFIG_DIR Configuration directory. (default: /etc/letsencrypt) --work-dir WORK_DIR Working directory. (default: /var/lib/letsencrypt) --logs-dir LOGS_DIR Logs directory. (default: /var/log/letsencrypt) --server SERVER ACME Directory Resource URI. (default: https://acme-v02.api.letsencrypt.org/directory) manage: Various subcommands and flags are available for managing your certificates: certificates List certificates managed by Certbot delete Clean up all files related to a certificate renew Renew all certificates (or one specified with --cert- name) revoke Revoke a certificate specified with --cert-path or --cert-name update_symlinks Recreate symlinks in your /etc/letsencrypt/live/ directory run: Options for obtaining & installing certificates certonly: Options for modifying how a certificate is obtained --csr CSR Path to a Certificate Signing Request (CSR) in DER or PEM format. Currently --csr only works with the 'certonly' subcommand. (default: None) renew: The 'renew' subcommand will attempt to renew any certificates previously obtained if they are close to expiry, and print a summary of the results. By default, 'renew' will reuse the plugins and options used to obtain or most recently renew each certificate. You can test whether future renewals will succeed with `--dry-run`. Individual certificates can be renewed with the `--cert-name` option. Hooks are available to run commands before and after renewal; see https://certbot.eff.org/docs/using.html#renewal for more information on these. --pre-hook PRE_HOOK Command to be run in a shell before obtaining any certificates. Intended primarily for renewal, where it can be used to temporarily shut down a webserver that might conflict with the standalone plugin. This will only be called if a certificate is actually to be obtained/renewed. When renewing several certificates that have identical pre-hooks, only the first will be executed. (default: None) --post-hook POST_HOOK Command to be run in a shell after attempting to obtain/renew certificates. Can be used to deploy renewed certificates, or to restart any servers that were stopped by --pre-hook. This is only run if an attempt was made to obtain/renew a certificate. If multiple renewed certificates have identical post- hooks, only one will be run. (default: None) --deploy-hook DEPLOY_HOOK Command to be run in a shell once for each successfully issued certificate. For this command, the shell variable $RENEWED_LINEAGE will point to the config live subdirectory (for example, \"/etc/letsencrypt/live/example.com\") containing the new certificates and keys; the shell variable $ RENEWED_DOMAINS will contain a space-delimited list of renewed certificate domains (for example, \"example.com www.example.com\") (default: None) --disable-hook-validation Ordinarily the commands specified for --pre- hook/--post-hook/--deploy-hook will be checked for validity, to see if the programs being run are in the $ PATH, so that mistakes can be caught early, even when the hooks aren't being run just yet. The validation is rather simplistic and fails if you use more advanced shell constructs, so you can use this switch to disable it. (default: False) --no-directory-hooks Disable running executables found in Certbot's hook directories during renewal. (default: False) --disable-renew-updates Disable automatic updates to your server configuration that would otherwise be done by the selected installer plugin, and triggered when the user executes \"certbot renew\", regardless of if the certificate is renewed. This setting does not apply to important TLS configuration updates. (default: False) --no-autorenew Disable auto renewal of certificates. (default: False) certificates: List certificates managed by Certbot delete: Options for deleting a certificate revoke: Options for revocation of certificates --reason {unspecified,keycompromise,affiliationchanged,superseded,cessationofoperation} Specify reason for revoking certificate. (default: unspecified) --delete-after-revoke Delete certificates after revoking them, along with all previous and later versions of those certificates. (default: None) --no-delete-after-revoke Do not delete certificates after revoking them. This option should be used with caution because the 'renew' subcommand will attempt to renew undeleted revoked certificates. (default: None) register: Options for account registration --register-unsafely-without-email Specifying this flag enables registering an account with no email address. This is strongly discouraged, because you will be unable to receive notice about impending expiration or revocation of your certificates or problems with your Certbot installation that will lead to failure to renew. (default: False) -m EMAIL, --email EMAIL Email used for registration and recovery contact. Use comma to register multiple emails, ex: u1@example.com,u2@example.com. (default: Ask). --eff-email Share your e-mail address with EFF (default: None) --no-eff-email Don't share your e-mail address with EFF (default: None) update_account: Options for account modification unregister: Options for account deactivation. --account ACCOUNT_ID Account ID to use (default: None) install: Options for modifying how a certificate is deployed rollback: Options for rolling back server configuration changes --checkpoints N Revert configuration N number of checkpoints. (default: 1) plugins: Options for the \"plugins\" subcommand --init Initialize plugins. (default: False) --prepare Initialize and prepare plugins. (default: False) --authenticators Limit to authenticator plugins only. (default: None) --installers Limit to installer plugins only. (default: None) update_symlinks: Recreates certificate and key symlinks in /etc/letsencrypt/live, if you changed them by hand or edited a renewal configuration file enhance: Helps to harden the TLS configuration by adding security enhancements to already existing configuration. show_account: Options useful for the \"show_account\" subcommand: plugins: Plugin Selection: Certbot client supports an extensible plugins architecture. See 'certbot plugins' for a list of all installed plugins and their names. You can force a particular plugin by setting options provided below. Running --help <plugin_name> will list flags specific to that plugin. --configurator CONFIGURATOR Name of the plugin that is both an authenticator and an installer. Should not be used together with --authenticator or --installer. (default: Ask) -a AUTHENTICATOR, --authenticator AUTHENTICATOR Authenticator plugin name. (default: None) -i INSTALLER, --installer INSTALLER Installer plugin name (also used to find domains). (default: None) --apache Obtain and install certificates using Apache (default: False) --nginx Obtain and install certificates using Nginx (default: False) --standalone Obtain certificates using a \"standalone\" webserver. (default: False) --manual Provide laborious manual instructions for obtaining a certificate (default: False) --webroot Obtain certificates by placing files in a webroot directory. (default: False) --dns-cloudflare Obtain certificates using a DNS TXT record (if you are using Cloudflare for DNS). (default: False) --dns-digitalocean Obtain certificates using a DNS TXT record (if you are using DigitalOcean for DNS). (default: False) --dns-dnsimple Obtain certificates using a DNS TXT record (if you are using DNSimple for DNS). (default: False) --dns-dnsmadeeasy Obtain certificates using a DNS TXT record (if you are using DNS Made Easy for DNS). (default: False) --dns-gehirn Obtain certificates using a DNS TXT record (if you are using Gehirn Infrastructure Service for DNS). (default: False) --dns-google Obtain certificates using a DNS TXT record (if you are using Google Cloud DNS). (default: False) --dns-linode Obtain certificates using a DNS TXT record (if you are using Linode for DNS). (default: False) --dns-luadns Obtain certificates using a DNS TXT record (if you are using LuaDNS for DNS). (default: False) --dns-nsone Obtain certificates using a DNS TXT record (if you are using NS1 for DNS). (default: False) --dns-ovh Obtain certificates using a DNS TXT record (if you are using OVH for DNS). (default: False) --dns-rfc2136 Obtain certificates using a DNS TXT record (if you are using BIND for DNS). (default: False) --dns-route53 Obtain certificates using a DNS TXT record (if you are using Route53 for DNS). (default: False) --dns-sakuracloud Obtain certificates using a DNS TXT record (if you are using Sakura Cloud for DNS). (default: False) apache: Apache Web Server plugin (Please note that the default values of the Apache plugin options change depending on the operating system Certbot is run on.) --apache-enmod APACHE_ENMOD Path to the Apache 'a2enmod' binary (default: None) --apache-dismod APACHE_DISMOD Path to the Apache 'a2dismod' binary (default: None) --apache-le-vhost-ext APACHE_LE_VHOST_EXT SSL vhost configuration extension (default: -le- ssl.conf) --apache-server-root APACHE_SERVER_ROOT Apache server root directory (default: /etc/apache2) --apache-vhost-root APACHE_VHOST_ROOT Apache server VirtualHost configuration root (default: None) --apache-logs-root APACHE_LOGS_ROOT Apache server logs directory (default: /var/log/apache2) --apache-challenge-location APACHE_CHALLENGE_LOCATION Directory path for challenge configuration (default: /etc/apache2) --apache-handle-modules APACHE_HANDLE_MODULES Let installer handle enabling required modules for you (Only Ubuntu/Debian currently) (default: False) --apache-handle-sites APACHE_HANDLE_SITES Let installer handle enabling sites for you (Only Ubuntu/Debian currently) (default: False) --apache-ctl APACHE_CTL Full path to Apache control script (default: apache2ctl) --apache-bin APACHE_BIN Full path to apache2/httpd binary (default: None) dns-cloudflare: Obtain certificates using a DNS TXT record (if you are using Cloudflare for DNS). --dns-cloudflare-propagation-seconds DNS_CLOUDFLARE_PROPAGATION_SECONDS The number of seconds to wait for DNS to propagate before asking the ACME server to verify the DNS record. (default: 10) --dns-cloudflare-credentials DNS_CLOUDFLARE_CREDENTIALS Cloudflare credentials INI file. (default: None) dns-digitalocean: Obtain certificates using a DNS TXT record (if you are using DigitalOcean for DNS). --dns-digitalocean-propagation-seconds DNS_DIGITALOCEAN_PROPAGATION_SECONDS The number of seconds to wait for DNS to propagate before asking the ACME server to verify the DNS record. (default: 10) --dns-digitalocean-credentials DNS_DIGITALOCEAN_CREDENTIALS DigitalOcean credentials INI file. (default: None) dns-dnsimple: Obtain certificates using a DNS TXT record (if you are using DNSimple for DNS). --dns-dnsimple-propagation-seconds DNS_DNSIMPLE_PROPAGATION_SECONDS The number of seconds to wait for DNS to propagate before asking the ACME server to verify the DNS record. (default: 30) --dns-dnsimple-credentials DNS_DNSIMPLE_CREDENTIALS DNSimple credentials INI file. (default: None) dns-dnsmadeeasy: Obtain certificates using a DNS TXT record (if you are using DNS Made Easy for DNS). --dns-dnsmadeeasy-propagation-seconds DNS_DNSMADEEASY_PROPAGATION_SECONDS The number of seconds to wait for DNS to propagate before asking the ACME server to verify the DNS record. (default: 60) --dns-dnsmadeeasy-credentials DNS_DNSMADEEASY_CREDENTIALS DNS Made Easy credentials INI file. (default: None) dns-gehirn: Obtain certificates using a DNS TXT record (if you are using Gehirn Infrastructure Service for DNS). --dns-gehirn-propagation-seconds DNS_GEHIRN_PROPAGATION_SECONDS The number of seconds to wait for DNS to propagate before asking the ACME server to verify the DNS record. (default: 30) --dns-gehirn-credentials DNS_GEHIRN_CREDENTIALS Gehirn Infrastructure Service credentials file. (default: None) dns-google: Obtain certificates using a DNS TXT record (if you are using Google Cloud DNS for DNS). --dns-google-propagation-seconds DNS_GOOGLE_PROPAGATION_SECONDS The number of seconds to wait for DNS to propagate before asking the ACME server to verify the DNS record. (default: 60) --dns-google-credentials DNS_GOOGLE_CREDENTIALS Path to Google Cloud DNS service account JSON file. (See https://developers.google.com/identity/protocols/ OAuth2ServiceAccount#creatinganaccount forinformation about creating a service account and https://cloud.google.com/dns/access- control#permissions_and_roles for information about therequired permissions.) (default: None) dns-linode: Obtain certificates using a DNS TXT record (if you are using Linode for DNS). --dns-linode-propagation-seconds DNS_LINODE_PROPAGATION_SECONDS The number of seconds to wait for DNS to propagate before asking the ACME server to verify the DNS record. (default: 120) --dns-linode-credentials DNS_LINODE_CREDENTIALS Linode credentials INI file. (default: None) dns-luadns: Obtain certificates using a DNS TXT record (if you are using LuaDNS for DNS). --dns-luadns-propagation-seconds DNS_LUADNS_PROPAGATION_SECONDS The number of seconds to wait for DNS to propagate before asking the ACME server to verify the DNS record. (default: 30) --dns-luadns-credentials DNS_LUADNS_CREDENTIALS LuaDNS credentials INI file. (default: None) dns-nsone: Obtain certificates using a DNS TXT record (if you are using NS1 for DNS). --dns-nsone-propagation-seconds DNS_NSONE_PROPAGATION_SECONDS The number of seconds to wait for DNS to propagate before asking the ACME server to verify the DNS record. (default: 30) --dns-nsone-credentials DNS_NSONE_CREDENTIALS NS1 credentials file. (default: None) dns-ovh: Obtain certificates using a DNS TXT record (if you are using OVH for DNS). --dns-ovh-propagation-seconds DNS_OVH_PROPAGATION_SECONDS The number of seconds to wait for DNS to propagate before asking the ACME server to verify the DNS record. (default: 120) --dns-ovh-credentials DNS_OVH_CREDENTIALS OVH credentials INI file. (default: None) dns-rfc2136: Obtain certificates using a DNS TXT record (if you are using BIND for DNS). --dns-rfc2136-propagation-seconds DNS_RFC2136_PROPAGATION_SECONDS The number of seconds to wait for DNS to propagate before asking the ACME server to verify the DNS record. (default: 60) --dns-rfc2136-credentials DNS_RFC2136_CREDENTIALS RFC 2136 credentials INI file. (default: None) dns-route53: Obtain certificates using a DNS TXT record (if you are using AWS Route53 for DNS). --dns-route53-propagation-seconds DNS_ROUTE53_PROPAGATION_SECONDS The number of seconds to wait for DNS to propagate before asking the ACME server to verify the DNS record. (default: 10) dns-sakuracloud: Obtain certificates using a DNS TXT record (if you are using Sakura Cloud for DNS). --dns-sakuracloud-propagation-seconds DNS_SAKURACLOUD_PROPAGATION_SECONDS The number of seconds to wait for DNS to propagate before asking the ACME server to verify the DNS record. (default: 90) --dns-sakuracloud-credentials DNS_SAKURACLOUD_CREDENTIALS Sakura Cloud credentials file. (default: None) manual: Authenticate through manual configuration or custom shell scripts. When using shell scripts, an authenticator script must be provided. The environment variables available to this script depend on the type of challenge. $CERTBOT_DOMAIN will always contain the domain being authenticated. For HTTP-01 and DNS-01, $CERTBOT_VALIDATION is the validation string, and $CERTBOT_TOKEN is the filename of the resource requested when performing an HTTP-01 challenge. An additional cleanup script can also be provided and can use the additional variable $ CERTBOT_AUTH_OUTPUT which contains the stdout output from the auth script. For both authenticator and cleanup script, on HTTP-01 and DNS-01 challenges, $CERTBOT_REMAINING_CHALLENGES will be equal to the number of challenges that remain after the current one, and $CERTBOT_ALL_DOMAINS contains a comma-separated list of all domains that are challenged for the current certificate. --manual-auth-hook MANUAL_AUTH_HOOK Path or command to execute for the authentication script (default: None) --manual-cleanup-hook MANUAL_CLEANUP_HOOK Path or command to execute for the cleanup script (default: None) nginx: Nginx Web Server plugin --nginx-server-root NGINX_SERVER_ROOT Nginx server root directory. (default: /etc/nginx or /usr/local/etc/nginx) --nginx-ctl NGINX_CTL Path to the 'nginx' binary, used for 'configtest' and retrieving nginx version number. (default: nginx) --nginx-sleep-seconds NGINX_SLEEP_SECONDS Number of seconds to wait for nginx configuration changes to apply when reloading. (default: 1) null: Null Installer standalone: Spin up a temporary webserver webroot: Place files in webroot directory --webroot-path WEBROOT_PATH, -w WEBROOT_PATH public_html / webroot path. This can be specified multiple times to handle different domains; each domain will have the webroot path that preceded it. For instance: `-w /var/www/example -d example.com -d www.example.com -w /var/www/thing -d thing.net -d m.thing.net` (default: Ask) --webroot-map WEBROOT_MAP JSON dictionary mapping domains to webroot paths; this implies -d for each entry. You may need to escape this from your shell. E.g.: --webroot-map '{\"eg1.is,m.eg1.is\":\"/www/eg1/\", \"eg2.is\":\"/www/eg2\"}' This option is merged with, but takes precedence over, -w / -d entries. At present, if you put webroot-map in a config file, it needs to be on a single line, like: webroot-map = {\"example.com\":\"/var/www\"}. (default: {}) \u5f97\u5230\u5e2e\u52a9 \u00b6 \u5982\u679c\u60a8\u6709\u95ee\u9898\uff0c\u6211\u4eec\u5efa\u8bae\u60a8\u5728 Let's Encrypt \u793e\u533a\u8bba\u575b \u4e0a\u53d1\u5e03\u3002. \u5982\u679c\u60a8\u5728\u8f6f\u4ef6\u4e2d\u53d1\u73b0 bug\uff0c\u8bf7\u5728\u6211\u4eec\u7684 \u95ee\u9898\u8ddf\u8e2a\u5668 \u4e2d\u62a5\u544a\u3002 \u8bb0\u5f97\u7ed9\u6211\u4eec\u5c3d\u53ef\u80fd\u591a\u7684\u4fe1\u606f: \u590d\u5236\u5e76\u7c98\u8d34\u6240\u4f7f\u7528\u7684\u547d\u4ee4\u884c\u548c\u8f93\u51fa(\u6ce8\u610f\u540e\u8005\u53ef\u80fd\u5305\u542b\u4e00\u4e9b\u4e2a\u4eba\u8eab\u4efd\u4fe1\u606f\uff0c\u5305\u62ec\u60a8\u7684\u7535\u5b50\u90ae\u4ef6\u548c\u57df\u540d) \u4ece /var/log/letsencrypt \u4e2d\u590d\u5236\u5e76\u7c98\u8d34\u65e5\u5fd7(\u5c3d\u7ba1\u6ce8\u610f\u5b83\u4eec\u4e5f\u53ef\u80fd\u5305\u542b\u4e2a\u4eba\u8eab\u4efd\u4fe1\u606f) \u590d\u5236\u5e76\u7c98\u8d34 certbot --version \u8f93\u51fa \u60a8\u7684\u64cd\u4f5c\u7cfb\u7edf\uff0c\u5305\u62ec\u7279\u5b9a\u7248\u672c \u6307\u5b9a\u60a8\u9009\u62e9\u7684\u5b89\u88c5\u65b9\u6cd5","title":"\u624b\u518c"},{"location":"certbot/using/#_1","text":"","title":"\u7528\u6237\u624b\u518c"},{"location":"certbot/using/#certbot","text":"Certbot \u4f7f\u7528\u8bb8\u591a\u4e0d\u540c\u7684\u547d\u4ee4(\u4e5f\u79f0\u4e3a\u201c\u5b50\u547d\u4ee4\u201d)\u6765\u8bf7\u6c42\u7279\u5b9a\u7684\u64cd\u4f5c\uff0c\u5982\u83b7\u53d6\u3001\u66f4\u65b0\u6216\u64a4\u9500\u8bc1\u4e66\u3002 \u672c\u6587\u6863\u5c06\u8ba8\u8bba\u6700\u91cd\u8981\u548c\u6700\u5e38\u7528\u7684\u547d\u4ee4;\u4e00\u4e2a\u8be6\u5c3d\u7684\u5217\u8868\u4e5f\u51fa\u73b0\u5728\u6587\u6863\u7684\u672b\u5c3e\u3002 \u5982\u679c\u60a8\u7684\u7cfb\u7edf\u4f7f\u7528\u8f83\u65e7\u7684\u5305\uff0cweb \u670d\u52a1\u5668\u4e0a\u7684\u201ccertbot\u201d\u811a\u672c\u53ef\u80fd\u88ab\u547d\u540d\u4e3a\u201cletsencrypt\u201d\u3002 \u5728\u6574\u4e2a\u6587\u6863\u4e2d\uff0c\u65e0\u8bba\u4f55\u65f6\u770b\u5230\u201ccertbot\u201d\uff0c\u8bf7\u6839\u636e\u9700\u8981\u66ff\u6362\u6b63\u786e\u7684\u540d\u79f0\u3002","title":"Certbot \u547d\u4ee4"},{"location":"certbot/using/#_2","text":"Certbot \u5e2e\u52a9\u4f60\u5b8c\u6210\u4e24\u4e2a\u4efb\u52a1: \u83b7\u53d6\u8bc1\u4e66:\u81ea\u52a8\u6267\u884c\u6240\u9700\u7684\u8eab\u4efd\u9a8c\u8bc1\u6b65\u9aa4\u4ee5\u8bc1\u660e\u60a8\u63a7\u5236\u4e86\u57df\uff0c\u5c06\u8bc1\u4e66\u4fdd\u5b58\u5230\u201c/etc/letsencrypt/live/\u201d\u5e76\u5b9a\u671f\u66f4\u65b0\u3002 \u53ef\u9009\u5730\uff0c\u5c06\u8be5\u8bc1\u4e66\u5b89\u88c5\u5230\u53d7\u652f\u6301\u7684 web \u670d\u52a1\u5668(\u5982 Apache \u6216 nginx)\u548c\u5176\u4ed6\u7c7b\u578b\u7684\u670d\u52a1\u5668\u3002\u4e3a\u4e86\u4f7f\u7528\u8bc1\u4e66\uff0c\u53ef\u4ee5\u81ea\u52a8\u4fee\u6539\u670d\u52a1\u5668\u7684\u914d\u7f6e\u3002 \u8981\u83b7\u53d6\u8bc1\u4e66\u5e76\u5b89\u88c5\u5b83\uff0c\u8bf7\u4f7f\u7528 certbot run \u547d\u4ee4(\u6216 certbot \uff0c\u4e24\u8005\u662f\u76f8\u540c\u7684)\u3002 \u5982\u679c\u53ea\u83b7\u53d6\u8bc1\u4e66\u800c\u4e0d\u5c06\u5176\u5b89\u88c5\u5230\u4efb\u4f55\u5730\u65b9\uff0c\u53ef\u4ee5\u4f7f\u7528 certbot certonly (\"certificate only\")\u547d\u4ee4\u3002 \u4e00\u4e9b\u4f7f\u7528 Certbot \u7684\u4f8b\u5b50 # \u83b7\u53d6\u5e76\u5b89\u88c5\u8bc1\u4e66: certbot # \u83b7\u53d6\u8bc1\u4e66\u4f46\u4e0d\u5b89\u88c5: certbot certonly # \u60a8\u53ef\u4ee5\u4f7f\u7528-d\u6307\u5b9a\u591a\u4e2a\u57df\uff0c\u5e76\u901a\u8fc7\u591a\u6b21\u8fd0\u884cCertbot\u6765\u83b7\u53d6\u548c\u5b89\u88c5\u4e0d\u540c\u7684\u8bc1\u4e66: certbot certonly -d example.com -d www.example.com certbot certonly -d app.example.com -d api.example.com \u8981\u6267\u884c\u8fd9\u4e9b\u4efb\u52a1\uff0cCertbot \u5c06\u8981\u6c42\u60a8\u4ece\u8eab\u4efd\u9a8c\u8bc1\u5668\u548c\u5b89\u88c5\u7a0b\u5e8f\u63d2\u4ef6\u4e2d\u8fdb\u884c\u9009\u62e9\u3002 \u9002\u5f53\u7684\u63d2\u4ef6\u9009\u62e9\u5c06\u53d6\u51b3\u4e8e\u60a8\u6b63\u5728\u8fd0\u884c\u7684\u670d\u52a1\u5668\u8f6f\u4ef6\u7c7b\u578b\u4ee5\u53ca\u8ba1\u5212\u4f7f\u7528\u8bc1\u4e66\u7684\u670d\u52a1\u5668\u8f6f\u4ef6\u7c7b\u578b\u3002 \u8eab\u4efd\u9a8c\u8bc1\u5668 \u662f\u81ea\u52a8\u6267\u884c\u6240\u9700\u6b65\u9aa4\u4ee5\u8bc1\u660e\u60a8\u63a7\u5236\u4e86\u60a8\u8bd5\u56fe\u8bf7\u6c42\u8bc1\u4e66\u7684\u57df\u540d\u7684\u63d2\u4ef6\u3002\u9a8c\u8bc1\u8005\u603b\u662f\u9700\u8981\u83b7\u5f97\u8bc1\u4e66\u3002 \u5b89\u88c5\u7a0b\u5e8f \u662f\u53ef\u4ee5\u4f7f\u7528 Certbot \u83b7\u5f97\u7684\u8bc1\u4e66\u81ea\u52a8\u4fee\u6539\u60a8\u7684 web \u670d\u52a1\u5668\u914d\u7f6e\u4ee5\u901a\u8fc7 HTTPS \u670d\u52a1\u60a8\u7684\u7f51\u7ad9\u7684\u63d2\u4ef6\u3002 \u53ea\u6709\u5f53\u60a8\u5e0c\u671b Certbot \u5c06\u8bc1\u4e66\u5b89\u88c5\u5230 web \u670d\u52a1\u5668\u65f6\uff0c\u624d\u9700\u8981\u5b89\u88c5\u7a0b\u5e8f\u3002 \u6709\u4e9b\u63d2\u4ef6\u540c\u65f6\u662f\u9a8c\u8bc1\u5668\u548c\u5b89\u88c5\u5668\uff0c\u53ef\u4ee5\u6307\u5b9a\u9a8c\u8bc1\u5668\u548c\u63d2\u4ef6\u7684\u4e0d\u540c \u7ec4\u5408 \u3002 \u63d2\u4ef6 Auth Inst \u89e3\u91ca \u6311\u6218\u7c7b\u578b(\u548c\u7aef\u53e3) apache Y Y \u4f7f\u7528 Apache \u81ea\u52a8\u83b7\u53d6\u548c\u5b89\u88c5\u8bc1\u4e66\u3002 http-01 (80) nginx Y Y \u4f7f\u7528 Nginx \u81ea\u52a8\u83b7\u53d6\u548c\u5b89\u88c5\u8bc1\u4e66\u3002 http-01 (80) webroot Y N \u901a\u8fc7\u5199\u5165\u5df2\u7ecf\u8fd0\u884c\u7684 web \u670d\u52a1\u5668\u7684 webroot \u76ee\u5f55\u6765\u83b7\u53d6\u8bc1\u4e66\u3002 http-01 (80) standalone Y N \u4f7f\u7528\"standalone\" web \u670d\u52a1\u5668\u83b7\u53d6\u8bc1\u4e66\u3002\u8981\u6c42\u7aef\u53e3 80 \u53ef\u7528\u3002\u8fd9\u5728\u6ca1\u6709 web \u670d\u52a1\u5668\u7684\u7cfb\u7edf\u4e2d\u5f88\u6709\u7528\uff0c\u6216\u8005\u5728\u4e0d\u652f\u6301\u6216\u4e0d\u9700\u8981\u76f4\u63a5\u4e0e\u672c\u5730 web \u670d\u52a1\u5668\u96c6\u6210\u7684\u60c5\u51b5\u4e0b\u5f88\u6709\u7528\u3002 http-01 (80) dns plugs Y N \u8fd9\u7c7b\u63d2\u4ef6\u901a\u8fc7\u4fee\u6539 DNS \u8bb0\u5f55\u6765\u81ea\u52a8\u83b7\u53d6\u8bc1\u4e66\uff0c\u4ee5\u8bc1\u660e\u60a8\u62e5\u6709\u5bf9\u57df\u7684\u63a7\u5236\u6743\u3002\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u8fdb\u884c\u57df\u9a8c\u8bc1\u662f\u4ece Let's Encrypt \u83b7\u5f97\u901a\u914d\u7b26\u8bc1\u4e66\u7684\u552f\u4e00\u65b9\u6cd5\u3002 dns-01 (53) manual Y N \u6839\u636e\u8bf4\u660e\u624b\u52a8\u83b7\u53d6\u8bc1\u4e66\uff0c\u81ea\u884c\u6267\u884c\u57df\u9a8c\u8bc1\u3002\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u521b\u5efa\u7684\u8bc1\u4e66\u4e0d\u652f\u6301\u81ea\u52a8\u66f4\u65b0\u3002\u81ea\u52a8\u66f4\u65b0\u53ef\u4ee5\u901a\u8fc7\u63d0\u4f9b\u4e00\u4e2a\u8eab\u4efd\u9a8c\u8bc1\u94a9\u5b50\u811a\u672c\u6765\u5b9e\u73b0\u57df\u9a8c\u8bc1\u6b65\u9aa4\u7684\u81ea\u52a8\u5316\u3002 http-01 (80) or dns-01 (53) \u5728\u5e95\u5c42\uff0c\u63d2\u4ef6\u4f7f\u7528\u51e0\u4e2a ACME \u534f\u8bae\u6311\u6218\u4e4b\u4e00\u6765\u8bc1\u660e\u60a8\u63a7\u5236\u4e86\u4e00\u4e2a\u57df\u540d\u3002 \u9009\u9879\u662f http-01 (\u4f7f\u7528\u7aef\u53e3 80)\u548c dns-01 (\u9700\u8981\u5728\u7aef\u53e3 53 \u4e0a\u914d\u7f6e DNS \u670d\u52a1\u5668\uff0c\u5c3d\u7ba1\u8fd9\u901a\u5e38\u4e0d\u662f\u60a8\u7684 web \u670d\u52a1\u5668\u7684\u540c\u4e00\u53f0\u673a\u5668)\u3002 \u4e00\u4e9b\u63d2\u4ef6\u652f\u6301\u591a\u79cd\u6311\u6218\u7c7b\u578b\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2a\u5e26\u6709 --preferred-challenges \u7684\u3002 \u8fd8\u6709\u8bb8\u591a \u7b2c\u4e09\u65b9\u63d2\u4ef6 \u53ef\u7528\u3002 \u4e0b\u9762\u6211\u4eec\u5c06\u66f4\u8be6\u7ec6\u5730\u63cf\u8ff0\u6bcf\u4e2a\u63d2\u4ef6\u53ef\u4ee5\u4f7f\u7528\u7684\u60c5\u51b5\uff0c\u4ee5\u53ca\u5982\u4f55\u4f7f\u7528\u5b83\u3002","title":"\u83b7\u5f97\u8bc1\u4e66(\u5e76\u9009\u62e9\u63d2\u4ef6)"},{"location":"certbot/using/#apache","text":"Apache \u63d2\u4ef6\u76ee\u524d \u652f\u6301 \u57fa\u4e8e Debian\u3001Fedora\u3001SUSE\u3001Gentoo\u3001CentOS \u548c Darwin \u7684\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u3002 \u8fd9\u5c06\u81ea\u52a8\u5728 Apache web \u670d\u52a1\u5668\u4e0a\u83b7\u53d6\u548c\u5b89\u88c5\u8bc1\u4e66\u3002 \u8981\u5728\u547d\u4ee4\u884c\u4e0a\u6307\u5b9a\u8fd9\u4e2a\u63d2\u4ef6\uff0c\u53ea\u9700\u5305\u542b --apache \u3002","title":"Apache"},{"location":"certbot/using/#webroot","text":"\u5982\u679c\u4f60\u6b63\u5728\u8fd0\u884c\u4e00\u4e2a\u672c\u5730 web \u670d\u52a1\u5668\uff0c\u4f60\u6709\u80fd\u529b\u4fee\u6539\u6240\u670d\u52a1\u7684\u5185\u5bb9\uff0c\u5e76\u4e14\u4f60\u4e0d\u5e0c\u671b\u5728\u8bc1\u4e66\u9881\u53d1\u8fc7\u7a0b\u4e2d\u505c\u6b62 web \u670d\u52a1\u5668\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 webroot \u63d2\u4ef6\u901a\u8fc7\u5728\u547d\u4ee4\u884c\u4e2d\u5305\u542b certonly \u548c --webroot \u6765\u83b7\u53d6\u8bc1\u4e66\u3002 \u6b64\u5916\uff0c\u4f60\u9700\u8981\u6307\u5b9a --webroot-path \u6216 -w \u4e0e\u9876\u7ea7\u76ee\u5f55( web root )\uff0c\u5176\u4e2d\u5305\u542b\u4f60\u7684 web \u670d\u52a1\u5668\u63d0\u4f9b\u7684\u6587\u4ef6\u3002 \u4f8b\u5982\uff0c --webroot-path /var/www/html \u6216 --webroot-path /usr/share/nginx/html \u662f\u4e24\u79cd\u5e38\u89c1\u7684 webroot \u8def\u5f84\u3002 \u5982\u679c\u60a8\u8981\u540c\u65f6\u83b7\u5f97\u591a\u4e2a\u57df\u7684\u8bc1\u4e66\uff0c\u63d2\u4ef6\u9700\u8981\u77e5\u9053\u6bcf\u4e2a\u57df\u7684\u6587\u4ef6\u662f\u4ece\u54ea\u91cc\u63d0\u4f9b\u7684\uff0c\u8fd9\u53ef\u80fd\u662f\u6bcf\u4e2a\u57df\u7684\u5355\u72ec\u76ee\u5f55\u3002 \u5f53\u4e3a\u591a\u4e2a\u57df\u8bf7\u6c42\u8bc1\u4e66\u65f6\uff0c\u6bcf\u4e2a\u57df\u5c06\u4f7f\u7528\u6700\u8fd1\u6307\u5b9a\u7684 --webroot-path \u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c certbot certonly --webroot -w /var/www/example -d www.example.com -d example.com -w /var/www/other -d other.example.net -d another.other.example.net \u5c06\u4e3a\u6240\u6709\u8fd9\u4e9b\u540d\u79f0\u83b7\u5f97\u4e00\u4e2a\u8bc1\u4e66\uff0c\u524d\u4e24\u4e2a\u4f7f\u7528 /var/www/example webroot \u76ee\u5f55\uff0c\u540e\u4e24\u4e2a\u4f7f\u7528 /var/www/other \u3002 webroot \u63d2\u4ef6\u7684\u5de5\u4f5c\u65b9\u5f0f\u662f\u5728 ${webroot-path}/.well-known/acme-challenge \u4e2d\u4e3a\u6bcf\u4e2a\u8bf7\u6c42\u7684\u57df\u521b\u5efa\u4e00\u4e2a\u4e34\u65f6\u6587\u4ef6\u3002 \u7136\u540e Let's Encrypt \u9a8c\u8bc1\u670d\u52a1\u5668\u53d1\u51fa HTTP \u8bf7\u6c42\uff0c\u4ee5\u9a8c\u8bc1\u6bcf\u4e2a\u8bf7\u6c42\u57df\u7684 DNS \u89e3\u6790\u5230\u8fd0\u884c certbot \u7684\u670d\u52a1\u5668\u3002 \u5411 web \u670d\u52a1\u5668\u53d1\u51fa\u7684\u8bf7\u6c42\u793a\u4f8b\u5982\u4e0b: 66.133.109.36 - - [05/Jan/2016:20:11:24 -0500] \"GET /.well-known/acme-challenge/HGr8U1IeTW4kY_Z6UIyaakzOkyQgPr_7ArlLgtZE8SX HTTP/1.1\" 200 87 \"-\" \"Mozilla/5.0 (compatible; Let's Encrypt validation server; +https://www.letsencrypt.org)\" \u8bf7\u6ce8\u610f\uff0c\u8981\u4f7f\u7528 webroot \u63d2\u4ef6\uff0c\u60a8\u7684\u670d\u52a1\u5668\u5fc5\u987b\u914d\u7f6e\u4e3a\u63d0\u4f9b\u9690\u85cf\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u3002 \u5982\u679c\u4f60\u7684 webserver \u914d\u7f6e\u5bf9 /.well-known \u8fdb\u884c\u4e86\u7279\u6b8a\u5904\u7406\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u4fee\u6539\u914d\u7f6e\uff0c\u4ee5\u786e\u4fdd /.well-known/acme-challenge \u4e2d\u7684\u6587\u4ef6\u7531 webserver \u63d0\u4f9b\u3002 \u5728 Windows \u4e0b\uff0cCertbot \u5c06\u5728 /.well-known/acme-challenge \u4e2d\u751f\u6210\u4e00\u4e2a web.config \u6587\u4ef6\uff0c\u4ee5\u4fbf\u8ba9 IIS \u670d\u52a1\u6311\u6218\u6587\u4ef6\uff0c\u5373\u4f7f\u5b83\u4eec\u6ca1\u6709\u6269\u5c55\u540d\u3002","title":"Webroot"},{"location":"certbot/using/#nginx","text":"Nginx \u63d2\u4ef6\u5e94\u8be5\u9002\u7528\u4e8e\u5927\u591a\u6570\u914d\u7f6e\u3002 \u6211\u4eec\u5efa\u8bae\u5728\u4f7f\u7528 Nginx \u4e4b\u524d\u5907\u4efd\u5b83\u7684\u914d\u7f6e(\u5c3d\u7ba1\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 certbot --nginx rollback \u5c06\u66f4\u6539\u6062\u590d\u5230\u914d\u7f6e)\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u547d\u4ee4\u884c\u4e0a\u63d0\u4f9b --nginx \u6807\u5fd7\u6765\u4f7f\u7528\u5b83\u3002 certbot --nginx","title":"Nginx"},{"location":"certbot/using/#standalone","text":"\u5982\u679c\u4e0d\u60f3\u4f7f\u7528(\u6216\u76ee\u524d\u6ca1\u6709)\u73b0\u6709\u670d\u52a1\u5668\u8f6f\u4ef6\uff0c\u8bf7\u4f7f\u7528\u72ec\u7acb\u6a21\u5f0f\u83b7\u53d6\u8bc1\u4e66\u3002 \u72ec\u7acb\u63d2\u4ef6\u4e0d\u4f9d\u8d56\u4e8e\u5728\u60a8\u83b7\u53d6\u8bc1\u4e66\u7684\u673a\u5668\u4e0a\u8fd0\u884c\u7684\u4efb\u4f55\u5176\u4ed6\u670d\u52a1\u5668\u8f6f\u4ef6\u3002 \u8981\u4f7f\u7528\u201c\u72ec\u7acb\u201dweb \u670d\u52a1\u5668\u83b7\u53d6\u8bc1\u4e66\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u5728\u547d\u4ee4\u884c\u4e2d\u5305\u542b certonly \u548c \u2014\u2014standalone \u6765\u4f7f\u7528\u72ec\u7acb\u63d2\u4ef6\u3002 \u8fd9\u4e2a\u63d2\u4ef6\u9700\u8981\u7ed1\u5b9a\u5230\u7aef\u53e3 80 \u6765\u6267\u884c\u57df\u9a8c\u8bc1\uff0c\u6240\u4ee5\u4f60\u53ef\u80fd\u9700\u8981\u505c\u6b62\u4f60\u73b0\u6709\u7684 web \u670d\u52a1\u5668\u3002 \u60a8\u7684\u673a\u5668\u5fc5\u987b\u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528\u6bcf\u4e2a\u8bf7\u6c42\u7684\u57df\u540d\u5728\u6307\u5b9a\u7aef\u53e3\u4e0a\u63a5\u53d7\u6765\u81ea Internet \u7684\u5165\u7ad9\u8fde\u63a5\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cCertbot \u9996\u5148\u5c1d\u8bd5\u4f7f\u7528 IPv6 \u7ed1\u5b9a\u5230\u6240\u6709\u63a5\u53e3\u7684\u7aef\u53e3\uff0c\u7136\u540e\u4f7f\u7528 IPv4 \u7ed1\u5b9a\u5230\u8be5\u7aef\u53e3;\u53ea\u8981\u81f3\u5c11\u6709\u4e00\u4e2a\u7ed1\u5b9a\u6210\u529f\uff0cCertbot \u5c31\u4f1a\u7ee7\u7eed\u3002\u5728\u5927\u591a\u6570 Linux \u7cfb\u7edf\u4e0a\uff0cIPv4 \u6d41\u91cf\u5c06\u88ab\u8def\u7531\u5230\u7ed1\u5b9a\u7684 IPv6 \u7aef\u53e3\uff0c\u5728\u7b2c\u4e8c\u6b21\u7ed1\u5b9a\u671f\u95f4\u5931\u8d25\u662f\u610f\u6599\u4e4b\u4e2d\u7684\u3002 \u4f7f\u7528 --<challenge-type>-address \u663e\u5f0f\u544a\u8bc9 Certbot \u7ed1\u5b9a\u54ea\u4e2a\u63a5\u53e3(\u548c\u534f\u8bae)\u3002","title":"Standalone"},{"location":"certbot/using/#dns","text":"\u5982\u679c\u4f60\u60f3\u4ece Let's Encrypt \u83b7\u5f97\u4e00\u4e2a\u901a\u914d\u7b26\u8bc1\u4e66\uff0c\u6216\u8005\u5728\u76ee\u6807\u670d\u52a1\u5668\u4ee5\u5916\u7684\u673a\u5668\u4e0a\u8fd0\u884c\u201ccertbot\u201d\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 certbot \u7684 DNS \u63d2\u4ef6\u4e4b\u4e00\u3002 \u8fd9\u4e9b\u63d2\u4ef6\u4e0d\u5305\u542b\u5728\u9ed8\u8ba4\u7684 Certbot \u5b89\u88c5\u4e2d\uff0c\u5fc5\u987b\u5355\u72ec\u5b89\u88c5\u3002 \u5b83\u4eec\u53ef\u4ee5\u4f5c\u4e3a Docker \u6620\u50cf\u548c\u5feb\u7167\u5728\u8bb8\u591a OS \u5305\u7ba1\u7406\u5668\u4e2d\u4f7f\u7528\u3002 \u8bbf\u95ee https://certbot.eff.org \u4e86\u89e3\u5728\u60a8\u7684\u7cfb\u7edf\u4e0a\u4f7f\u7528 DNS \u63d2\u4ef6\u7684\u6700\u4f73\u65b9\u6cd5\u3002 \u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u4f60\u53ef\u4ee5\u5728\u4ee5\u4e0b\u5730\u5740\u627e\u5230\u5982\u4f55\u4f7f\u7528\u6bcf\u4e2a\u63d2\u4ef6\u7684\u6587\u6863: certbot-dns-cloudflare certbot-dns-digitalocean certbot-dns-dnsimple certbot-dns-dnsmadeeasy certbot-dns-gehirn certbot-dns-google certbot-dns-linode certbot-dns-luadns certbot-dns-nsone certbot-dns-ovh certbot-dns-rfc2136 certbot-dns-route53 certbot-dns-sakuracloud","title":"DNS \u63d2\u4ef6"},{"location":"certbot/using/#_3","text":"\u5982\u679c\u4f60\u60f3\u5728\u76ee\u6807\u670d\u52a1\u5668\u4ee5\u5916\u7684\u673a\u5668\u4e0a\u83b7\u5f97\u8fd0\u884c certbot \u7684\u8bc1\u4e66\uff0c\u6216\u8005\u81ea\u5df1\u6267\u884c\u57df\u9a8c\u8bc1\u7684\u6b65\u9aa4\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u624b\u52a8\u63d2\u4ef6\u3002 \u867d\u7136\u9690\u85cf\u5728 UI \u4e2d\uff0c\u4f46\u60a8\u53ef\u4ee5\u4f7f\u7528\u63d2\u4ef6\u901a\u8fc7\u5728\u547d\u4ee4\u884c\u4e0a\u6307\u5b9a certonly \u548c --manual \u6765\u83b7\u53d6\u8bc1\u4e66\u3002 \u8fd9\u8981\u6c42\u60a8\u5c06\u547d\u4ee4\u590d\u5236\u5e76\u7c98\u8d34\u5230\u53e6\u4e00\u4e2a\u7ec8\u7aef\u4f1a\u8bdd\u4e2d\uff0c\u8be5\u4f1a\u8bdd\u53ef\u80fd\u4f4d\u4e8e\u4e0d\u540c\u7684\u8ba1\u7b97\u673a\u4e0a\u3002 \u624b\u52a8\u63d2\u4ef6\u53ef\u4ee5\u4f7f\u7528 http \u6216 dns \u6311\u6218\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528 --preferred-challenges \u9009\u9879\u6765\u9009\u62e9\u60a8\u559c\u6b22\u7684\u6311\u6218\u3002 http \u6311\u6218\u5c06\u8981\u6c42\u60a8\u5c06\u5177\u6709\u7279\u5b9a\u540d\u79f0\u548c\u7279\u5b9a\u5185\u5bb9\u7684\u6587\u4ef6\u76f4\u63a5\u653e\u7f6e\u5728\u9876\u7ea7\u76ee\u5f55( web root )\u7684\u76ee\u5f55\u4e2d\uff0c\u8be5\u76ee\u5f55\u5305\u542b\u60a8\u7684 web \u670d\u52a1\u5668\u63d0\u4f9b\u7684\u6587\u4ef6\u3002 \u672c\u8d28\u4e0a\u5b83\u548c webroot \u63d2\u4ef6\u662f\u4e00\u6837\u7684\uff0c\u4f46\u4e0d\u662f\u81ea\u52a8\u5316\u7684\u3002 \u5f53\u4f7f\u7528 dns \u6311\u6218\u65f6\uff0c certbot \u4f1a\u8981\u6c42\u4f60\u5728\u57df\u540d\u4e0b\u653e\u7f6e\u4e00\u4e2a\u5305\u542b\u7279\u5b9a\u5185\u5bb9\u7684 TXT DNS \u8bb0\u5f55\uff0c\u8be5\u8bb0\u5f55\u7531\u4f60\u60f3\u8981\u9881\u53d1\u8bc1\u4e66\u7684\u4e3b\u673a\u540d\u7ec4\u6210\uff0c\u4ee5 _acme-challenge \u4e3a\u524d\u7f00\u3002 \u5bf9\u4e8e\u57df\u540d example.com \uff0c\u533a\u57df\u6587\u4ef6\u6761\u76ee\u770b\u8d77\u6765\u662f\u8fd9\u6837\u7684 _acme-challenge.example.com. 300 IN TXT \"gfj9Xq...Rg85nM\" \u4f7f\u7528\u624b\u52a8\u63d2\u4ef6\u66f4\u65b0 \u4f7f\u7528 --manual \u521b\u5efa\u7684\u8bc1\u4e66 \u4e0d \u652f\u6301\u81ea\u52a8\u66f4\u65b0\uff0c\u9664\u975e\u901a\u8fc7 --manual-auth-hook \u4e0e \u8ba4\u8bc1\u94a9\u5b50\u811a\u672c \u7ed3\u5408\u4f7f\u7528\uff0c\u4ee5\u81ea\u52a8\u8bbe\u7f6e\u6240\u9700\u7684 HTTP \u548c/\u6216 TXT \u6311\u6218\u3002 \u5982\u679c\u60a8\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u652f\u6301\u81ea\u52a8\u66f4\u65b0\u7684 \u63d2\u4ef6 \u6765\u521b\u5efa\u8bc1\u4e66\uff0c\u5f3a\u70c8\u5efa\u8bae\u60a8\u8fd9\u6837\u505a\u3002 \u5982\u679c\u8981\u624b\u52a8\u66f4\u65b0\u4e0d\u5e26\u94a9\u5b50\u7684 --manual \u8bc1\u4e66\uff0c\u8bf7\u91cd\u590d\u6700\u521d\u521b\u5efa\u8bc1\u4e66\u65f6\u4f7f\u7528\u7684 certbot --manual \u547d\u4ee4\u3002 \u7531\u4e8e\u8fd9\u9700\u8981\u590d\u5236\u548c\u7c98\u8d34\u65b0\u7684 HTTP \u6587\u4ef6\u6216 DNS TXT \u8bb0\u5f55\uff0c\u56e0\u6b64 cron \u4f5c\u4e1a\u4e0d\u80fd\u81ea\u52a8\u6267\u884c\u8be5\u547d\u4ee4\u3002","title":"\u624b\u52a8"},{"location":"certbot/using/#_4","text":"\u6709\u65f6\u60a8\u53ef\u80fd\u5e0c\u671b\u6307\u5b9a\u4e0d\u540c\u7684\u9a8c\u8bc1\u7a0b\u5e8f\u548c\u5b89\u88c5\u7a0b\u5e8f\u63d2\u4ef6\u7684\u7ec4\u5408\u3002 \u4e3a\u6b64\uff0c\u4f7f\u7528 --authenticator \u6216 -a \u6307\u5b9a\u9a8c\u8bc1\u7a0b\u5e8f\u63d2\u4ef6\uff0c\u4f7f\u7528 --installer \u6216 -i \u6307\u5b9a\u5b89\u88c5\u7a0b\u5e8f\u63d2\u4ef6\u3002 \u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 webroot \u63d2\u4ef6\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\uff0c\u4f7f\u7528 apache \u63d2\u4ef6\u8fdb\u884c\u5b89\u88c5\u6765\u521b\u5efa\u8bc1\u4e66\u3002 certbot run -a webroot -i apache -w /var/www/html -d example.com \u6216\u8005\u4f60\u53ef\u4ee5\u4f7f\u7528\u624b\u52a8\u63d2\u4ef6\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\uff0c\u4f7f\u7528 nginx \u63d2\u4ef6\u8fdb\u884c\u5b89\u88c5\u6765\u521b\u5efa\u8bc1\u4e66\u3002(\u6ce8\u610f\u6b64\u8bc1\u4e66\u4e0d\u80fd\u81ea\u52a8\u66f4\u65b0\u3002) certbot run -a manual -i nginx -d example.com","title":"\u7ec4\u5408\u63d2\u4ef6"},{"location":"certbot/using/#_5","text":"\u8fd8\u6709\u8bb8\u591a\u7b2c\u4e09\u65b9\u63d2\u4ef6\uff0c\u7531\u5176\u4ed6\u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u3002\u8bb8\u591a\u662f\u6d4b\u8bd5\u7248/\u8bd5\u9a8c\u6027\u7684\uff0c\u4f46\u6709\u4e9b\u5df2\u7ecf\u88ab\u5e7f\u6cdb\u4f7f\u7528: Plugin Auth Inst Notes haproxy Y Y Integration with the HAProxy load balancer s3front Y Y Integration with Amazon CloudFront distribution of S3 buckets gandi Y N Obtain certificates via the Gandi LiveDNS API varnish Y N Obtain certificates via a Varnish server external-auth Y Y A plugin for convenient scripting pritunl N Y Install certificates in pritunl distributed OpenVPN servers proxmox N Y Install certificates in Proxmox Virtualization servers dns-standalone Y N Obtain certificates via an integrated DNS server dns-ispconfig Y N DNS Authentication using ISPConfig as DNS server dns-clouddns Y N DNS Authentication using CloudDNS API dns-lightsail Y N DNS Authentication using Amazon Lightsail DNS API dns-inwx Y Y DNS Authentication for INWX through the XML API dns-azure Y N DNS Authentication using Azure DNS dns-godaddy Y N DNS Authentication using Godaddy DNS dns-yandexcloud Y N DNS Authentication using Yandex Cloud DNS dns-bunny Y N DNS Authentication using BunnyDNS njalla Y N DNS Authentication for njalla DuckDNS Y N DNS Authentication for DuckDNS Porkbun Y N DNS Authentication for Porkbun Infomaniak Y N DNS Authentication using Infomaniak Domains API dns-multi Y N DNS authentication of 100+ providers using go-acme/lego \u5982\u679c\u4f60\u611f\u5174\u8da3\uff0c\u4f60\u4e5f\u53ef\u4ee5 \u7f16\u5199\u81ea\u5df1\u7684\u63d2\u4ef6 .","title":"\u7b2c\u4e09\u65b9\u63d2\u4ef6"},{"location":"certbot/using/#_6","text":"\u8981\u67e5\u770b Certbot \u77e5\u9053\u7684\u8bc1\u4e66\u5217\u8868\uff0c\u8fd0\u884c certificates \u5b50\u547d\u4ee4: certbot certificates \u8fd9\u5c06\u4ee5\u4ee5\u4e0b\u683c\u5f0f\u8fd4\u56de\u4fe1\u606f Found the following certificates: Certificate Name: example.com Domains: example.com, www.example.com Expiry Date: 2017-02-19 19:53:00+00:00 (VALID: 30 days) Certificate Path: /etc/letsencrypt/live/example.com/fullchain.pem Key Type: RSA Private Key Path: /etc/letsencrypt/live/example.com/privkey.pem Certificate Name \u663e\u793a\u8bc1\u4e66\u7684\u540d\u79f0\u3002 \u4f7f\u7528 --cert-name \u6807\u5fd7\u4f20\u9012\u8be5\u540d\u79f0\uff0c\u4e3a run , certonly , certificates , renew , \u548c delete \u547d\u4ee4\u6307\u5b9a\u4e00\u4e2a\u7279\u5b9a\u7684\u8bc1\u4e66\u3002 Example certbot certonly --cert-name example.com","title":"\u7ba1\u7406\u8bc1\u4e66"},{"location":"certbot/using/#_7","text":"You can use certonly or run subcommands to request the creation of a single new certificate even if you already have an existing certificate with some of the same domain names. If a certificate is requested with run or certonly specifying a certificate name that already exists, Certbot updates the existing certificate. Otherwise a new certificate is created and assigned the specified name. The --force-renewal , --duplicate , and --expand options control Certbot's behavior when re-creating a certificate with the same name as an existing certificate. If you don't specify a requested behavior, Certbot may ask you what you intended. --force-renewal tells Certbot to request a new certificate with the same domains as an existing certificate. Each domain must be explicitly specified via -d . If successful, this certificate is saved alongside the earlier one and symbolic links (the \" live \" reference) will be updated to point to the new certificate. This is a valid method of renewing a specific individual certificate. --duplicate tells Certbot to create a separate, unrelated certificate with the same domains as an existing certificate. This certificate is saved completely separately from the prior one. Most users will not need to issue this command in normal circumstances. --expand tells Certbot to update an existing certificate with a new certificate that contains all of the old domains and one or more additional new domains. With the --expand option, use the -d option to specify all existing domains and one or more new domains. Example: certbot --expand -d existing.com,example.com,newdomain.com If you prefer, you can specify the domains individually like this: certbot --expand -d existing.com -d example.com -d newdomain.com Consider using --cert-name instead of --expand , as it gives more control over which certificate is modified and it lets you remove domains as well as adding them. --allow-subset-of-names tells Certbot to continue with certificate generation if only some of the specified domain authorizations can be obtained. This may be useful if some domains specified in a certificate no longer point at this system. Whenever you obtain a new certificate in any of these ways, the new certificate exists alongside any previously obtained certificates, whether or not the previous certificates have expired. The generation of a new certificate counts against several rate limits that are intended to prevent abuse of the ACME protocol, as described here .","title":"\u91cd\u65b0\u521b\u5efa\u548c\u66f4\u65b0\u5df2\u6709\u8bc1\u4e66"},{"location":"certbot/using/#_8","text":"The --cert-name flag can also be used to modify the domains a certificate contains, by specifying new domains using the -d or --domains flag. If certificate example.com previously contained example.com and www.example.com , it can be modified to only contain example.com by specifying only example.com with the -d or --domains flag. Example:: certbot certonly --cert-name example.com -d example.com The same format can be used to expand the set of domains a certificate contains, or to replace that set entirely:: certbot certonly --cert-name example.com -d example.org,www.example.org","title":"\u66f4\u6539\u8bc1\u4e66\u7684\u57df"},{"location":"certbot/using/#rsa-ecdsa","text":"Certbot \u652f\u6301\u4e24\u79cd\u8bc1\u4e66\u79c1\u94a5\u7b97\u6cd5: rsa \u548c ecdsa \u3002 \u4ece\u7248\u672c 2.0.0 \u5f00\u59cb\uff0cCertbot \u5bf9\u6240\u6709\u65b0\u8bc1\u4e66\u9ed8\u8ba4\u4f7f\u7528 ECDSA secp256r1 (P-256)\u8bc1\u4e66\u79c1\u94a5\u3002 \u73b0\u6709\u8bc1\u4e66\u5c06\u7ee7\u7eed\u4f7f\u7528\u5176\u73b0\u6709\u5bc6\u94a5\u7c7b\u578b\u8fdb\u884c\u66f4\u65b0\uff0c\u9664\u975e\u8bf7\u6c42\u66f4\u6539\u5bc6\u94a5\u7c7b\u578b\u3002 Certbot \u4f7f\u7528\u7684\u5bc6\u94a5\u7c7b\u578b\u53ef\u4ee5\u901a\u8fc7 --key-type \u9009\u9879\u6765\u63a7\u5236\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528 --elliptic-curve \u9009\u9879\u6765\u63a7\u5236 ECDSA \u8bc1\u4e66\u4e2d\u4f7f\u7528\u7684\u66f2\u7ebf\uff0c\u4f7f\u7528 --rsa-key-size \u9009\u9879\u6765\u63a7\u5236 RSA \u5bc6\u94a5\u7684\u5927\u5c0f\u3002 Warning \u5982\u679c\u4f7f\u7528ECDSA\u5bc6\u94a5\u83b7\u53d6\u8bc1\u4e66\uff0c\u5e94\u6ce8\u610f\u4e0d\u8981\u964d\u7ea7\u5230\u4e0d\u652f\u6301ECDSA\u5bc6\u94a5\u76841.10.0\u4e4b\u524d\u7684Certbot\u7248\u672c\u3002 \u5982\u679c\u4f60\u4ecesnap\u6216pip\u4e4b\u7c7b\u7684\u8f6f\u4ef6\u5305\u5207\u6362\u5230\u901a\u5e38\u6ede\u540e\u7684\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u7684\u8f6f\u4ef6\u5305\uff0c\u5c31\u6709\u53ef\u80fd\u51fa\u73b0\u8fd9\u6837\u7684\u964d\u7ea7\u3002","title":"RSA \u548c ECDSA \u94a5\u5319"},{"location":"certbot/using/#_9","text":"\u5982\u679c\u60a8\u60f3\u66f4\u6539\u5355\u4e2a\u8bc1\u4e66\u4ee5\u4f7f\u7528 ECDSA \u5bc6\u94a5\uff0c\u60a8\u9700\u8981\u5728\u547d\u4ee4\u884c\u4e0a\u8bbe\u7f6e --key-type ecdsa \u65f6\u521b\u5efa\u6216\u66f4\u65b0\u8bc1\u4e66: certbot renew --key-type ecdsa --cert-name example.com --force-renewal \u5982\u679c\u60a8\u5e0c\u671b\u5c06\u6765\u5bf9\u6240\u6709\u8bc1\u4e66\u4f7f\u7528 ECDSA \u5bc6\u94a5(\u5305\u62ec\u73b0\u6709\u8bc1\u4e66\u7684\u66f4\u65b0)\uff0c\u53ef\u4ee5\u5728 Certbot \u7684[\u914d\u7f6e\u6587\u4ef6][config-file]\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u884c key-type = ecdsa \u8be5\u6761\u4f8b\u5c06\u4e8e\u6bcf\u6b21\u8bc1\u4e66\u7eed\u671f\u65f6\u751f\u6548\u3002","title":"\u66f4\u6539\u8bc1\u4e66\u7684\u5bc6\u94a5\u7c7b\u578b"},{"location":"certbot/using/#_10","text":"\u5982\u679c\u60a8\u9700\u8981\u64a4\u9500\u8bc1\u4e66\uff0c\u8bf7\u4f7f\u7528 revoke \u5b50\u547d\u4ee4\u6765\u6267\u884c\u3002 \u8bc1\u4e66\u53ef\u4ee5\u901a\u8fc7\u63d0\u4f9b\u5176\u540d\u79f0(\u53c2\u89c1 certbot certificates )\u6216\u76f4\u63a5\u63d0\u4f9b\u5176\u8def\u5f84\u6765\u64a4\u9500 certbot revoke --cert-name example.com certbot revoke --cert-path /etc/letsencrypt/live/example.com/cert.pem \u5982\u679c\u88ab\u64a4\u9500\u7684\u8bc1\u4e66\u662f\u901a\u8fc7 --staging , --test-cert \u6216\u975e\u9ed8\u8ba4\u7684 --server \u6807\u5fd7\u83b7\u5f97\u7684\uff0c\u5219\u8be5\u6807\u5fd7\u5fc5\u987b\u4f20\u9012\u7ed9 revoke \u5b50\u547d\u4ee4\u3002 Note \u5728\u64a4\u9500\u8bc1\u4e66\u540e\uff0cCertbot\u5c06(\u9ed8\u8ba4\u60c5\u51b5\u4e0b)\u8be2\u95ee\u60a8\u662f\u5426\u8981 \u5220\u9664 \u8bc1\u4e66\u3002 \u9664\u975e\u5220\u9664\uff0c\u5426\u5219Certbot\u5c06\u5728 certbot renew \u4e0b\u6b21\u8fd0\u884c\u65f6\u5c1d\u8bd5\u66f4\u65b0\u5df2\u64a4\u9500\u7684\u8bc1\u4e66\u3002 You can also specify the reason for revoking your certificate by using the reason flag. Reasons include unspecified which is the default, as well as keycompromise , affiliationchanged , superseded , and cessationofoperation certbot revoke --cert-name example.com --reason keycompromise Revoking by account key or certificate private key By default, Certbot will try revoke the certificate using your ACME account key. If the certificate was created from the same ACME account, the revocation will be successful. If you instead have the corresponding private key file to the certificate you wish to revoke, use --key-path to perform the revocation from any ACME account certbot revoke --cert-path /etc/letsencrypt/live/example.com/cert.pem --key-path /etc/letsencrypt/live/example.com/privkey.pem","title":"\u64a4\u9500\u8bc1\u4e66"},{"location":"certbot/using/#_11","text":"\u5982\u679c\u60a8\u9700\u8981\u5220\u9664\u8bc1\u4e66\uff0c\u8bf7\u4f7f\u7528 delete \u5b50\u547d\u4ee4\u3002 Note \u8bf7\u4ed4\u7ec6\u9605\u8bfb\u672c\u6587\u548c \u5b89\u5168\u5220\u9664\u8bc1\u4e66 \u90e8\u5206\u3002\u8fd9\u662f\u4e00\u4e2a\u4e0d\u53ef\u9006\u7684\u624b\u672f\uff0c\u5fc5\u987b\u5c0f\u5fc3\u64cd\u4f5c\u3002 Certbot does not automatically revoke a certificate before deleting it. If you're no longer using a certificate and don't plan to use it anywhere else, you may want to follow the instructions in Revoking certificates _ instead. Generally, there's no need to revoke a certificate if its private key has not been compromised, but you may still receive expiration emails from Let's Encrypt unless you revoke. Note Do not manually delete certificate files from inside /etc/letsencrypt/ . Always use the delete subcommand. A certificate may be deleted by providing its name with --cert-name . You may find its name using certbot certificates . Otherwise, you will be prompted to choose one or more certificates to delete certbot delete --cert-name example.com ## or to choose from a list: certbot delete","title":"\u5220\u9664\u8bc1\u4e66"},{"location":"certbot/using/#safely-deleting-certificates","text":"Deleting a certificate without following the proper steps can result in a non-functioning server. To safely delete a certificate, follow all the steps below to make sure that references to a certificate are removed from the configuration of any installed server software (Apache, nginx, Postfix, etc) before deleting the certificate. To explain further, when installing a certificate, Certbot modifies Apache or nginx's configuration to load the certificate and its private key from the /etc/letsencrypt/live/ directory. Before deleting a certificate, it is necessary to undo that modification, by removing any references to the certificate from the webserver's configuration files. Follow these steps to safely delete a certificate: Find all references to the certificate (substitute example.com in the command for the name of the certificate you wish to delete) sudo bash -c 'grep -R live/example.com /etc/{nginx,httpd,apache2}' If there are no references found, skip directly to Step 4. If some references are found, they will look something like /etc/apache2/sites-available/000-default-le-ssl.conf:SSLCertificateFile /etc/letsencrypt/live/example.com/fullchain.pem /etc/apache2/sites-available/000-default-le-ssl.conf:SSLCertificateKeyFile /etc/letsencrypt/live/example.com/privkey.pem You will need a self-signed certificate to replace the certificate you are deleting. The following command will generate one for you, saving the certificate at /etc/letsencrypt/self-signed-cert.pem and its private key at /etc/letsencrypt/self-signed-privkey.pem sudo openssl req -nodes -batch -x509 -newkey rsa:2048 -keyout /etc/letsencrypt/self-signed-privkey.pem -out /etc/letsencrypt/self-signed-cert.pem -days 356 For each reference found in Step 1, open the file in a text editor and replace the reference to the existing certificate with a reference to the self-signed certificate. Continuing from the previous example, you would open /etc/apache2/sites-available/000-default-le-ssl.conf in a text editor and modify the two matching lines of text to instead say SSLCertificateFile /etc/letsencrypt/self-signed-cert.pem SSLCertificateKeyFile /etc/letsencrypt/self-signed-privkey.pem It is now safe to delete the certificate. Do so by running sudo certbot delete --cert-name example.com","title":"Safely deleting certificates"},{"location":"certbot/using/#_12","text":"Note \u8ba9\u6211\u4eec\u52a0\u5bc6CA\u9881\u53d1\u77ed\u547d\u8bc1\u4e66(90\u5929)\u3002\u8bf7\u786e\u4fdd\u60a8\u81f3\u5c11\u6bcf3\u4e2a\u6708\u66f4\u65b0\u4e00\u6b21\u8bc1\u4e66\u3002 Quote \u5927\u591a\u6570Certbot\u5b89\u88c5\u90fd\u5e26\u6709\u81ea\u52a8\u66f4\u65b0\u529f\u80fd\u3002\u8be6\u60c5\u8bf7\u53c2\u89c1 \u81ea\u52a8\u7eed\u8ba2 \u3002 Quote Manual \u63d2\u4ef6\u7684\u7528\u6237\u5e94\u8be5\u6ce8\u610f\uff0c --manual \u8bc1\u4e66\u4e0d\u4f1a\u81ea\u52a8\u66f4\u65b0\uff0c\u9664\u975e\u7ed3\u5408\u4e86\u8eab\u4efd\u9a8c\u8bc1\u94a9\u5b50\u811a\u672c\u3002 \u67e5\u770b ` \u4f7f\u7528\u624b\u52a8\u63d2\u4ef6\u66f4\u65b0 . As of version 0.10.0, Certbot supports a renew action to check all installed certificates for impending expiry and attempt to renew them. The simplest form is simply certbot renew This command attempts to renew any previously-obtained certificates that expire in less than 30 days. The same plugin and options that were used at the time the certificate was originally issued will be used for the renewal attempt, unless you specify other plugins or options. Unlike certonly , renew acts on multiple certificates and always takes into account whether each one is near expiry. Because of this, renew is suitable (and designed) for automated use, to allow your system to automatically renew each certificate when appropriate. Since renew only renews certificates that are near expiry it can be run as frequently as you want - since it will usually take no action. The renew command includes hooks for running commands or scripts before or after a certificate is renewed. For example, if you have a single certificate obtained using the standalone_ plugin, you might need to stop the webserver before renewing so standalone can bind to the necessary ports, and then restart it after the plugin is finished. Example:: certbot renew --pre-hook \"service nginx stop\" --post-hook \"service nginx start\" If a hook exits with a non-zero exit code, the error will be printed to stderr but renewal will be attempted anyway. A failing hook doesn't directly cause Certbot to exit with a non-zero exit code, but since Certbot exits with a non-zero exit code when renewals fail, a failed hook causing renewal failures will indirectly result in a non-zero exit code. Hooks will only be run if a certificate is due for renewal, so you can run the above command frequently without unnecessarily stopping your webserver. When Certbot detects that a certificate is due for renewal, --pre-hook and --post-hook hooks run before and after each attempt to renew it. If you want your hook to run only after a successful renewal, use --deploy-hook in a command like this. certbot renew --deploy-hook /path/to/deploy-hook-script You can also specify hooks by placing files in subdirectories of Certbot's configuration directory. Assuming your configuration directory is /etc/letsencrypt , any executable files found in /etc/letsencrypt/renewal-hooks/pre , /etc/letsencrypt/renewal-hooks/deploy , and /etc/letsencrypt/renewal-hooks/post will be run as pre, deploy, and post hooks respectively when any certificate is renewed with the renew subcommand. These hooks are run in alphabetical order and are not run for other subcommands. (The order the hooks are run is determined by the byte value of the characters in their filenames and is not dependent on your locale.) Hooks specified in the command line, :ref: configuration file <config-file> , or :ref: renewal configuration files <renewal-config-file> are run as usual after running all hooks in these directories. One minor exception to this is if a hook specified elsewhere is simply the path to an executable file in the hook directory of the same type (e.g. your pre-hook is the path to an executable in /etc/letsencrypt/renewal-hooks/pre ), the file is not run a second time. You can stop Certbot from automatically running executables found in these directories by including --no-directory-hooks on the command line. More information about hooks can be found by running certbot --help renew . If you're sure that this command executes successfully without human intervention, you can add the command to crontab (since certificates are only renewed when they're determined to be near expiry, the command can run on a regular basis, like every week or every day). In that case, you are likely to want to use the -q or --quiet quiet flag to silence all output except errors. If you are manually renewing all of your certificates, the --force-renewal flag may be helpful; it causes the expiration time of the certificate(s) to be ignored when considering renewal, and attempts to renew each and every installed certificate regardless of its age. (This form is not appropriate to run daily because each certificate will be renewed every day, which will quickly run into the certificate authority rate limit.) Note that options provided to certbot renew will apply to every certificate for which renewal is attempted; for example, certbot renew --rsa-key-size 4096 would try to replace every near-expiry certificate with an equivalent certificate using a 4096-bit RSA public key. If a certificate is successfully renewed using specified options, those options will be saved and used for future renewals of that certificate. An alternative form that provides for more fine-grained control over the renewal process (while renewing specified certificates one at a time), is certbot certonly with the complete set of subject domains of a specific certificate specified via -d flags. You may also want to include the -n or --noninteractive flag to prevent blocking on user input (which is useful when running the command from cron). certbot certonly -n -d example.com -d www.example.com All of the domains covered by the certificate must be specified in this case in order to renew and replace the old certificate rather than obtaining a new one; don't forget any www. domains! Specifying a subset of the domains creates a new, separate certificate containing only those domains, rather than replacing the original certificate. When run with a set of domains corresponding to an existing certificate, the certonly command attempts to renew that specific certificate. Please note that the CA will send notification emails to the address you provide if you do not renew certificates that are about to expire. Certbot is working hard to improve the renewal process, and we apologize for any inconvenience you encounter in integrating these commands into your individual environment. Note certbot renew exit status will only be 1 if a renewal attempt failed. This means certbot renew exit status will be 0 if no certificate needs to be updated. If you write a custom script and expect to run a command only after a certificate was actually renewed you will need to use the --deploy-hook since the exit status will be 0 both on successful renewal and when renewal is not necessary. .. _renewal-config-file: .. _Modifying the Renewal Configuration File:","title":"\u66f4\u65b0\u7684\u8bc1\u4e66"},{"location":"certbot/using/#_13","text":"\u5728\u521b\u5efa\u8bc1\u4e66\u65f6\uff0cCertbot \u5c06\u8ddf\u8e2a\u7528\u6237\u9009\u62e9\u7684\u6240\u6709\u76f8\u5173\u9009\u9879\u3002 \u5728\u66f4\u65b0\u65f6\uff0cCertbot \u5c06\u8bb0\u4f4f\u8fd9\u4e9b\u9009\u9879\u5e76\u518d\u6b21\u5e94\u7528\u5b83\u4eec\u3002 \u6709\u65f6\uff0c\u60a8\u53ef\u80fd\u4f1a\u9047\u5230\u9700\u8981\u66f4\u6539\u5176\u4e2d\u4e00\u4e9b\u9009\u9879\u4ee5\u7528\u4e8e\u5c06\u6765\u7684\u8bc1\u4e66\u66f4\u65b0\u3002 \u4e3a\u6b64\uff0c\u60a8\u9700\u8981\u6267\u884c\u4ee5\u4e0b\u6b65\u9aa4: Perform a dry run renewal with the amended options on the command line. This allows you to confirm that the change is valid and will result in successful future renewals. If the dry run is successful, perform a live renewal of the certificate. This will persist the change for future renewals. If the certificate is not yet due to expire, you will need to force a renewal using --force-renewal . Note \u8bc1\u4e66\u9881\u53d1\u673a\u6784\u7684\u8d39\u7387\u9650\u5236\u53ef\u80fd\u4f1a\u963b\u6b62\u60a8\u5728\u77ed\u65f6\u95f4\u5185\u6267\u884c\u591a\u6b21\u66f4\u65b0 period of time. It is strongly recommended to perform the second step only once, when you have decided on what options should change. As a practical example, if you were using the webroot authenticator and had relocated your website to another directory, you would need to change the --webroot-path to the new directory. Following the above advice: Perform a dry-run renewal of the individual certificate with the amended options:: certbot renew --cert-name example.com --webroot-path /path/to/new/location --dry-run If the dry-run was successful, make the change permanent by performing a live renewal of the certificate with the amended options, including --force-renewal :: certbot renew --cert-name example.com --webroot-path /path/to/new/location --force-renewal --cert-name selects the particular certificate to be modified. Without this option, all certificates will be selected. --webroot-path is the option intended to be changed. All other previously selected options will be kept the same and do not need to be included in the command. For advanced certificate management tasks, it is also possible to manually modify the certificate's renewal configuration file, but this is discouraged since it can easily break Certbot's ability to renew your certificates. These renewal configuration files are located at /etc/letsencrypt/renewal/CERTNAME.conf . If you choose to modify the renewal configuration file we advise you to make a backup of the file beforehand and test its validity with the certbot renew --dry-run command. .. warning:: Manually modifying files under /etc/letsencrypt/renewal/ can damage them if done improperly and we do not recommend doing so.","title":"\u4fee\u6539\u5df2\u6709\u8bc1\u4e66\u7684\u66f4\u65b0\u914d\u7f6e"},{"location":"certbot/using/#_14","text":"Most Certbot installations come with automatic renewals preconfigured. This is done by means of a scheduled task which runs certbot renew periodically. If you are unsure whether you need to configure automated renewal: Review the instructions for your system and installation method at https://certbot.eff.org/instructions. They will describe how to set up a scheduled task, if necessary. If no step is listed, your system comes with automated renewal pre-installed, and you should not need to take any additional actions. On Linux and BSD, you can check to see if your installation method has pre-installed a timer for you. To do so, look for the certbot renew command in either your system's crontab (typically /etc/crontab or /etc/cron.*/* ) or systemd timers ( systemctl list-timers ). If you're still not sure, you can configure automated renewal manually by following the steps in the next section. Certbot has been carefully engineered to handle the case where both manual automated renewal and pre-installed automated renewal are set up. Setting up automated renewal If you think you may need to set up automated renewal, follow these instructions to set up a scheduled task to automatically renew your certificates in the background. If you are unsure whether your system has a pre-installed scheduled task for Certbot, it is safe to follow these instructions to create one. Note If you're using Windows, these instructions are not neccessary as Certbot on Windows comes with a scheduled task for automated renewal pre-installed. If you are using macOS and installed Certbot using Homebrew, follow the instructions at https://certbot.eff.org/instructions to set up automated renewal. The instructions below are not applicable on macOS. Run the following line, which will add a cron job to /etc/crontab : SLEEPTIME = $( awk 'BEGIN{srand(); print int(rand()_(3600+1))}' ) ; echo \"0 0,12 _ \\* \\* root sleep $SLEEPTIME && certbot renew -q\" | sudo tee -a /etc/crontab > /dev/null If you needed to stop your webserver to run Certbot, you'll want to add pre and post hooks to stop and start your webserver automatically. For example, if your webserver is HAProxy, run the following commands to create the hook files in the appropriate directory: sudo sh -c 'printf \"#!/bin/sh\\nservice haproxy stop\\n\" > /etc/letsencrypt/renewal-hooks/pre/haproxy.sh' sudo sh -c 'printf \"#!/bin/sh\\nservice haproxy start\\n\" > /etc/letsencrypt/renewal-hooks/post/haproxy.sh' sudo chmod 755 /etc/letsencrypt/renewal-hooks/pre/haproxy.sh sudo chmod 755 /etc/letsencrypt/renewal-hooks/post/haproxy.sh Congratulations, Certbot will now automatically renew your certificates in the background. If you are interested in learning more about how Certbot renews your certificates, see the Renewing certificates _ section above.","title":"\u81ea\u52a8\u66f4\u65b0"},{"location":"certbot/using/#_15","text":"\u6240\u6709\u751f\u6210\u7684\u5bc6\u94a5\u548c\u9881\u53d1\u7684\u8bc1\u4e66\u90fd\u53ef\u4ee5\u5728 /etc/letsencrypt/live/$domain \u4e2d\u627e\u5230\uff0c\u5176\u4e2d $domain \u662f\u8bc1\u4e66\u540d\u79f0(\u53c2\u89c1\u4e0b\u9762\u7684\u8bf4\u660e)\u3002 \u4e0d\u8981\u590d\u5236\uff0c\u8bf7\u5c06\u60a8\u7684(web)\u670d\u52a1\u5668\u914d\u7f6e\u76f4\u63a5\u6307\u5411\u8fd9\u4e9b\u6587\u4ef6(\u6216\u521b\u5efa\u7b26\u53f7\u94fe\u63a5)\u3002 \u5728\u66f4\u65b0\u671f\u95f4\uff0c /etc/letsencrypt/live \u5c06\u4f7f\u7528\u6700\u65b0\u7684\u5fc5\u8981\u6587\u4ef6\u8fdb\u884c\u66f4\u65b0\u3002 Note \u5728\u8def\u5f84 /etc/letsencrypt/live/$domain \u4e2d\u4f7f\u7528\u7684\u8bc1\u4e66\u540d\u79f0 $domain \u9075\u5faa\u4ee5\u4e0b\u7ea6\u5b9a: \u8fd9\u662f\u5b83\u7684\u540d\u5b57 --cert-name , \u5982\u679c\u7528\u6237\u6ca1\u6709\u8bbe\u7f6e --cert-name \uff0c\u5b83\u662f\u7ed9 --domains \u7684\u7b2c\u4e00\u4e2a\u57df\uff0c \u5982\u679c\u7b2c\u4e00\u4e2a\u57df\u662f\u901a\u914d\u7b26\u57df(\u4f8b\u5982; *.example.com )\u8bc1\u4e66\u540d\u79f0\u5c06\u4e3a example.com \uff0c \u5982\u679c\u4e0e\u5df2\u547d\u540d\u4e3a example.com \u7684\u8bc1\u4e66\u53d1\u751f\u540d\u79f0\u51b2\u7a81\uff0c\u5219\u5c06\u4f7f\u7528 example.com-001 \u6570\u5b57\u5e8f\u5217\u6784\u9020\u65b0\u7684\u8bc1\u4e66\u540d\u79f0\u3002. \u7531\u4e8e\u5386\u53f2\u539f\u56e0\uff0c\u5305\u542b\u76ee\u5f55\u7684\u521b\u5efa\u6743\u9650\u4e3a 0700 \uff0c\u8fd9\u610f\u5473\u7740\u53ea\u6709\u4f5c\u4e3a\u6839\u7528\u6237\u8fd0\u884c\u7684\u670d\u52a1\u5668\u624d\u80fd\u8bbf\u95ee\u8bc1\u4e66\u3002 \u5982\u679c\u4f60\u6c38\u8fdc\u4e0d\u4f1a\u964d\u7ea7\u5230\u65e7\u7248\u672c\u7684 Certbot \uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u4f7f\u7528 chmod 0755 /etc/letsencrypt/{live,archive} \u6765\u5b89\u5168\u5730\u4fee\u590d\u8fd9\u4e2a\u95ee\u9898\u3002 \u5bf9\u4e8e\u5728\u5c1d\u8bd5\u8bfb\u53d6\u79c1\u94a5\u6587\u4ef6\u4e4b\u524d\u653e\u5f03\u6839\u6743\u9650\u7684\u670d\u52a1\u5668\uff0c\u60a8\u8fd8\u9700\u8981\u4f7f\u7528 chgrp \u548c chmod 0640 \u6765\u5141\u8bb8\u670d\u52a1\u5668\u8bfb\u53d6 /etc/letsencrypt/live/$domain/privkey.pem \u3002 Note /etc/letsencrypt/archive \u548c /etc/letsencrypt/keys \u5305\u542b\u6240\u6709\u4ee5\u524d\u7684\u5bc6\u94a5\u548c\u8bc1\u4e66\uff0c \u800c /etc/letsencrypt/live \u7b26\u53f7\u94fe\u63a5\u5230\u6700\u65b0\u7248\u672c\u3002 \u5df2\u83b7\u53d6\u4ee5\u4e0b\u6587\u4ef6: privkey.pem \u8bc1\u4e66\u7684\u79c1\u94a5\u3002 \u8fd9 \u5fc5\u987b\u4e00\u76f4\u4fdd\u5bc6 !\u5343\u4e07\u4e0d\u8981\u548c\u4efb\u4f55\u4eba\u5206\u4eab\uff0c\u5305\u62ecCertbot\u7684\u5f00\u53d1\u8005\u3002 \u4f46\u662f\uff0c\u60a8\u4e0d\u80fd\u5c06\u5176\u653e\u5165\u4fdd\u9669\u7bb1\u4e2d\u2014\u60a8\u7684\u670d\u52a1\u5668\u4ecd\u7136\u9700\u8981\u8bbf\u95ee\u6b64\u6587\u4ef6\u624d\u80fd\u4f7fSSL/TLS\u5de5\u4f5c\u3002 \u4eceCertbot 0.29.0\u7248\u672c\u5f00\u59cb\uff0c\u65b0\u8bc1\u4e66\u7684\u79c1\u94a5\u9ed8\u8ba4\u4e3a 0600 \u3002\u5bf9\u8be5\u6587\u4ef6\u7684\u7ec4\u6a21\u5f0f\u6216\u7ec4\u6240\u6709\u8005(gid)\u7684\u4efb\u4f55\u66f4\u6539\u90fd\u5c06\u5728\u66f4\u65b0\u65f6\u4fdd\u7559\u3002 \u8fd9\u662fApache\u4e3a SSLCertificateKeyFile \u548cNginx\u4e3a ssl_certificate_key \u6240\u9700\u8981\u7684 fullchain.pem \u6240\u6709\u8bc1\u4e66\uff0c \u5305\u62ec \u670d\u52a1\u5668\u8bc1\u4e66(\u53c8\u540d\u53f6\u8bc1\u4e66\u6216\u6700\u7ec8\u5b9e\u4f53\u8bc1\u4e66)\u3002 \u670d\u52a1\u5668\u8bc1\u4e66\u662f\u8be5\u6587\u4ef6\u4e2d\u7684\u7b2c\u4e00\u4e2a\u8bc1\u4e66\uff0c\u968f\u540e\u662f\u4efb\u4f55\u4e2d\u95f4\u8bc1\u4e66\u3002 \u8fd9\u662fApache >= 2.4.8\u9700\u8981\u7684 SSLCertificateFile \u548cNginx\u9700\u8981\u7684 ssl_certificate cert.pem and chain.pem (\u4e0d\u592a\u5e38\u89c1) cert.pem \u5305\u542b\u670d\u52a1\u5668\u8bc1\u4e66\u672c\u8eab\uff0c chain.pem \u5305\u542b\u6d4f\u89c8\u5668\u9a8c\u8bc1\u670d\u52a1\u5668\u8bc1\u4e66\u6240\u9700\u7684\u989d\u5916\u4e2d\u95f4\u8bc1\u4e66\u6216\u8bc1\u4e66\u3002 \u5982\u679c\u60a8\u5411web\u670d\u52a1\u5668\u63d0\u4f9b\u5176\u4e2d\u4e00\u4e2a\u6587\u4ef6\uff0c\u60a8 \u5fc5\u987b \u540c\u65f6\u63d0\u4f9b\u4e24\u4e2a\u6587\u4ef6\uff0c\u5426\u5219\u67d0\u4e9b\u6d4f\u89c8\u5668\u4f1a\u4e3a\u60a8\u7684\u7ad9\u70b9\u663e\u793a\u201cThis Connection is Untrusted\u201d\u9519\u8bef \u6709\u65f6 \u3002 Apache < 2.4.8\u5206\u522b\u9700\u8981\u8fd9\u4e9b SSLCertificateFile \u548c SSLCertificateChainFile \u3002 \u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528Nginx >= 1.3.7\u7684OCSP\u9489\u4e66\uff0c chain.pem \u5e94\u8be5\u4f5c\u4e3a ssl_trusted_certificate \u6765\u9a8c\u8bc1OCSP\u54cd\u5e94\u3002 Note \u6240\u6709\u6587\u4ef6\u90fd\u662fPEM-encoded\u7684\u3002 \u5982\u679c\u60a8\u9700\u8981\u5176\u4ed6\u683c\u5f0f\uff0c\u4f8b\u5982DER\u6216PFX\uff0c\u90a3\u4e48\u60a8\u53ef\u4ee5\u4f7f\u7528 openssl \u8fdb\u884c\u8f6c\u6362\u3002 \u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f\u81ea\u52a8\u66f4\u65b0\uff0c\u4f60\u53ef\u4ee5\u7528 --deploy-hook \u6765\u81ea\u52a8 \u66f4\u65b0 \u3002","title":"\u6211\u7684\u8bc1\u4e66\u5728\u54ea\u91cc?"},{"location":"certbot/using/#_16","text":"Certbot \u5141\u8bb8\u5728\u624b\u52a8\u6a21\u5f0f\u4e0b\u8fd0\u884c\u524d\u548c\u540e\u9a8c\u8bc1\u6302\u94a9\u7684\u89c4\u8303\u3002 \u6307\u5b9a\u8fd9\u4e9b\u811a\u672c\u7684\u6807\u5fd7\u5206\u522b\u662f --manual-auth-hook \u548c --manual-cleanup-hook \uff0c\u53ef\u4ee5\u5982\u4e0b\u4f7f\u7528: certbot certonly --manual --manual-auth-hook /path/to/http/authenticator.sh --manual-cleanup-hook /path/to/http/cleanup.sh -d secure.example.com \u8fd9\u5c06\u8fd0\u884c authenticator.sh \u811a\u672c\uff0c\u5c1d\u8bd5\u9a8c\u8bc1\uff0c\u7136\u540e\u8fd0\u884c cleanup.sh \u811a\u672c\u3002 \u6b64\u5916\uff0ccertbot \u5c06\u628a\u76f8\u5173\u7684\u73af\u5883\u53d8\u91cf\u4f20\u9012\u7ed9\u8fd9\u4e9b\u811a\u672c: CERTBOT_DOMAIN : \u6b63\u5728\u9a8c\u8bc1\u7684\u57df CERTBOT_VALIDATION : \u9a8c\u8bc1\u5b57\u7b26\u4e32 CERTBOT_TOKEN : HTTP-01 \u6311\u6218\u7684\u8d44\u6e90\u540d\u90e8\u5206(\u4ec5\u9650 HTTP-01) CERTBOT_REMAINING_CHALLENGES : \u5f53\u524d\u6311\u6218\u7ed3\u675f\u540e\u5269\u4f59\u7684\u6311\u6218\u6570 CERTBOT_ALL_DOMAINS : \u5f53\u524d\u8bc1\u4e66\u6311\u6218\u7684\u6240\u6709\u57df\u7684\u9017\u53f7\u5206\u9694\u5217\u8868 \u53e6\u5916\u7528\u4e8e\u6e05\u7406: CERTBOT_AUTH_OUTPUT : \u8ba4\u8bc1\u811a\u672c\u5199\u5165\u6807\u51c6\u8f93\u51fa\u7684\u5185\u5bb9 HTTP-01 \u7684\u4f7f\u7528\u793a\u4f8b: certbot certonly --manual --preferred-challenges = http --manual-auth-hook /path/to/http/authenticator.sh --manual-cleanup-hook /path/to/http/cleanup.sh -d secure.example.com /path/to/http/authenticator.sh #!/bin/bash echo $CERTBOT_VALIDATION > /var/www/htdocs/.well-known/acme-challenge/ $CERTBOT_TOKEN /path/to/http/cleanup.sh #!/bin/bash rm -f /var/www/htdocs/.well-known/acme-challenge/ $CERTBOT_TOKEN DNS-01 (Cloudflare API v4)\u7684\u4f7f\u7528\u793a\u4f8b(\u4ec5\u4f9b\u793a\u4f8b\u4f7f\u7528\uff0c\u4e0d\u6309\u539f\u6837\u4f7f\u7528) certbot certonly --manual --preferred-challenges = dns --manual-auth-hook /path/to/dns/authenticator.sh --manual-cleanup-hook /path/to/dns/cleanup.sh -d secure.example.com /path/to/dns/authenticator.sh #!/bin/bash # Get your API key from https://www.cloudflare.com/a/account/my-account API_KEY = \"your-api-key\" EMAIL = \"your.email@example.com\" # Strip only the top domain to get the zone id DOMAIN = $( expr match \" $CERTBOT_DOMAIN \" '.*\\.\\(.*\\..*\\)' ) # Get the Cloudflare zone id ZONE_EXTRA_PARAMS = \"status=active&page=1&per_page=20&order=status&direction=desc&match=all\" ZONE_ID = $( curl -s -X GET \"https://api.cloudflare.com/client/v4/zones?name= $DOMAIN & $ZONE_EXTRA_PARAMS \" \\ -H \"X-Auth-Email: $EMAIL \" \\ -H \"X-Auth-Key: $API_KEY \" \\ -H \"Content-Type: application/json\" | python -c \"import sys,json;print(json.load(sys.stdin)['result'][0]['id'])\" ) # Create TXT record CREATE_DOMAIN = \"_acme-challenge. $CERTBOT_DOMAIN \" RECORD_ID = $( curl -s -X POST \"https://api.cloudflare.com/client/v4/zones/ $ZONE_ID /dns_records\" \\ -H \"X-Auth-Email: $EMAIL \" \\ -H \"X-Auth-Key: $API_KEY \" \\ -H \"Content-Type: application/json\" \\ --data '{\"type\":\"TXT\",\"name\":\"' \" $CREATE_DOMAIN \" '\",\"content\":\"' \" $CERTBOT_VALIDATION \" '\",\"ttl\":120}' \\ | python -c \"import sys,json;print(json.load(sys.stdin)['result']['id'])\" ) # Save info for cleanup if [ ! -d /tmp/CERTBOT_ $CERTBOT_DOMAIN ] ; then mkdir -m 0700 /tmp/CERTBOT_ $CERTBOT_DOMAIN fi echo $ZONE_ID > /tmp/CERTBOT_ $CERTBOT_DOMAIN /ZONE_ID echo $RECORD_ID > /tmp/CERTBOT_ $CERTBOT_DOMAIN /RECORD_ID # Sleep to make sure the change has time to propagate over to DNS sleep 25 /path/to/dns/cleanup.sh #!/bin/bash # Get your API key from https://www.cloudflare.com/a/account/my-account API_KEY = \"your-api-key\" EMAIL = \"your.email@example.com\" if [ -f /tmp/CERTBOT_ $CERTBOT_DOMAIN /ZONE_ID ] ; then ZONE_ID = $( cat /tmp/CERTBOT_ $CERTBOT_DOMAIN /ZONE_ID ) rm -f /tmp/CERTBOT_ $CERTBOT_DOMAIN /ZONE_ID fi if [ -f /tmp/CERTBOT_ $CERTBOT_DOMAIN /RECORD_ID ] ; then RECORD_ID = $( cat /tmp/CERTBOT_ $CERTBOT_DOMAIN /RECORD_ID ) rm -f /tmp/CERTBOT_ $CERTBOT_DOMAIN /RECORD_ID fi # Remove the challenge TXT record from the zone if [ -n \" ${ ZONE_ID } \" ] ; then if [ -n \" ${ RECORD_ID } \" ] ; then curl -s -X DELETE \"https://api.cloudflare.com/client/v4/zones/ $ZONE_ID /dns_records/ $RECORD_ID \" \\ -H \"X-Auth-Email: $EMAIL \" \\ -H \"X-Auth-Key: $API_KEY \" \\ -H \"Content-Type: application/json\" fi fi","title":"\u524d\u548c\u540e\u9a8c\u8bc1\u6302\u94a9"},{"location":"certbot/using/#acme","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cCertbot \u4f7f\u7528 Let\u2019s Encrypt \u7684\u751f\u4ea7\u670d\u52a1\u5668 https://acme-v02.api.letsencrypt.org/directory \u3002 \u60a8\u53ef\u4ee5\u544a\u8bc9 Certbot \u4f7f\u7528\u4e0d\u540c\u7684 CA\uff0c\u65b9\u6cd5\u662f\u5728\u547d\u4ee4\u884c\u4e0a\u63d0\u4f9b --server \uff0c\u6216\u8005\u5728 \u914d\u7f6e\u6587\u4ef6 \u4e2d\u63d0\u4f9b\u670d\u52a1\u5668 ACME \u76ee\u5f55\u7684 URL\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4f60\u60f3\u4f7f\u7528 Let's Encrypt \u7684\u767b\u53f0\u670d\u52a1\u5668\uff0c\u4f60\u53ef\u4ee5\u5728\u547d\u4ee4\u884c\u4e2d\u6dfb\u52a0 \u2014\u2014server https://acme-staging-v02.api.letsencrypt.org/directory \u3002 \u5982\u679c Certbot \u4e0d\u4fe1\u4efb ACME \u670d\u52a1\u5668\u4f7f\u7528\u7684 SSL \u8bc1\u4e66\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528 REQUESTS_CA_BUNDLE \u73af\u5883\u53d8\u91cf\u8986\u76d6 Certbot \u4fe1\u4efb\u7684\u6839\u8bc1\u4e66\u3002 Certbot \u4f7f\u7528 requests \u5e93\uff0c\u5b83\u4e0d\u4f7f\u7528\u64cd\u4f5c\u7cfb\u7edf\u53d7\u4fe1\u4efb\u7684\u6839\u5b58\u50a8\u3002 \u5982\u679c\u4f7f\u7528 --server \u6307\u5b9a\u5b9e\u73b0\u89c4\u8303\u7684\u6807\u51c6\u5316\u7248\u672c\u7684 ACME CA\uff0c\u5219\u53ef\u4ee5\u83b7\u5f97\u901a\u914d\u7b26\u57df\u7684\u8bc1\u4e66\u3002 \u4e00\u4e9b CAs(\u4f8b\u5982 Let\u2019s Encrypt)\u8981\u6c42\u901a\u914d\u7b26\u57df\u7684\u57df\u9a8c\u8bc1\u5fc5\u987b\u901a\u8fc7\u4fee\u6539 DNS \u8bb0\u5f55\u6765\u5b8c\u6210\uff0c\u8fd9\u610f\u5473\u7740\u5fc5\u987b\u4f7f\u7528 dns-01 \u6311\u6218\u7c7b\u578b\u3002 \u8981\u67e5\u770b\u652f\u6301\u6b64\u6311\u6218\u7c7b\u578b\u7684 Certbot \u63d2\u4ef6\u5217\u8868\u4ee5\u53ca\u5982\u4f55\u4f7f\u7528\u5b83\u4eec\uff0c\u8bf7\u53c2\u9605 \u63d2\u4ef6 \u3002","title":"\u66f4\u6539 ACME \u670d\u52a1\u5668"},{"location":"certbot/using/#_17","text":"\u5728\u5904\u7406\u9a8c\u8bc1\u65f6\uff0cCertbot \u4f1a\u5728\u60a8\u7684\u7cfb\u7edf\u4e0a\u5199\u5165\u4e00\u4e9b\u9501\u6587\u4ef6\uff0c\u4ee5\u9632\u6b62\u591a\u4e2a\u5b9e\u4f8b\u76f8\u4e92\u8986\u76d6\u66f4\u6539\u3002 \u8fd9\u610f\u5473\u7740\u9ed8\u8ba4\u60c5\u51b5\u4e0b Certbot \u7684\u4e24\u4e2a\u5b9e\u4f8b\u4e0d\u80fd\u5e76\u884c\u8fd0\u884c\u3002 \u7531\u4e8e Certbot \u4f7f\u7528\u7684\u76ee\u5f55\u662f\u53ef\u914d\u7f6e\u7684\uff0c\u56e0\u6b64 Certbot \u5c06\u4e3a\u5b83\u4f7f\u7528\u7684\u6240\u6709\u76ee\u5f55\u7f16\u5199\u4e00\u4e2a\u9501\u6587\u4ef6\u3002 \u8fd9\u5305\u62ec Certbot \u7684 --work-dir , --logs-dir , \u548c --config-dir \u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5b83\u4eec\u5206\u522b\u662f /var/lib/letsencrypt , /var/log/letsencrypt , \u548c /etc/letsencrypt \u3002 \u6b64\u5916\uff0c\u5982\u679c\u4f60\u5728 Apache \u6216 nginx \u4e0a\u4f7f\u7528 Certbot\uff0c\u5b83\u4f1a\u9501\u5b9a\u8be5\u7a0b\u5e8f\u7684\u914d\u7f6e\u6587\u4ef6\u5939\uff0c\u901a\u5e38\u4e5f\u5728 /etc \u76ee\u5f55\u4e0b\u3002 \u6ce8\u610f\uff0c\u8fd9\u4e9b\u9501\u6587\u4ef6\u53ea\u4f1a\u963b\u6b62 Certbot \u7684\u5176\u4ed6\u5b9e\u4f8b\u4f7f\u7528\u8fd9\u4e9b\u76ee\u5f55\uff0c\u800c\u4e0d\u662f\u5176\u4ed6\u8fdb\u7a0b\u3002 \u5982\u679c\u4f60\u60f3\u540c\u65f6\u8fd0\u884c Certbot \u7684\u591a\u4e2a\u5b9e\u4f8b\uff0c\u4f60\u5e94\u8be5\u4e3a\u4f60\u60f3\u8981\u8fd0\u884c\u7684\u6bcf\u4e2a Certbot \u5b9e\u4f8b\u6307\u5b9a\u4e0d\u540c\u7684\u76ee\u5f55\uff0c\u5982 --work-dir , --logs-dir , \u548c --config-dir \u3002","title":"\u9501\u6587\u4ef6"},{"location":"certbot/using/#_18","text":"Certbot \u63a5\u53d7\u4e00\u4e2a\u5168\u5c40\u914d\u7f6e\u6587\u4ef6\uff0c\u8be5\u6587\u4ef6\u5c06\u5176\u9009\u9879\u5e94\u7528\u4e8e Certbot \u7684\u6240\u6709\u8c03\u7528\u3002 \u7279\u5b9a\u4e8e\u8bc1\u4e66\u7684\u914d\u7f6e\u9009\u9879\u5e94\u8be5\u8bbe\u7f6e\u5728 .conf \u6587\u4ef6\u4e2d\uff0c\u8be5\u6587\u4ef6\u53ef\u4ee5\u5728 /etc/letsencrypt/renewal \u4e2d\u627e\u5230\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e0d\u4f1a\u521b\u5efa cli.ini \u6587\u4ef6(\u4f8b\u5982\uff0c\u5982\u679c\u901a\u8fc7\u5305\u7ba1\u7406\u5668\u5b89\u88c5 Certbot\uff0c\u5219\u53ef\u80fd\u5df2\u7ecf\u5b58\u5728 cli.ini \u6587\u4ef6)\u3002 \u5728\u521b\u5efa\u4e00\u4e2a\u914d\u7f6e\u6587\u4ef6\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528 certbot --config cli.ini (\u6216\u66f4\u77ed\u7684 -c cli.ini )\u6307\u5b9a\u8be5\u914d\u7f6e\u6587\u4ef6\u7684\u4f4d\u7f6e\u3002 \u914d\u7f6e\u6587\u4ef6\u793a\u4f8b\u5982\u4e0b\u6240\u793a: # This is an example of the kind of things you can do in a configuration file. # All flags used by the client can be configured here. Run Certbot with # \"--help\" to learn more about the available options. # # Note that these options apply automatically to all use of Certbot for # obtaining or renewing certificates, so options specific to a single # certificate on a system with several certificates should not be placed # here. # Use ECC for the private key key-type = ecdsa elliptic-curve = secp384r1 # Use a 4096 bit RSA key instead of 2048 rsa-key-size = 4096 # Uncomment and update to register with the specified e-mail address # email = foo@example.com # Uncomment to use the standalone authenticator on port 443 # authenticator = standalone # Uncomment to use the webroot authenticator. Replace webroot-path with the # path to the public_html / webroot folder being served by your web server. # authenticator = webroot # webroot-path = /usr/share/nginx/html # Uncomment to automatically agree to the terms of service of the ACME server # agree-tos = true # An example of using an alternate ACME server that uses EAB credentials # server = https://acme.sectigo.com/v2/InCommonRSAOV # eab-kid = somestringofstuffwithoutquotes # eab-hmac-key = yaddayaddahexhexnotquoted \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u641c\u7d22\u4ee5\u4e0b\u4f4d\u7f6e: /etc/letsencrypt/cli.ini $XDG_CONFIG_HOME/letsencrypt/cli.ini (or ~/.config/letsencrypt/cli.ini if $XDG_CONFIG_HOME is not set). \u7531\u4e8e\u8be5\u914d\u7f6e\u6587\u4ef6\u9002\u7528\u4e8e certbot \u7684\u6240\u6709\u8c03\u7528\uff0c\u56e0\u6b64\u5728\u5176\u4e2d\u5217\u51fa\u57df\u662f\u4e0d\u6b63\u786e\u7684\u3002 \u5728 cli.ini \u4e2d\u5217\u51fa\u57df\u540d\u53ef\u80fd\u4f1a\u963b\u6b62\u66f4\u65b0\u5de5\u4f5c\u3002 \u6b64\u5916\uff0c\u7531\u4e8e cli.ini \u4e2d\u7684\u53c2\u6570\u662f\u5982\u4f55\u89e3\u6790\u7684\uff0c\u4e0d\u5e94\u8be5\u5217\u51fa\u4e0d\u5e0c\u671b\u8bbe\u7f6e\u7684\u9009\u9879\u3002 \u8bbe\u7f6e\u4e3a false \u7684\u9009\u9879\u5c06\u88ab\u65e7\u7248\u672c\u7684 Certbot \u8bfb\u53d6\u4e3a true\uff0c\u56e0\u4e3a\u5b83\u4eec\u5df2\u7ecf\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u5217\u51fa\u3002 .. \u4f7f\u7528 constants.py \u4f7f\u5176\u4fdd\u6301\u6700\u65b0","title":"\u914d\u7f6e\u6587\u4ef6"},{"location":"certbot/using/#_19","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0ccertbot \u5c06\u72b6\u6001\u65e5\u5fd7\u5b58\u50a8\u5728 /var/log/letsencrypt \u4e2d\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5f53\u65e5\u5fd7\u76ee\u5f55\u4e2d\u6709 1000 \u4e2a\u65e5\u5fd7\u65f6\uff0ccertbot \u5c06\u5f00\u59cb\u65cb\u8f6c\u65e5\u5fd7\u3002 \u8fd9\u610f\u5473\u7740\u4e00\u65e6\u6709 1000 \u4e2a\u6587\u4ef6\u5728 /var/log/letsencrypt \u4e2d\uff0cCertbot \u5c06\u5220\u9664\u6700\u65e7\u7684\u6587\u4ef6\uff0c\u4e3a\u65b0\u65e5\u5fd7\u817e\u51fa\u7a7a\u95f4\u3002 \u540e\u7eed\u65e5\u5fd7\u7684\u6570\u91cf\u53ef\u4ee5\u901a\u8fc7\u5c06\u6240\u9700\u7684\u6570\u91cf\u4f20\u9012\u7ed9\u547d\u4ee4\u884c\u6807\u5fd7 --max-log-backups \u6765\u66f4\u6539\u3002 \u5c06\u6b64\u6807\u5fd7\u8bbe\u7f6e\u4e3a 0 \u5c06\u5b8c\u5168\u7981\u7528\u65e5\u5fd7\u65cb\u8f6c\uff0c\u5bfc\u81f4 certbot \u59cb\u7ec8\u9644\u52a0\u5230\u76f8\u540c\u7684\u65e5\u5fd7\u6587\u4ef6\u3002 Note \u4e00\u4e9b\u53d1\u884c\u7248\uff0c\u5305\u62ecDebian\u548cUbuntu\uff0c\u7981\u7528\u4e86certbot\u7684\u5185\u90e8\u65e5\u5fd7\u65cb\u8f6c\uff0c\u800c\u652f\u6301\u66f4\u4f20\u7edf\u7684logrotate\u811a\u672c\u3002 \u5982\u679c\u60a8\u6b63\u5728\u4f7f\u7528\u53d1\u884c\u7248\u7684\u5305\uff0c\u5e76\u60f3\u8981\u66f4\u6539\u65e5\u5fd7\u8f6e\u6362\uff0c\u8bf7\u68c0\u67e5 /etc/logrotate.d/ \u8868\u793acertbot\u65cb\u8f6c\u811a\u672c\u3002","title":"\u65e5\u5fd7\u8f6e\u8f6c"},{"location":"certbot/using/#certbot_1","text":"Certbot \u652f\u6301\u5f88\u591a\u547d\u4ee4\u884c\u9009\u9879\u3002\u4ee5\u4e0b\u662f\u6765\u81ea certbot --help all \u7684\u5b8c\u6574\u5217\u8868: usage: certbot [SUBCOMMAND] [options] [-d DOMAIN] [-d DOMAIN] ... Certbot can obtain and install HTTPS/TLS/SSL certificates. By default, it will attempt to use a webserver both for obtaining and installing the certificate. The most common SUBCOMMANDS and flags are: obtain, install, and renew certificates: (default) run Obtain & install a certificate in your current webserver certonly Obtain or renew a certificate, but do not install it renew Renew all previously obtained certificates that are near expiry enhance Add security enhancements to your existing configuration -d DOMAINS Comma-separated list of domains to obtain a certificate for --apache Use the Apache plugin for authentication & installation --standalone Run a standalone webserver for authentication --nginx Use the Nginx plugin for authentication & installation --webroot Place files in a server's webroot folder for authentication --manual Obtain certificates interactively, or using shell script hooks -n Run non-interactively --test-cert Obtain a test certificate from a staging server --dry-run Test \"renew\" or \"certonly\" without saving any certificates to disk manage certificates: certificates Display information about certificates you have from Certbot revoke Revoke a certificate (supply --cert-name or --cert-path) delete Delete a certificate (supply --cert-name) manage your account: register Create an ACME account unregister Deactivate an ACME account update_account Update an ACME account show_account Display account details --agree-tos Agree to the ACME server's Subscriber Agreement -m EMAIL Email address for important account notifications optional arguments: -h, --help show this help message and exit -c CONFIG_FILE, --config CONFIG_FILE path to config file (default: /etc/letsencrypt/cli.ini and ~/.config/letsencrypt/cli.ini) -v, --verbose This flag can be used multiple times to incrementally increase the verbosity of output, e.g. -vvv. (default: 0) --max-log-backups MAX_LOG_BACKUPS Specifies the maximum number of backup logs that should be kept by Certbot's built in log rotation. Setting this flag to 0 disables log rotation entirely, causing Certbot to always append to the same log file. (default: 1000) -n, --non-interactive, --noninteractive Run without ever asking for user input. This may require additional command line flags; the client will try to explain which ones are required if it finds one missing (default: False) --force-interactive Force Certbot to be interactive even if it detects it's not being run in a terminal. This flag cannot be used with the renew subcommand. (default: False) -d DOMAIN, --domains DOMAIN, --domain DOMAIN Domain names to apply. For multiple domains you can use multiple -d flags or enter a comma separated list of domains as a parameter. The first domain provided will be the subject CN of the certificate, and all domains will be Subject Alternative Names on the certificate. The first domain will also be used in some software user interfaces and as the file paths for the certificate and related material unless otherwise specified or you already have a certificate with the same name. In the case of a name collision it will append a number like 0001 to the file path name. (default: Ask) --eab-kid EAB_KID Key Identifier for External Account Binding (default: None) --eab-hmac-key EAB_HMAC_KEY HMAC key for External Account Binding (default: None) --cert-name CERTNAME Certificate name to apply. This name is used by Certbot for housekeeping and in file paths; it doesn't affect the content of the certificate itself. To see certificate names, run 'certbot certificates'. When creating a new certificate, specifies the new certificate's name. (default: the first provided domain or the name of an existing certificate on your system for the same domains) --dry-run Perform a test run of the client, obtaining test (invalid) certificates but not saving them to disk. This can currently only be used with the 'certonly' and 'renew' subcommands. Note: Although --dry-run tries to avoid making any persistent changes on a system, it is not completely side-effect free: if used with webserver authenticator plugins like apache and nginx, it makes and then reverts temporary config changes in order to obtain test certificates, and reloads webservers to deploy and then roll back those changes. It also calls --pre-hook and --post-hook commands if they are defined because they may be necessary to accurately simulate renewal. --deploy- hook commands are not called. (default: False) --debug-challenges After setting up challenges, wait for user input before submitting to CA. When used in combination with the `-v` option, the challenge URLs or FQDNs and their expected return values are shown. (default: False) --preferred-chain PREFERRED_CHAIN Set the preferred certificate chain. If the CA offers multiple certificate chains, prefer the chain whose topmost certificate was issued from this Subject Common Name. If no match, the default offered chain will be used. (default: None) --preferred-challenges PREF_CHALLS A sorted, comma delimited list of the preferred challenge to use during authorization with the most preferred challenge listed first (Eg, \"dns\" or \"http,dns\"). Not all plugins support all challenges. See https://certbot.eff.org/docs/using.html#plugins for details. ACME Challenges are versioned, but if you pick \"http\" rather than \"http-01\", Certbot will select the latest version automatically. (default: []) --issuance-timeout ISSUANCE_TIMEOUT This option specifies how long (in seconds) Certbot will wait for the server to issue a certificate. (default: 90) --user-agent USER_AGENT Set a custom user agent string for the client. User agent strings allow the CA to collect high level statistics about success rates by OS, plugin and use case, and to know when to deprecate support for past Python versions and flags. If you wish to hide this information from the Let's Encrypt server, set this to \"\". (default: CertbotACMEClient/2.1.1 (certbot; OS_NAME OS_VERSION) Authenticator/XXX Installer/YYY (SUBCOMMAND; flags: FLAGS) Py/major.minor.patchlevel). The flags encoded in the user agent are: --duplicate, --force-renew, --allow-subset-of-names, -n, and whether any hooks are set. --user-agent-comment USER_AGENT_COMMENT Add a comment to the default user agent string. May be used when repackaging Certbot or calling it from another tool to allow additional statistical data to be collected. Ignored if --user-agent is set. (Example: Foo-Wrapper/1.0) (default: None) automation: Flags for automating execution & other tweaks --keep-until-expiring, --keep, --reinstall If the requested certificate matches an existing certificate, always keep the existing one until it is due for renewal (for the 'run' subcommand this means reinstall the existing certificate). (default: Ask) --expand If an existing certificate is a strict subset of the requested names, always expand and replace it with the additional names. (default: Ask) --version show program's version number and exit --force-renewal, --renew-by-default If a certificate already exists for the requested domains, renew it now, regardless of whether it is near expiry. (Often --keep-until-expiring is more appropriate). Also implies --expand. (default: False) --renew-with-new-domains If a certificate already exists for the requested certificate name but does not match the requested domains, renew it now, regardless of whether it is near expiry. (default: False) --reuse-key When renewing, use the same private key as the existing certificate. (default: False) --no-reuse-key When renewing, do not use the same private key as the existing certificate. Not reusing private keys is the default behavior of Certbot. This option may be used to unset --reuse-key on an existing certificate. (default: False) --new-key When renewing or replacing a certificate, generate a new private key, even if --reuse-key is set on the existing certificate. Combining --new-key and --reuse- key will result in the private key being replaced and then reused in future renewals. (default: False) --allow-subset-of-names When performing domain validation, do not consider it a failure if authorizations can not be obtained for a strict subset of the requested domains. This may be useful for allowing renewals for multiple domains to succeed even if some domains no longer point at this system. This option cannot be used with --csr. (default: False) --agree-tos Agree to the ACME Subscriber Agreement (default: Ask) --duplicate Allow making a certificate lineage that duplicates an existing one (both can be renewed in parallel) (default: False) -q, --quiet Silence all output except errors. Useful for automation via cron. Implies --non-interactive. (default: False) security: Security parameters & server settings --rsa-key-size N Size of the RSA key. (default: 2048) --key-type {rsa,ecdsa} Type of generated private key. Only *ONE* per invocation can be provided at this time. (default: ecdsa) --elliptic-curve N The SECG elliptic curve name to use. Please see RFC 8446 for supported values. (default: secp256r1) --must-staple Adds the OCSP Must-Staple extension to the certificate. Autoconfigures OCSP Stapling for supported setups (Apache version >= 2.3.3 ). (default: False) --redirect Automatically redirect all HTTP traffic to HTTPS for the newly authenticated vhost. (default: redirect enabled for install and run, disabled for enhance) --no-redirect Do not automatically redirect all HTTP traffic to HTTPS for the newly authenticated vhost. (default: redirect enabled for install and run, disabled for enhance) --hsts Add the Strict-Transport-Security header to every HTTP response. Forcing browser to always use SSL for the domain. Defends against SSL Stripping. (default: None) --uir Add the \"Content-Security-Policy: upgrade-insecure- requests\" header to every HTTP response. Forcing the browser to use https:// for every http:// resource. (default: None) --staple-ocsp Enables OCSP Stapling. A valid OCSP response is stapled to the certificate that the server offers during TLS. (default: None) --strict-permissions Require that all configuration files are owned by the current user; only needed if your config is somewhere unsafe like /tmp/ (default: False) --auto-hsts Gradually increasing max-age value for HTTP Strict Transport Security security header (default: False) testing: The following flags are meant for testing and integration purposes only. --test-cert, --staging Use the staging server to obtain or revoke test (invalid) certificates; equivalent to --server https://acme-staging-v02.api.letsencrypt.org/directory (default: False) --debug Show tracebacks in case of errors (default: False) --no-verify-ssl Disable verification of the ACME server's certificate. The root certificates trusted by Certbot can be overriden by setting the REQUESTS_CA_BUNDLE environment variable. (default: False) --http-01-port HTTP01_PORT Port used in the http-01 challenge. This only affects the port Certbot listens on. A conforming ACME server will still attempt to connect on port 80. (default: 80) --http-01-address HTTP01_ADDRESS The address the server listens to during http-01 challenge. (default: ) --https-port HTTPS_PORT Port used to serve HTTPS. This affects which port Nginx will listen on after a LE certificate is installed. (default: 443) --break-my-certs Be willing to replace or renew valid certificates with invalid (testing/staging) certificates (default: False) paths: Flags for changing execution paths & servers --cert-path CERT_PATH Path to where certificate is saved (with certonly --csr), installed from, or revoked (default: None) --key-path KEY_PATH Path to private key for certificate installation or revocation (if account key is missing) (default: None) --fullchain-path FULLCHAIN_PATH Accompanying path to a full certificate chain (certificate plus chain). (default: None) --chain-path CHAIN_PATH Accompanying path to a certificate chain. (default: None) --config-dir CONFIG_DIR Configuration directory. (default: /etc/letsencrypt) --work-dir WORK_DIR Working directory. (default: /var/lib/letsencrypt) --logs-dir LOGS_DIR Logs directory. (default: /var/log/letsencrypt) --server SERVER ACME Directory Resource URI. (default: https://acme-v02.api.letsencrypt.org/directory) manage: Various subcommands and flags are available for managing your certificates: certificates List certificates managed by Certbot delete Clean up all files related to a certificate renew Renew all certificates (or one specified with --cert- name) revoke Revoke a certificate specified with --cert-path or --cert-name update_symlinks Recreate symlinks in your /etc/letsencrypt/live/ directory run: Options for obtaining & installing certificates certonly: Options for modifying how a certificate is obtained --csr CSR Path to a Certificate Signing Request (CSR) in DER or PEM format. Currently --csr only works with the 'certonly' subcommand. (default: None) renew: The 'renew' subcommand will attempt to renew any certificates previously obtained if they are close to expiry, and print a summary of the results. By default, 'renew' will reuse the plugins and options used to obtain or most recently renew each certificate. You can test whether future renewals will succeed with `--dry-run`. Individual certificates can be renewed with the `--cert-name` option. Hooks are available to run commands before and after renewal; see https://certbot.eff.org/docs/using.html#renewal for more information on these. --pre-hook PRE_HOOK Command to be run in a shell before obtaining any certificates. Intended primarily for renewal, where it can be used to temporarily shut down a webserver that might conflict with the standalone plugin. This will only be called if a certificate is actually to be obtained/renewed. When renewing several certificates that have identical pre-hooks, only the first will be executed. (default: None) --post-hook POST_HOOK Command to be run in a shell after attempting to obtain/renew certificates. Can be used to deploy renewed certificates, or to restart any servers that were stopped by --pre-hook. This is only run if an attempt was made to obtain/renew a certificate. If multiple renewed certificates have identical post- hooks, only one will be run. (default: None) --deploy-hook DEPLOY_HOOK Command to be run in a shell once for each successfully issued certificate. For this command, the shell variable $RENEWED_LINEAGE will point to the config live subdirectory (for example, \"/etc/letsencrypt/live/example.com\") containing the new certificates and keys; the shell variable $ RENEWED_DOMAINS will contain a space-delimited list of renewed certificate domains (for example, \"example.com www.example.com\") (default: None) --disable-hook-validation Ordinarily the commands specified for --pre- hook/--post-hook/--deploy-hook will be checked for validity, to see if the programs being run are in the $ PATH, so that mistakes can be caught early, even when the hooks aren't being run just yet. The validation is rather simplistic and fails if you use more advanced shell constructs, so you can use this switch to disable it. (default: False) --no-directory-hooks Disable running executables found in Certbot's hook directories during renewal. (default: False) --disable-renew-updates Disable automatic updates to your server configuration that would otherwise be done by the selected installer plugin, and triggered when the user executes \"certbot renew\", regardless of if the certificate is renewed. This setting does not apply to important TLS configuration updates. (default: False) --no-autorenew Disable auto renewal of certificates. (default: False) certificates: List certificates managed by Certbot delete: Options for deleting a certificate revoke: Options for revocation of certificates --reason {unspecified,keycompromise,affiliationchanged,superseded,cessationofoperation} Specify reason for revoking certificate. (default: unspecified) --delete-after-revoke Delete certificates after revoking them, along with all previous and later versions of those certificates. (default: None) --no-delete-after-revoke Do not delete certificates after revoking them. This option should be used with caution because the 'renew' subcommand will attempt to renew undeleted revoked certificates. (default: None) register: Options for account registration --register-unsafely-without-email Specifying this flag enables registering an account with no email address. This is strongly discouraged, because you will be unable to receive notice about impending expiration or revocation of your certificates or problems with your Certbot installation that will lead to failure to renew. (default: False) -m EMAIL, --email EMAIL Email used for registration and recovery contact. Use comma to register multiple emails, ex: u1@example.com,u2@example.com. (default: Ask). --eff-email Share your e-mail address with EFF (default: None) --no-eff-email Don't share your e-mail address with EFF (default: None) update_account: Options for account modification unregister: Options for account deactivation. --account ACCOUNT_ID Account ID to use (default: None) install: Options for modifying how a certificate is deployed rollback: Options for rolling back server configuration changes --checkpoints N Revert configuration N number of checkpoints. (default: 1) plugins: Options for the \"plugins\" subcommand --init Initialize plugins. (default: False) --prepare Initialize and prepare plugins. (default: False) --authenticators Limit to authenticator plugins only. (default: None) --installers Limit to installer plugins only. (default: None) update_symlinks: Recreates certificate and key symlinks in /etc/letsencrypt/live, if you changed them by hand or edited a renewal configuration file enhance: Helps to harden the TLS configuration by adding security enhancements to already existing configuration. show_account: Options useful for the \"show_account\" subcommand: plugins: Plugin Selection: Certbot client supports an extensible plugins architecture. See 'certbot plugins' for a list of all installed plugins and their names. You can force a particular plugin by setting options provided below. Running --help <plugin_name> will list flags specific to that plugin. --configurator CONFIGURATOR Name of the plugin that is both an authenticator and an installer. Should not be used together with --authenticator or --installer. (default: Ask) -a AUTHENTICATOR, --authenticator AUTHENTICATOR Authenticator plugin name. (default: None) -i INSTALLER, --installer INSTALLER Installer plugin name (also used to find domains). (default: None) --apache Obtain and install certificates using Apache (default: False) --nginx Obtain and install certificates using Nginx (default: False) --standalone Obtain certificates using a \"standalone\" webserver. (default: False) --manual Provide laborious manual instructions for obtaining a certificate (default: False) --webroot Obtain certificates by placing files in a webroot directory. (default: False) --dns-cloudflare Obtain certificates using a DNS TXT record (if you are using Cloudflare for DNS). (default: False) --dns-digitalocean Obtain certificates using a DNS TXT record (if you are using DigitalOcean for DNS). (default: False) --dns-dnsimple Obtain certificates using a DNS TXT record (if you are using DNSimple for DNS). (default: False) --dns-dnsmadeeasy Obtain certificates using a DNS TXT record (if you are using DNS Made Easy for DNS). (default: False) --dns-gehirn Obtain certificates using a DNS TXT record (if you are using Gehirn Infrastructure Service for DNS). (default: False) --dns-google Obtain certificates using a DNS TXT record (if you are using Google Cloud DNS). (default: False) --dns-linode Obtain certificates using a DNS TXT record (if you are using Linode for DNS). (default: False) --dns-luadns Obtain certificates using a DNS TXT record (if you are using LuaDNS for DNS). (default: False) --dns-nsone Obtain certificates using a DNS TXT record (if you are using NS1 for DNS). (default: False) --dns-ovh Obtain certificates using a DNS TXT record (if you are using OVH for DNS). (default: False) --dns-rfc2136 Obtain certificates using a DNS TXT record (if you are using BIND for DNS). (default: False) --dns-route53 Obtain certificates using a DNS TXT record (if you are using Route53 for DNS). (default: False) --dns-sakuracloud Obtain certificates using a DNS TXT record (if you are using Sakura Cloud for DNS). (default: False) apache: Apache Web Server plugin (Please note that the default values of the Apache plugin options change depending on the operating system Certbot is run on.) --apache-enmod APACHE_ENMOD Path to the Apache 'a2enmod' binary (default: None) --apache-dismod APACHE_DISMOD Path to the Apache 'a2dismod' binary (default: None) --apache-le-vhost-ext APACHE_LE_VHOST_EXT SSL vhost configuration extension (default: -le- ssl.conf) --apache-server-root APACHE_SERVER_ROOT Apache server root directory (default: /etc/apache2) --apache-vhost-root APACHE_VHOST_ROOT Apache server VirtualHost configuration root (default: None) --apache-logs-root APACHE_LOGS_ROOT Apache server logs directory (default: /var/log/apache2) --apache-challenge-location APACHE_CHALLENGE_LOCATION Directory path for challenge configuration (default: /etc/apache2) --apache-handle-modules APACHE_HANDLE_MODULES Let installer handle enabling required modules for you (Only Ubuntu/Debian currently) (default: False) --apache-handle-sites APACHE_HANDLE_SITES Let installer handle enabling sites for you (Only Ubuntu/Debian currently) (default: False) --apache-ctl APACHE_CTL Full path to Apache control script (default: apache2ctl) --apache-bin APACHE_BIN Full path to apache2/httpd binary (default: None) dns-cloudflare: Obtain certificates using a DNS TXT record (if you are using Cloudflare for DNS). --dns-cloudflare-propagation-seconds DNS_CLOUDFLARE_PROPAGATION_SECONDS The number of seconds to wait for DNS to propagate before asking the ACME server to verify the DNS record. (default: 10) --dns-cloudflare-credentials DNS_CLOUDFLARE_CREDENTIALS Cloudflare credentials INI file. (default: None) dns-digitalocean: Obtain certificates using a DNS TXT record (if you are using DigitalOcean for DNS). --dns-digitalocean-propagation-seconds DNS_DIGITALOCEAN_PROPAGATION_SECONDS The number of seconds to wait for DNS to propagate before asking the ACME server to verify the DNS record. (default: 10) --dns-digitalocean-credentials DNS_DIGITALOCEAN_CREDENTIALS DigitalOcean credentials INI file. (default: None) dns-dnsimple: Obtain certificates using a DNS TXT record (if you are using DNSimple for DNS). --dns-dnsimple-propagation-seconds DNS_DNSIMPLE_PROPAGATION_SECONDS The number of seconds to wait for DNS to propagate before asking the ACME server to verify the DNS record. (default: 30) --dns-dnsimple-credentials DNS_DNSIMPLE_CREDENTIALS DNSimple credentials INI file. (default: None) dns-dnsmadeeasy: Obtain certificates using a DNS TXT record (if you are using DNS Made Easy for DNS). --dns-dnsmadeeasy-propagation-seconds DNS_DNSMADEEASY_PROPAGATION_SECONDS The number of seconds to wait for DNS to propagate before asking the ACME server to verify the DNS record. (default: 60) --dns-dnsmadeeasy-credentials DNS_DNSMADEEASY_CREDENTIALS DNS Made Easy credentials INI file. (default: None) dns-gehirn: Obtain certificates using a DNS TXT record (if you are using Gehirn Infrastructure Service for DNS). --dns-gehirn-propagation-seconds DNS_GEHIRN_PROPAGATION_SECONDS The number of seconds to wait for DNS to propagate before asking the ACME server to verify the DNS record. (default: 30) --dns-gehirn-credentials DNS_GEHIRN_CREDENTIALS Gehirn Infrastructure Service credentials file. (default: None) dns-google: Obtain certificates using a DNS TXT record (if you are using Google Cloud DNS for DNS). --dns-google-propagation-seconds DNS_GOOGLE_PROPAGATION_SECONDS The number of seconds to wait for DNS to propagate before asking the ACME server to verify the DNS record. (default: 60) --dns-google-credentials DNS_GOOGLE_CREDENTIALS Path to Google Cloud DNS service account JSON file. (See https://developers.google.com/identity/protocols/ OAuth2ServiceAccount#creatinganaccount forinformation about creating a service account and https://cloud.google.com/dns/access- control#permissions_and_roles for information about therequired permissions.) (default: None) dns-linode: Obtain certificates using a DNS TXT record (if you are using Linode for DNS). --dns-linode-propagation-seconds DNS_LINODE_PROPAGATION_SECONDS The number of seconds to wait for DNS to propagate before asking the ACME server to verify the DNS record. (default: 120) --dns-linode-credentials DNS_LINODE_CREDENTIALS Linode credentials INI file. (default: None) dns-luadns: Obtain certificates using a DNS TXT record (if you are using LuaDNS for DNS). --dns-luadns-propagation-seconds DNS_LUADNS_PROPAGATION_SECONDS The number of seconds to wait for DNS to propagate before asking the ACME server to verify the DNS record. (default: 30) --dns-luadns-credentials DNS_LUADNS_CREDENTIALS LuaDNS credentials INI file. (default: None) dns-nsone: Obtain certificates using a DNS TXT record (if you are using NS1 for DNS). --dns-nsone-propagation-seconds DNS_NSONE_PROPAGATION_SECONDS The number of seconds to wait for DNS to propagate before asking the ACME server to verify the DNS record. (default: 30) --dns-nsone-credentials DNS_NSONE_CREDENTIALS NS1 credentials file. (default: None) dns-ovh: Obtain certificates using a DNS TXT record (if you are using OVH for DNS). --dns-ovh-propagation-seconds DNS_OVH_PROPAGATION_SECONDS The number of seconds to wait for DNS to propagate before asking the ACME server to verify the DNS record. (default: 120) --dns-ovh-credentials DNS_OVH_CREDENTIALS OVH credentials INI file. (default: None) dns-rfc2136: Obtain certificates using a DNS TXT record (if you are using BIND for DNS). --dns-rfc2136-propagation-seconds DNS_RFC2136_PROPAGATION_SECONDS The number of seconds to wait for DNS to propagate before asking the ACME server to verify the DNS record. (default: 60) --dns-rfc2136-credentials DNS_RFC2136_CREDENTIALS RFC 2136 credentials INI file. (default: None) dns-route53: Obtain certificates using a DNS TXT record (if you are using AWS Route53 for DNS). --dns-route53-propagation-seconds DNS_ROUTE53_PROPAGATION_SECONDS The number of seconds to wait for DNS to propagate before asking the ACME server to verify the DNS record. (default: 10) dns-sakuracloud: Obtain certificates using a DNS TXT record (if you are using Sakura Cloud for DNS). --dns-sakuracloud-propagation-seconds DNS_SAKURACLOUD_PROPAGATION_SECONDS The number of seconds to wait for DNS to propagate before asking the ACME server to verify the DNS record. (default: 90) --dns-sakuracloud-credentials DNS_SAKURACLOUD_CREDENTIALS Sakura Cloud credentials file. (default: None) manual: Authenticate through manual configuration or custom shell scripts. When using shell scripts, an authenticator script must be provided. The environment variables available to this script depend on the type of challenge. $CERTBOT_DOMAIN will always contain the domain being authenticated. For HTTP-01 and DNS-01, $CERTBOT_VALIDATION is the validation string, and $CERTBOT_TOKEN is the filename of the resource requested when performing an HTTP-01 challenge. An additional cleanup script can also be provided and can use the additional variable $ CERTBOT_AUTH_OUTPUT which contains the stdout output from the auth script. For both authenticator and cleanup script, on HTTP-01 and DNS-01 challenges, $CERTBOT_REMAINING_CHALLENGES will be equal to the number of challenges that remain after the current one, and $CERTBOT_ALL_DOMAINS contains a comma-separated list of all domains that are challenged for the current certificate. --manual-auth-hook MANUAL_AUTH_HOOK Path or command to execute for the authentication script (default: None) --manual-cleanup-hook MANUAL_CLEANUP_HOOK Path or command to execute for the cleanup script (default: None) nginx: Nginx Web Server plugin --nginx-server-root NGINX_SERVER_ROOT Nginx server root directory. (default: /etc/nginx or /usr/local/etc/nginx) --nginx-ctl NGINX_CTL Path to the 'nginx' binary, used for 'configtest' and retrieving nginx version number. (default: nginx) --nginx-sleep-seconds NGINX_SLEEP_SECONDS Number of seconds to wait for nginx configuration changes to apply when reloading. (default: 1) null: Null Installer standalone: Spin up a temporary webserver webroot: Place files in webroot directory --webroot-path WEBROOT_PATH, -w WEBROOT_PATH public_html / webroot path. This can be specified multiple times to handle different domains; each domain will have the webroot path that preceded it. For instance: `-w /var/www/example -d example.com -d www.example.com -w /var/www/thing -d thing.net -d m.thing.net` (default: Ask) --webroot-map WEBROOT_MAP JSON dictionary mapping domains to webroot paths; this implies -d for each entry. You may need to escape this from your shell. E.g.: --webroot-map '{\"eg1.is,m.eg1.is\":\"/www/eg1/\", \"eg2.is\":\"/www/eg2\"}' This option is merged with, but takes precedence over, -w / -d entries. At present, if you put webroot-map in a config file, it needs to be on a single line, like: webroot-map = {\"example.com\":\"/var/www\"}. (default: {})","title":"Certbot \u547d\u4ee4\u884c\u9009\u9879"},{"location":"certbot/using/#_20","text":"\u5982\u679c\u60a8\u6709\u95ee\u9898\uff0c\u6211\u4eec\u5efa\u8bae\u60a8\u5728 Let's Encrypt \u793e\u533a\u8bba\u575b \u4e0a\u53d1\u5e03\u3002. \u5982\u679c\u60a8\u5728\u8f6f\u4ef6\u4e2d\u53d1\u73b0 bug\uff0c\u8bf7\u5728\u6211\u4eec\u7684 \u95ee\u9898\u8ddf\u8e2a\u5668 \u4e2d\u62a5\u544a\u3002 \u8bb0\u5f97\u7ed9\u6211\u4eec\u5c3d\u53ef\u80fd\u591a\u7684\u4fe1\u606f: \u590d\u5236\u5e76\u7c98\u8d34\u6240\u4f7f\u7528\u7684\u547d\u4ee4\u884c\u548c\u8f93\u51fa(\u6ce8\u610f\u540e\u8005\u53ef\u80fd\u5305\u542b\u4e00\u4e9b\u4e2a\u4eba\u8eab\u4efd\u4fe1\u606f\uff0c\u5305\u62ec\u60a8\u7684\u7535\u5b50\u90ae\u4ef6\u548c\u57df\u540d) \u4ece /var/log/letsencrypt \u4e2d\u590d\u5236\u5e76\u7c98\u8d34\u65e5\u5fd7(\u5c3d\u7ba1\u6ce8\u610f\u5b83\u4eec\u4e5f\u53ef\u80fd\u5305\u542b\u4e2a\u4eba\u8eab\u4efd\u4fe1\u606f) \u590d\u5236\u5e76\u7c98\u8d34 certbot --version \u8f93\u51fa \u60a8\u7684\u64cd\u4f5c\u7cfb\u7edf\uff0c\u5305\u62ec\u7279\u5b9a\u7248\u672c \u6307\u5b9a\u60a8\u9009\u62e9\u7684\u5b89\u88c5\u65b9\u6cd5","title":"\u5f97\u5230\u5e2e\u52a9"},{"location":"certbot/what/","text":"\u4ec0\u4e48\u662f\u8bc1\u4e66? \u00b6 \u516c\u94a5\u6216\u6570\u5b57\u8bc1\u4e66(\u4ee5\u524d\u79f0\u4e3a SSL \u8bc1\u4e66)\u4f7f\u7528\u516c\u94a5\u548c\u79c1\u94a5\u5728\u5ba2\u6237\u7aef\u7a0b\u5e8f(web \u6d4f\u89c8\u5668\u3001\u7535\u5b50\u90ae\u4ef6\u5ba2\u6237\u7aef\u7b49)\u548c\u670d\u52a1\u5668\u4e4b\u95f4\u901a\u8fc7\u52a0\u5bc6\u7684 SSL(\u5b89\u5168\u5957\u63a5\u5b57\u5c42)\u6216 TLS(\u4f20\u8f93\u5c42\u5b89\u5168)\u8fde\u63a5\u5b9e\u73b0\u5b89\u5168\u901a\u4fe1\u3002 \u8bc1\u4e66\u65e2\u7528\u4e8e\u52a0\u5bc6\u901a\u4fe1\u7684\u521d\u59cb\u9636\u6bb5(\u5b89\u5168\u5bc6\u94a5\u4ea4\u6362)\uff0c\u4e5f\u7528\u4e8e\u6807\u8bc6\u670d\u52a1\u5668\u3002 \u8bc1\u4e66\u5305\u62ec\u6709\u5173\u5bc6\u94a5\u7684\u4fe1\u606f\u3001\u6709\u5173\u670d\u52a1\u5668\u8eab\u4efd\u7684\u4fe1\u606f\u4ee5\u53ca\u8bc1\u4e66\u9881\u53d1\u8005\u7684\u6570\u5b57\u7b7e\u540d\u3002 \u5982\u679c\u53d1\u8d77\u901a\u4fe1\u7684\u8f6f\u4ef6\u4fe1\u4efb\u9881\u53d1\u8005\uff0c\u5e76\u4e14\u7b7e\u540d\u6709\u6548\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u8be5\u5bc6\u94a5\u4e0e\u7531\u8bc1\u4e66\u6807\u8bc6\u7684\u670d\u52a1\u5668\u5b89\u5168\u5730\u901a\u4fe1\u3002 \u4f7f\u7528\u8bc1\u4e66\u662f\u9632\u6b62\u201c\u4e2d\u95f4\u4eba\u201d\u653b\u51fb\u7684\u597d\u65b9\u6cd5\uff0c\u5728\u8fd9\u79cd\u653b\u51fb\u4e2d\uff0c\u4f4d\u4e8e\u60a8\u548c\u60a8\u8ba4\u4e3a\u6b63\u5728\u4e0e\u4e4b\u5bf9\u8bdd\u7684\u670d\u52a1\u5668\u4e4b\u95f4\u7684\u67d0\u4eba\u80fd\u591f\u63d2\u5165\u4ed6\u4eec\u81ea\u5df1\u7684(\u6709\u5bb3\u7684)\u5185\u5bb9\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528 Certbot \u8f7b\u677e\u5730\u4ece Let\u2019s Encrypt \u83b7\u53d6\u548c\u914d\u7f6e\u514d\u8d39\u8bc1\u4e66\uff0cLet\u2019s Encrypt \u662f EFF\u3001Mozilla \u548c\u8bb8\u591a\u5176\u4ed6\u8d5e\u52a9\u5546\u7684\u8054\u5408\u9879\u76ee\u3002 \u8bc1\u4e66\u548c\u8840\u7edf \u00b6 Certbot \u5f15\u5165\u4e86\u6cbf\u88ad\u7684\u6982\u5ff5\uff0c\u5b83\u662f\u8bc1\u4e66\u7684\u6240\u6709\u7248\u672c\u7684\u96c6\u5408\uff0c\u52a0\u4e0a\u4ece\u66f4\u65b0\u5230\u66f4\u65b0\u671f\u95f4\u4e3a\u8be5\u8bc1\u4e66\u7ef4\u62a4\u7684 Certbot \u914d\u7f6e\u4fe1\u606f\u3002 \u5f53\u60a8\u66f4\u65b0\u8bc1\u4e66\u65f6\uff0cCertbot \u5c06\u4fdd\u6301\u76f8\u540c\u7684\u914d\u7f6e\uff0c\u9664\u975e\u60a8\u663e\u5f0f\u5730\u66f4\u6539\u5b83\uff0c\u4f8b\u5982\u6dfb\u52a0\u6216\u5220\u9664\u57df\u3002 \u5982\u679c\u60a8\u6dfb\u52a0\u57df\uff0c\u60a8\u53ef\u4ee5\u5c06\u5b83\u4eec\u6dfb\u52a0\u5230\u73b0\u6709\u6cbf\u88ad\u6216\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6cbf\u88ad\u3002 \u53e6\u8bf7\u53c2\u9605: \u91cd\u65b0\u521b\u5efa\u548c\u66f4\u65b0\u5df2\u6709\u8bc1\u4e66","title":"\u4ec0\u4e48\u662f\u8bc1\u4e66"},{"location":"certbot/what/#_1","text":"\u516c\u94a5\u6216\u6570\u5b57\u8bc1\u4e66(\u4ee5\u524d\u79f0\u4e3a SSL \u8bc1\u4e66)\u4f7f\u7528\u516c\u94a5\u548c\u79c1\u94a5\u5728\u5ba2\u6237\u7aef\u7a0b\u5e8f(web \u6d4f\u89c8\u5668\u3001\u7535\u5b50\u90ae\u4ef6\u5ba2\u6237\u7aef\u7b49)\u548c\u670d\u52a1\u5668\u4e4b\u95f4\u901a\u8fc7\u52a0\u5bc6\u7684 SSL(\u5b89\u5168\u5957\u63a5\u5b57\u5c42)\u6216 TLS(\u4f20\u8f93\u5c42\u5b89\u5168)\u8fde\u63a5\u5b9e\u73b0\u5b89\u5168\u901a\u4fe1\u3002 \u8bc1\u4e66\u65e2\u7528\u4e8e\u52a0\u5bc6\u901a\u4fe1\u7684\u521d\u59cb\u9636\u6bb5(\u5b89\u5168\u5bc6\u94a5\u4ea4\u6362)\uff0c\u4e5f\u7528\u4e8e\u6807\u8bc6\u670d\u52a1\u5668\u3002 \u8bc1\u4e66\u5305\u62ec\u6709\u5173\u5bc6\u94a5\u7684\u4fe1\u606f\u3001\u6709\u5173\u670d\u52a1\u5668\u8eab\u4efd\u7684\u4fe1\u606f\u4ee5\u53ca\u8bc1\u4e66\u9881\u53d1\u8005\u7684\u6570\u5b57\u7b7e\u540d\u3002 \u5982\u679c\u53d1\u8d77\u901a\u4fe1\u7684\u8f6f\u4ef6\u4fe1\u4efb\u9881\u53d1\u8005\uff0c\u5e76\u4e14\u7b7e\u540d\u6709\u6548\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u8be5\u5bc6\u94a5\u4e0e\u7531\u8bc1\u4e66\u6807\u8bc6\u7684\u670d\u52a1\u5668\u5b89\u5168\u5730\u901a\u4fe1\u3002 \u4f7f\u7528\u8bc1\u4e66\u662f\u9632\u6b62\u201c\u4e2d\u95f4\u4eba\u201d\u653b\u51fb\u7684\u597d\u65b9\u6cd5\uff0c\u5728\u8fd9\u79cd\u653b\u51fb\u4e2d\uff0c\u4f4d\u4e8e\u60a8\u548c\u60a8\u8ba4\u4e3a\u6b63\u5728\u4e0e\u4e4b\u5bf9\u8bdd\u7684\u670d\u52a1\u5668\u4e4b\u95f4\u7684\u67d0\u4eba\u80fd\u591f\u63d2\u5165\u4ed6\u4eec\u81ea\u5df1\u7684(\u6709\u5bb3\u7684)\u5185\u5bb9\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528 Certbot \u8f7b\u677e\u5730\u4ece Let\u2019s Encrypt \u83b7\u53d6\u548c\u914d\u7f6e\u514d\u8d39\u8bc1\u4e66\uff0cLet\u2019s Encrypt \u662f EFF\u3001Mozilla \u548c\u8bb8\u591a\u5176\u4ed6\u8d5e\u52a9\u5546\u7684\u8054\u5408\u9879\u76ee\u3002","title":"\u4ec0\u4e48\u662f\u8bc1\u4e66?"},{"location":"certbot/what/#_2","text":"Certbot \u5f15\u5165\u4e86\u6cbf\u88ad\u7684\u6982\u5ff5\uff0c\u5b83\u662f\u8bc1\u4e66\u7684\u6240\u6709\u7248\u672c\u7684\u96c6\u5408\uff0c\u52a0\u4e0a\u4ece\u66f4\u65b0\u5230\u66f4\u65b0\u671f\u95f4\u4e3a\u8be5\u8bc1\u4e66\u7ef4\u62a4\u7684 Certbot \u914d\u7f6e\u4fe1\u606f\u3002 \u5f53\u60a8\u66f4\u65b0\u8bc1\u4e66\u65f6\uff0cCertbot \u5c06\u4fdd\u6301\u76f8\u540c\u7684\u914d\u7f6e\uff0c\u9664\u975e\u60a8\u663e\u5f0f\u5730\u66f4\u6539\u5b83\uff0c\u4f8b\u5982\u6dfb\u52a0\u6216\u5220\u9664\u57df\u3002 \u5982\u679c\u60a8\u6dfb\u52a0\u57df\uff0c\u60a8\u53ef\u4ee5\u5c06\u5b83\u4eec\u6dfb\u52a0\u5230\u73b0\u6709\u6cbf\u88ad\u6216\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6cbf\u88ad\u3002 \u53e6\u8bf7\u53c2\u9605: \u91cd\u65b0\u521b\u5efa\u548c\u66f4\u65b0\u5df2\u6709\u8bc1\u4e66","title":"\u8bc1\u4e66\u548c\u8840\u7edf"},{"location":"docker-nginx-certbot/","text":"docker-nginx-certbot \u00b6 https://github.com/JonasAlfredsson/docker-nginx-certbot \u4f7f\u7528 Let's Encrypt \u514d\u8d39\u8bc1\u4e66\u9881\u53d1\u673a\u6784\u53ca\u5176\u5ba2\u6237\u7aef certbot \u81ea\u52a8\u521b\u5efa\u548c\u66f4\u65b0\u7f51\u7ad9 SSL \u8bc1\u4e66\u3002 \u6784\u5efa\u5728 \u5b98\u65b9 Nginx Docker \u955c\u50cf (Debian \u548c Alpine)\u4e4b\u4e0a\uff0c\u5e76\u4f7f\u7528 OpenSSL/LibreSSL \u81ea\u52a8\u521b\u5efa\u4e00\u4e9b\u5bc6\u7801\u521d\u59cb\u63e1\u624b\u65f6\u4f7f\u7528\u7684 Diffie-Hellman \u53c2\u6570\u3002 \u8fd9\u4e2a\u5bb9\u5668\u7b2c\u4e00\u6b21\u542f\u52a8\u65f6\uff0c\u53ef\u80fd\u9700\u8981\u5f88\u957f\u65f6\u95f4\u624d\u80fd\u54cd\u5e94\u8bf7\u6c42\u3002 \u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u89c1 Diffie-Hellman parameters \u90e8\u5206\u3002 \u5728\u8fdb\u884c Docker pull \u64cd\u4f5c\u65f6\uff0c\u8bf7\u4f7f\u7528 \u7279\u5b9a\u6807\u7b7e \uff0c\u56e0\u4e3a :latest \u53ef\u80fd\u5e76\u4e0d\u603b\u662f 100%\u7a33\u5b9a\u3002 \u503c\u5f97\u6ce8\u610f\u7684\u7279\u6027 \u00b6 \u5f53 \u8bf7\u6c42\u8bc1\u4e66 (i.e. both example.com and www.example.com )\u65f6\u5904\u7406\u591a\u4e2a\u670d\u52a1\u5668\u540d. \u5904\u7406\u901a\u914d\u7b26\u57df\u8bf7\u6c42\uff0c\u4ee5\u9632\u60a8\u4f7f\u7528 DNS \u8eab\u4efd\u9a8c\u8bc1 . \u53ef\u4ee5 \u540c\u65f6 \u7533\u8bf7 RSA \u548c ECDSA \u8bc1\u4e66 \u5982\u679c\u5df2\u5b9a\u4e49\uff0c\u5c06\u521b\u5efa Diffie-Hellman \u53c2\u6570 \u3002 \u4f7f\u7528 \u7236\u5bb9\u5668 \u7684 /docker-entrypoint.d/ \u6587\u4ef6\u5939\u3002 \u5f53\u505c\u6b62/\u6740\u6b7b/\u5931\u8d25\u65f6\uff0c\u5c06\u62a5\u544a\u6b63\u786e\u7684 \u9000\u51fa\u4ee3\u7801 \u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7 \u53d1\u9001\u4e00\u4e2a SIGHUP \u4fe1\u53f7\u6765\u91cd\u65b0\u52a0\u8f7d\u914d\u7f6e(\u4e0d\u9700\u8981\u91cd\u65b0\u542f\u52a8\u5bb9\u5668)\u3002 \u5728 \u672c\u5730 CA \u7684\u5e2e\u52a9\u4e0b \u79bb\u7ebf \u4f7f\u7528\u6b64\u6620\u50cf\u7684\u53ef\u80fd\u6027. \u4e3a \u591a\u4e2a\u4f53\u7cfb\u7ed3\u6784 \u6784\u5efa\u7684 Debian \u548c Alpine \u6620\u50cf. \u4f7f\u7528 \u00b6 \u5f00\u59cb\u4e4b\u524d \u00b6 \u672c\u6307\u5357\u5e0c\u671b\u60a8\u5df2\u7ecf\u62e5\u6709\u4e00\u4e2a\u6307\u5411\u6b63\u786e IP \u5730\u5740\u7684\u57df\uff0c\u5e76\u4e14\u5982\u679c\u60a8\u4f7f\u7528 NAT\uff0c\u60a8\u7684\u7aef\u53e3 80 and 443 \u90fd\u88ab\u6b63\u786e\u8f6c\u53d1\u3002 \u5426\u5219\uff0c\u6211\u63a8\u8350 DuckDNS \u4f5c\u4e3a\u52a8\u6001 DNS \u63d0\u4f9b\u5546\uff0c\u7136\u540e\u641c\u7d22\u5982\u4f55\u5728\u4f60\u7684\u8def\u7531\u5668\u4e0a\u7aef\u53e3\u8f6c\u53d1\uff0c\u6216\u8005\u53ef\u80fd\u627e\u5230\u5b83 \u8fd9\u91cc \u3002 \u6211\u5efa\u8bae\u60a8\u81f3\u5c11\u9605\u8bfb Good to Know \u6587\u6863\u4e2d\u7684\u524d\u4e24\u90e8\u5206\uff0c\u56e0\u4e3a\u8fd9\u5c06\u4e3a\u60a8\u63d0\u4f9b\u4e00\u4e9b\u5173\u4e8e\u5982\u4f55\u521b\u5efa\u57fa\u672c\u670d\u52a1\u5668\u914d\u7f6e\u4ee5\u53ca\u5982\u4f55\u4f7f\u7528 Let's Encrypt \u9884\u6f14\u670d\u52a1\u5668\u4ee5\u4e0d\u53d7\u901f\u7387\u9650\u5236\u7684\u91cd\u8981\u63d0\u793a\u3002 \u6211\u8ba4\u4e3a\u6ca1\u6709\u5fc5\u8981\u63d0\u53ca\u4f60\u662f\u5426\u627e\u5230\u4e86\u8fd9\u4e2a\u5b58\u50a8\u5e93\uff0c\u4f46\u4f60\u9700\u8981\u5b89\u88c5 Docker \u624d\u80fd\u6b63\u5e38\u5de5\u4f5c\u3002 \u53ef\u7528\u7684\u73af\u5883\u53d8\u91cf \u00b6 \u5fc5\u9009 \u00b6 CERTBOT_EMAIL : \u4f60\u7684\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u3002Let's Encrypt \u7528\u4e8e\u5728\u51fa\u73b0\u5b89\u5168\u95ee\u9898\u65f6\u4e0e\u60a8\u8054\u7cfb\u3002 \u53ef\u9009 \u00b6 DHPARAM_SIZE : Diffie-Hellman \u53c2\u6570 \u7684\u5927\u5c0f (default: 2048 ) ELLIPTIC_CURVE : The size/ curve of the ECDSA keys (default: secp256r1 ) RENEWAL_INTERVAL : Time interval between certbot's renewal checks (default: 8d ) RSA_KEY_SIZE : The size of the RSA encryption keys (default: 2048 ) STAGING : Set to 1 to use Let's Encrypt's staging servers (default: 0 ) USE_ECDSA : Set to 0 to have certbot use RSA instead of ECDSA (default: 1 ) \u5148\u8fdb\u7684 \u00b6 CERTBOT_AUTHENTICATOR : The authenticator plugin to use when responding to challenges (default: webroot ) CERTBOT_DNS_PROPAGATION_SECONDS : The number of seconds to wait for the DNS challenge to propagate (default: certbot's default) DEBUG : Set to 1 to enable debug messages and use the nginx-debug binary (default: 0 ) USE_LOCAL_CA : Set to 1 to enable the use of a local certificate authority (default: 0 ) \u5377 \u00b6 /etc/letsencrypt : \u4fdd\u5b58\u83b7\u53d6\u7684\u8bc1\u4e66\u548c Diffie-Hellman \u53c2\u6570 \u8fd0\u884c docker run \u00b6 Create your own user_conf.d/ folder and place all of you custom server config files in there. When done you can just start the container with the following command ( available tags ): docker run -it -p 80 :80 -p 443 :443 \\ --env CERTBOT_EMAIL = your@email.org \\ -v $( pwd ) /nginx_secrets:/etc/letsencrypt \\ -v $( pwd ) /user_conf.d:/etc/nginx/user_conf.d:ro \\ --name nginx-certbot jonasal/nginx-certbot:latest You should be able to detach from the container by holding Ctrl and pressing p + q after each other. As was mentioned in the introduction; the very first time this container is started it might take a long time before before it is ready to respond to requests , please be a little bit patient. If you change any of the config files after the container is ready, you can just send in a SIGHUP to tell the scripts and Nginx to reload everything. docker kill --signal = HUP <container_name> \u8fd0\u884c docker-compose \u00b6 An example of a docker-compose.yaml file can be found in the examples/ folder. The default parameters that are found inside the nginx-certbot.env file will be overwritten by any environment variables you set inside the .yaml file. NOTE: You can use both environment: and env_file: together or only one of them, the only requirement is that `CERTBOT_EMAIL` is defined somewhere. Like in the example above, you just need to place your custom server configs inside your user_conf.d/ folder beforehand. Then you start it all with the following command. docker-compose up \u81ea\u5df1\u6784\u5efa \u00b6 \u5982\u679c\u4f60\u5236\u4f5c\u4e86\u81ea\u5df1\u7684 Dockerfile \uff0c\u8fd9\u4e2a\u9009\u9879\u662f\u9002\u7528\u7684\u3002 \u5728 \u672c\u6587\u6863 \u6216 Docker Hub \u4e0a\u67e5\u770b\u54ea\u4e9b\u6807\u8bb0\u53ef\u7528\uff0c\u7136\u540e\u9009\u62e9\u60a8\u60f3\u8981\u7684\u5177\u4f53\u7a0b\u5ea6\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b8c\u5168\u53ef\u4ee5\u8df3\u8fc7[ user_conf.d/ ]\u6587\u4ef6\u5939\uff0c\u76f4\u63a5\u5c06\u6587\u4ef6\u5199\u5165 Nginx \u7684 conf.d/ \u6587\u4ef6\u5939\u3002 \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u60a8\u53ef\u4ee5\u7528\u81ea\u5df1\u7684\u6587\u4ef6\u66ff\u6362\u6211\u6784\u5efa\u7684 \u5230\u6620\u50cf \u3002 \u4f46\u662f\uff0c\u5982\u679c\u60a8\u8fd9\u6837\u505a\uff0c\u8bf7\u82b1\u70b9\u65f6\u95f4\u6765\u7406\u89e3\u5b83\u4eec\u662f\u505a\u4ec0\u4e48\u7684\uff0c\u4ee5\u53ca\u4e3a\u4e86\u8ba9 certbot \u7ee7\u7eed\u5de5\u4f5c\uff0c\u60a8\u9700\u8981\u5305\u62ec\u4ec0\u4e48\u3002 FROM jonasal/nginx-certbot:latest COPY conf.d/* /etc/nginx/conf.d/ \u6d4b\u8bd5 \u00b6 \u6211\u4eec\u4f7f\u7528 BATS \u6765\u6d4b\u8bd5\u8fd9\u4e2a\u4ee3\u7801\u5e93\u7684\u90e8\u5206\u5185\u5bb9\u3002 \u8fd0\u884c\u6240\u6709\u6d4b\u8bd5\u7684\u6700\u7b80\u5355\u65b9\u6cd5\u662f\u5728\u6b64\u5b58\u50a8\u5e93\u7684\u6839\u76ee\u5f55\u4e2d\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4: docker run -it --rm -v \" $( pwd ) :/workdir\" ffurrer/bats:latest ./tests \u66f4\u591a\u7684\u8d44\u6e90 \u00b6 \u8fd9\u91cc\u662f\u5176\u4ed6\u8d44\u6e90\u7684\u94fe\u63a5\u96c6\u5408\uff0c\u53ef\u4ee5\u63d0\u4f9b\u6709\u7528\u7684\u4fe1\u606f\u3002 Good to Know : \u4e86\u89e3\u8fd9\u4e2a\u56fe\u50cf\u548c\u5b83\u63d0\u4f9b\u7684\u529f\u80fd\u6709\u5f88\u591a\u597d\u5904\u3002 Changelog : \u6b64\u5b58\u50a8\u5e93\u7684\u6240\u6709\u6807\u8bb0\u7248\u672c\u7684\u5217\u8868\uff0c\u4ee5\u53ca\u5404\u4e2a\u7248\u672c\u4e4b\u95f4\u53d1\u751f\u53d8\u5316\u7684\u9879\u76ee\u7b26\u53f7\u3002 DockerHub Tags : Docker Hub \u63d0\u4f9b\u7684\u6240\u6709\u6807\u8bb0\u3002 Advanced Usage : \u6709\u5173\u6b64\u6620\u50cf\u63d0\u4f9b\u7684\u66f4\u9ad8\u7ea7\u529f\u80fd\u7684\u4fe1\u606f\u3002 Certbot Authenticators : \u5173\u4e8e\u6b64\u6620\u50cf\u4e2d\u53ef\u7528\u7684\u4e0d\u540c\u8eab\u4efd\u9a8c\u8bc1\u5668\u7684\u4fe1\u606f\u3002 Nginx Tips : \u4e00\u4e9b\u5173\u4e8e\u5982\u4f55\u914d\u7f6e Nginx \u7684\u6709\u8da3\u63d0\u793a\u3002 \u5916\u90e8\u6307\u5357 \u00b6 Here is a list of projects that use this image in various creative ways. Take a look and see if one of these helps or inspires you to do something similar: A Node.js application served over HTTPS in AWS Elastic Beanstalk Host your own Nakama server \u81f4\u8c22\u53ca\u611f\u8c22 \u00b6 This container requests SSL certificates from Let's Encrypt , with the help of their certbot script, which they provide for the absolutely bargain price of free! If you like what they do, please donate . This repository was originally forked from @henridwyer by @staticfloat , before it was forked again by me. However, the changes to the code has since become so significant that this has now been detached as its own independent repository (while still retaining all the history). Migration instructions, from @staticfloat 's image, can be found here .","title":"\u5165\u95e8\u624b\u518c"},{"location":"docker-nginx-certbot/#docker-nginx-certbot","text":"https://github.com/JonasAlfredsson/docker-nginx-certbot \u4f7f\u7528 Let's Encrypt \u514d\u8d39\u8bc1\u4e66\u9881\u53d1\u673a\u6784\u53ca\u5176\u5ba2\u6237\u7aef certbot \u81ea\u52a8\u521b\u5efa\u548c\u66f4\u65b0\u7f51\u7ad9 SSL \u8bc1\u4e66\u3002 \u6784\u5efa\u5728 \u5b98\u65b9 Nginx Docker \u955c\u50cf (Debian \u548c Alpine)\u4e4b\u4e0a\uff0c\u5e76\u4f7f\u7528 OpenSSL/LibreSSL \u81ea\u52a8\u521b\u5efa\u4e00\u4e9b\u5bc6\u7801\u521d\u59cb\u63e1\u624b\u65f6\u4f7f\u7528\u7684 Diffie-Hellman \u53c2\u6570\u3002 \u8fd9\u4e2a\u5bb9\u5668\u7b2c\u4e00\u6b21\u542f\u52a8\u65f6\uff0c\u53ef\u80fd\u9700\u8981\u5f88\u957f\u65f6\u95f4\u624d\u80fd\u54cd\u5e94\u8bf7\u6c42\u3002 \u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u89c1 Diffie-Hellman parameters \u90e8\u5206\u3002 \u5728\u8fdb\u884c Docker pull \u64cd\u4f5c\u65f6\uff0c\u8bf7\u4f7f\u7528 \u7279\u5b9a\u6807\u7b7e \uff0c\u56e0\u4e3a :latest \u53ef\u80fd\u5e76\u4e0d\u603b\u662f 100%\u7a33\u5b9a\u3002","title":"docker-nginx-certbot"},{"location":"docker-nginx-certbot/#_1","text":"\u5f53 \u8bf7\u6c42\u8bc1\u4e66 (i.e. both example.com and www.example.com )\u65f6\u5904\u7406\u591a\u4e2a\u670d\u52a1\u5668\u540d. \u5904\u7406\u901a\u914d\u7b26\u57df\u8bf7\u6c42\uff0c\u4ee5\u9632\u60a8\u4f7f\u7528 DNS \u8eab\u4efd\u9a8c\u8bc1 . \u53ef\u4ee5 \u540c\u65f6 \u7533\u8bf7 RSA \u548c ECDSA \u8bc1\u4e66 \u5982\u679c\u5df2\u5b9a\u4e49\uff0c\u5c06\u521b\u5efa Diffie-Hellman \u53c2\u6570 \u3002 \u4f7f\u7528 \u7236\u5bb9\u5668 \u7684 /docker-entrypoint.d/ \u6587\u4ef6\u5939\u3002 \u5f53\u505c\u6b62/\u6740\u6b7b/\u5931\u8d25\u65f6\uff0c\u5c06\u62a5\u544a\u6b63\u786e\u7684 \u9000\u51fa\u4ee3\u7801 \u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7 \u53d1\u9001\u4e00\u4e2a SIGHUP \u4fe1\u53f7\u6765\u91cd\u65b0\u52a0\u8f7d\u914d\u7f6e(\u4e0d\u9700\u8981\u91cd\u65b0\u542f\u52a8\u5bb9\u5668)\u3002 \u5728 \u672c\u5730 CA \u7684\u5e2e\u52a9\u4e0b \u79bb\u7ebf \u4f7f\u7528\u6b64\u6620\u50cf\u7684\u53ef\u80fd\u6027. \u4e3a \u591a\u4e2a\u4f53\u7cfb\u7ed3\u6784 \u6784\u5efa\u7684 Debian \u548c Alpine \u6620\u50cf.","title":"\u503c\u5f97\u6ce8\u610f\u7684\u7279\u6027"},{"location":"docker-nginx-certbot/#_2","text":"","title":"\u4f7f\u7528"},{"location":"docker-nginx-certbot/#_3","text":"\u672c\u6307\u5357\u5e0c\u671b\u60a8\u5df2\u7ecf\u62e5\u6709\u4e00\u4e2a\u6307\u5411\u6b63\u786e IP \u5730\u5740\u7684\u57df\uff0c\u5e76\u4e14\u5982\u679c\u60a8\u4f7f\u7528 NAT\uff0c\u60a8\u7684\u7aef\u53e3 80 and 443 \u90fd\u88ab\u6b63\u786e\u8f6c\u53d1\u3002 \u5426\u5219\uff0c\u6211\u63a8\u8350 DuckDNS \u4f5c\u4e3a\u52a8\u6001 DNS \u63d0\u4f9b\u5546\uff0c\u7136\u540e\u641c\u7d22\u5982\u4f55\u5728\u4f60\u7684\u8def\u7531\u5668\u4e0a\u7aef\u53e3\u8f6c\u53d1\uff0c\u6216\u8005\u53ef\u80fd\u627e\u5230\u5b83 \u8fd9\u91cc \u3002 \u6211\u5efa\u8bae\u60a8\u81f3\u5c11\u9605\u8bfb Good to Know \u6587\u6863\u4e2d\u7684\u524d\u4e24\u90e8\u5206\uff0c\u56e0\u4e3a\u8fd9\u5c06\u4e3a\u60a8\u63d0\u4f9b\u4e00\u4e9b\u5173\u4e8e\u5982\u4f55\u521b\u5efa\u57fa\u672c\u670d\u52a1\u5668\u914d\u7f6e\u4ee5\u53ca\u5982\u4f55\u4f7f\u7528 Let's Encrypt \u9884\u6f14\u670d\u52a1\u5668\u4ee5\u4e0d\u53d7\u901f\u7387\u9650\u5236\u7684\u91cd\u8981\u63d0\u793a\u3002 \u6211\u8ba4\u4e3a\u6ca1\u6709\u5fc5\u8981\u63d0\u53ca\u4f60\u662f\u5426\u627e\u5230\u4e86\u8fd9\u4e2a\u5b58\u50a8\u5e93\uff0c\u4f46\u4f60\u9700\u8981\u5b89\u88c5 Docker \u624d\u80fd\u6b63\u5e38\u5de5\u4f5c\u3002","title":"\u5f00\u59cb\u4e4b\u524d"},{"location":"docker-nginx-certbot/#_4","text":"","title":"\u53ef\u7528\u7684\u73af\u5883\u53d8\u91cf"},{"location":"docker-nginx-certbot/#_5","text":"CERTBOT_EMAIL : \u4f60\u7684\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u3002Let's Encrypt \u7528\u4e8e\u5728\u51fa\u73b0\u5b89\u5168\u95ee\u9898\u65f6\u4e0e\u60a8\u8054\u7cfb\u3002","title":"\u5fc5\u9009"},{"location":"docker-nginx-certbot/#_6","text":"DHPARAM_SIZE : Diffie-Hellman \u53c2\u6570 \u7684\u5927\u5c0f (default: 2048 ) ELLIPTIC_CURVE : The size/ curve of the ECDSA keys (default: secp256r1 ) RENEWAL_INTERVAL : Time interval between certbot's renewal checks (default: 8d ) RSA_KEY_SIZE : The size of the RSA encryption keys (default: 2048 ) STAGING : Set to 1 to use Let's Encrypt's staging servers (default: 0 ) USE_ECDSA : Set to 0 to have certbot use RSA instead of ECDSA (default: 1 )","title":"\u53ef\u9009"},{"location":"docker-nginx-certbot/#_7","text":"CERTBOT_AUTHENTICATOR : The authenticator plugin to use when responding to challenges (default: webroot ) CERTBOT_DNS_PROPAGATION_SECONDS : The number of seconds to wait for the DNS challenge to propagate (default: certbot's default) DEBUG : Set to 1 to enable debug messages and use the nginx-debug binary (default: 0 ) USE_LOCAL_CA : Set to 1 to enable the use of a local certificate authority (default: 0 )","title":"\u5148\u8fdb\u7684"},{"location":"docker-nginx-certbot/#_8","text":"/etc/letsencrypt : \u4fdd\u5b58\u83b7\u53d6\u7684\u8bc1\u4e66\u548c Diffie-Hellman \u53c2\u6570","title":"\u5377"},{"location":"docker-nginx-certbot/#docker-run","text":"Create your own user_conf.d/ folder and place all of you custom server config files in there. When done you can just start the container with the following command ( available tags ): docker run -it -p 80 :80 -p 443 :443 \\ --env CERTBOT_EMAIL = your@email.org \\ -v $( pwd ) /nginx_secrets:/etc/letsencrypt \\ -v $( pwd ) /user_conf.d:/etc/nginx/user_conf.d:ro \\ --name nginx-certbot jonasal/nginx-certbot:latest You should be able to detach from the container by holding Ctrl and pressing p + q after each other. As was mentioned in the introduction; the very first time this container is started it might take a long time before before it is ready to respond to requests , please be a little bit patient. If you change any of the config files after the container is ready, you can just send in a SIGHUP to tell the scripts and Nginx to reload everything. docker kill --signal = HUP <container_name>","title":"\u8fd0\u884c docker run"},{"location":"docker-nginx-certbot/#docker-compose","text":"An example of a docker-compose.yaml file can be found in the examples/ folder. The default parameters that are found inside the nginx-certbot.env file will be overwritten by any environment variables you set inside the .yaml file. NOTE: You can use both environment: and env_file: together or only one of them, the only requirement is that `CERTBOT_EMAIL` is defined somewhere. Like in the example above, you just need to place your custom server configs inside your user_conf.d/ folder beforehand. Then you start it all with the following command. docker-compose up","title":"\u8fd0\u884c docker-compose"},{"location":"docker-nginx-certbot/#_9","text":"\u5982\u679c\u4f60\u5236\u4f5c\u4e86\u81ea\u5df1\u7684 Dockerfile \uff0c\u8fd9\u4e2a\u9009\u9879\u662f\u9002\u7528\u7684\u3002 \u5728 \u672c\u6587\u6863 \u6216 Docker Hub \u4e0a\u67e5\u770b\u54ea\u4e9b\u6807\u8bb0\u53ef\u7528\uff0c\u7136\u540e\u9009\u62e9\u60a8\u60f3\u8981\u7684\u5177\u4f53\u7a0b\u5ea6\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b8c\u5168\u53ef\u4ee5\u8df3\u8fc7[ user_conf.d/ ]\u6587\u4ef6\u5939\uff0c\u76f4\u63a5\u5c06\u6587\u4ef6\u5199\u5165 Nginx \u7684 conf.d/ \u6587\u4ef6\u5939\u3002 \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u60a8\u53ef\u4ee5\u7528\u81ea\u5df1\u7684\u6587\u4ef6\u66ff\u6362\u6211\u6784\u5efa\u7684 \u5230\u6620\u50cf \u3002 \u4f46\u662f\uff0c\u5982\u679c\u60a8\u8fd9\u6837\u505a\uff0c\u8bf7\u82b1\u70b9\u65f6\u95f4\u6765\u7406\u89e3\u5b83\u4eec\u662f\u505a\u4ec0\u4e48\u7684\uff0c\u4ee5\u53ca\u4e3a\u4e86\u8ba9 certbot \u7ee7\u7eed\u5de5\u4f5c\uff0c\u60a8\u9700\u8981\u5305\u62ec\u4ec0\u4e48\u3002 FROM jonasal/nginx-certbot:latest COPY conf.d/* /etc/nginx/conf.d/","title":"\u81ea\u5df1\u6784\u5efa"},{"location":"docker-nginx-certbot/#_10","text":"\u6211\u4eec\u4f7f\u7528 BATS \u6765\u6d4b\u8bd5\u8fd9\u4e2a\u4ee3\u7801\u5e93\u7684\u90e8\u5206\u5185\u5bb9\u3002 \u8fd0\u884c\u6240\u6709\u6d4b\u8bd5\u7684\u6700\u7b80\u5355\u65b9\u6cd5\u662f\u5728\u6b64\u5b58\u50a8\u5e93\u7684\u6839\u76ee\u5f55\u4e2d\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4: docker run -it --rm -v \" $( pwd ) :/workdir\" ffurrer/bats:latest ./tests","title":"\u6d4b\u8bd5"},{"location":"docker-nginx-certbot/#_11","text":"\u8fd9\u91cc\u662f\u5176\u4ed6\u8d44\u6e90\u7684\u94fe\u63a5\u96c6\u5408\uff0c\u53ef\u4ee5\u63d0\u4f9b\u6709\u7528\u7684\u4fe1\u606f\u3002 Good to Know : \u4e86\u89e3\u8fd9\u4e2a\u56fe\u50cf\u548c\u5b83\u63d0\u4f9b\u7684\u529f\u80fd\u6709\u5f88\u591a\u597d\u5904\u3002 Changelog : \u6b64\u5b58\u50a8\u5e93\u7684\u6240\u6709\u6807\u8bb0\u7248\u672c\u7684\u5217\u8868\uff0c\u4ee5\u53ca\u5404\u4e2a\u7248\u672c\u4e4b\u95f4\u53d1\u751f\u53d8\u5316\u7684\u9879\u76ee\u7b26\u53f7\u3002 DockerHub Tags : Docker Hub \u63d0\u4f9b\u7684\u6240\u6709\u6807\u8bb0\u3002 Advanced Usage : \u6709\u5173\u6b64\u6620\u50cf\u63d0\u4f9b\u7684\u66f4\u9ad8\u7ea7\u529f\u80fd\u7684\u4fe1\u606f\u3002 Certbot Authenticators : \u5173\u4e8e\u6b64\u6620\u50cf\u4e2d\u53ef\u7528\u7684\u4e0d\u540c\u8eab\u4efd\u9a8c\u8bc1\u5668\u7684\u4fe1\u606f\u3002 Nginx Tips : \u4e00\u4e9b\u5173\u4e8e\u5982\u4f55\u914d\u7f6e Nginx \u7684\u6709\u8da3\u63d0\u793a\u3002","title":"\u66f4\u591a\u7684\u8d44\u6e90"},{"location":"docker-nginx-certbot/#_12","text":"Here is a list of projects that use this image in various creative ways. Take a look and see if one of these helps or inspires you to do something similar: A Node.js application served over HTTPS in AWS Elastic Beanstalk Host your own Nakama server","title":"\u5916\u90e8\u6307\u5357"},{"location":"docker-nginx-certbot/#_13","text":"This container requests SSL certificates from Let's Encrypt , with the help of their certbot script, which they provide for the absolutely bargain price of free! If you like what they do, please donate . This repository was originally forked from @henridwyer by @staticfloat , before it was forked again by me. However, the changes to the code has since become so significant that this has now been detached as its own independent repository (while still retaining all the history). Migration instructions, from @staticfloat 's image, can be found here .","title":"\u81f4\u8c22\u53ca\u611f\u8c22"},{"location":"docker-nginx-certbot/docs/advanced_usage/","text":"\u9ad8\u7ea7\u7528\u6cd5 \u00b6 \u8fd9\u4e2a\u6587\u6863\u5305\u542b\u4e86\u5173\u4e8e\u88ab\u8ba4\u4e3a\u662f\u201c\u9ad8\u7ea7\u201d\u7684\u7279\u6027\u7684\u4fe1\u606f\uff0c\u5e76\u4e14\u5f88\u53ef\u80fd\u9700\u8981\u4f60\u9605\u8bfb\u4e00\u4e9b\u5b9e\u9645\u7684\u4ee3\u7801\u6765\u5b8c\u5168\u7406\u89e3\u53d1\u751f\u4e86\u4ec0\u4e48\u3002 \u624b\u52a8/\u5f3a\u5236 \u66f4\u65b0 \u00b6 \u624b\u52a8\u89e6\u53d1\u8bc1\u4e66\u7684\u66f4\u65b0\u53ef\u80fd\u4f1a\u5f88\u6709\u8da3\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48 run_certbot.sh (1) \u811a\u672c\u53ef\u4ee5\u5728\u4efb\u4f55\u65f6\u5019\u4ece\u5bb9\u5668\u4e2d\u72ec\u7acb\u8fd0\u884c\u7684\u539f\u56e0\u3002 ../src/scripts/run_certbot.sh #!/bin/bash set -e # URLs used when requesting certificates. # These are picked up from the environment if they are set, which enables # advanced usage of custom ACME servers, else it will use the default Let's # Encrypt servers defined here. : \" ${CERTBOT_PRODUCTION_URL=https://acme-v02.api.letsencrypt.org/directory}\" : \" ${CERTBOT_STAGING_URL=https://acme-staging-v02.api.letsencrypt.org/directory}\" # Source in util.sh so we can have our nice tools. . \" $ (cd \" $ (dirname \" $0\" )\" ; pwd)/util.sh\" info \"Starting certificate renewal process\" # We require an email to be able to request a certificate. if [ -z \" ${CERTBOT_EMAIL}\" ] ; then error \"CERTBOT_EMAIL environment variable undefined ; certbot will do nothing!\" exit 1 fi # Use the correct challenge URL depending on if we want staging or not. if [ \" ${STAGING}\" = \"1\" ] ; then debug \"Using staging environment\" letsencrypt_url=\" ${CERTBOT_STAGING_URL}\" else debug \"Using production environment\" letsencrypt_url=\" ${CERTBOT_PRODUCTION_URL}\" fi # Ensure that an RSA key size is set. if [ -z \" ${RSA_KEY_SIZE}\" ] ; then debug \"RSA_KEY_SIZE unset, defaulting to 2048 \" RSA_KEY_SIZE=2048 fi # Ensure that an elliptic curve is set. if [ -z \" ${ELLIPTIC_CURVE}\" ] ; then debug \"ELLIPTIC_CURVE unset, defaulting to 'secp256r1'\" ELLIPTIC_CURVE=\"secp256r1\" fi if [ \" ${1}\" = \"force\" ] ; then info \"Forcing renewal of certificates\" force_renew=\"--force-renewal\" fi # Helper function to ask certbot to request a certificate for the given cert # name. The CERTBOT_EMAIL environment variable must be defined, so that # Let's Encrypt may contact you in case of security issues. # # $1: The name of the certificate (e.g. domain.rsa.dns-rfc2136) # $2: String with all requested domains (e.g. -d domain.org -d www.domain.org) # $3: Type of key algorithm to use (rsa or ecdsa) # $4: The authenticator to use to solve the challenge get_certificate() { local authenticator=\" ${4,,}\" local authenticator_params=\"\" local challenge_type=\"\" # Add correct parameters for the different authenticator types. if [ \" ${authenticator}\" == \"webroot\" ] ; then challenge_type=\"http-01\" authenticator_params=\"--webroot-path=/var/www/letsencrypt\" elif [[ \" ${authenticator}\" == dns-* ]] ; then challenge_type=\"dns-01\" if [ \" ${authenticator #dns-}\" == \"route53\" ]; then # This one is special and makes use of a different configuration. if [[ ( -z \" ${AWS_ACCESS_KEY_ID}\" || -z \" ${AWS_SECRET_ACCESS_KEY}\" ) && ! -f \" ${HOME}/.aws/config\" ]] ; then error \"Authenticator is ' ${authenticator}' but neither ' ${HOME}/.aws/config' or AWS_ACCESS_KEY_ID + AWS_SECRET_ACCESS_KEY are found\" return 1 fi else local configfile=\"/etc/letsencrypt/ ${authenticator #dns-}.ini\" if [ ! -f \" ${configfile}\" ] ; then error \"Authenticator is ' ${authenticator}' but ' ${configfile}' is missing\" return 1 fi authenticator_params=\"-- ${authenticator}-credentials=${configfile}\" fi if [ -n \" ${CERTBOT_DNS_PROPAGATION_SECONDS}\" ] ; then authenticator_params=\" ${authenticator_params} -- ${authenticator}-propagation-seconds=${CERTBOT_DNS_PROPAGATION_SECONDS}\" fi else error \"Unknown authenticator ' ${authenticator}' for ' ${1}'\" return 1 fi info \"Requesting an ${3^^} certificate for ' ${1}' ( ${challenge_type} through ${authenticator} )\" certbot certonly \\ --agree-tos --keep -n --text \\ --preferred-challenges ${challenge_type} \\ --authenticator ${authenticator} \\ ${authenticator_params} \\ --email \" ${CERTBOT_EMAIL}\" \\ --server \" ${letsencrypt_url}\" \\ --rsa-key-size \" ${RSA_KEY_SIZE}\" \\ --elliptic-curve \" ${ELLIPTIC_CURVE}\" \\ --key-type \" ${3}\" \\ --cert-name \" ${1}\" \\ ${2} \\ --debug ${force_renew} } # Get all the cert names for which we should create certificate requests and # have them signed, along with the corresponding server names. # # This will return an associative array that looks something like this: # \"cert_name\" => \"server_name1 server_name2\" declare -A certificates for conf_file in /etc/nginx/conf.d/*.conf* ; do parse_config_file \" ${conf_file}\" certificates done # Iterate over each key and make a certificate request for them. for cert_name in \" ${!certificates[@]}\" ; do server_names=( ${certificates[\"$cert_name\"]} ) # Determine which type of key algorithm to use for this certificate # request. Having the algorithm specified in the certificate name will # take precedence over the environmental variable. if [[ \" ${cert_name,,}\" =~ (^|[-.])ecdsa([-.]|$) ]] ; then debug \"Found variant of 'ECDSA' in name ' ${cert_name}\" key_type=\"ecdsa\" elif [[ \" ${cert_name,,}\" =~ (^|[-.])ecc([-.]|$) ]] ; then debug \"Found variant of 'ECC' in name ' ${cert_name}\" key_type=\"ecdsa\" elif [[ \" ${cert_name,,}\" =~ (^|[-.])rsa([-.]|$) ]] ; then debug \"Found variant of 'RSA' in name ' ${cert_name}\" key_type=\"rsa\" elif [ \" ${USE_ECDSA}\" == \"0\" ] ; then key_type=\"rsa\" else key_type=\"ecdsa\" fi # Determine the authenticator to use to solve the authentication challenge. # Having the authenticator specified in the certificate name will take # precedence over the environmental variable. if [[ \" ${cert_name,,}\" =~ (^|[-.])webroot([-.]|$) ]] ; then authenticator=\"webroot\" debug \"Found mention of 'webroot' in name ' ${cert_name}\" elif [[ \" ${cert_name,,}\" =~ (^|[-.])(dns-($(echo ${CERTBOT_DNS_AUTHENTICATORS} | sed 's/ /|/g')))([-.]| $ ) ]] ; then authenticator= ${BASH_REMATCH[2]} debug \"Found mention of authenticator ' ${authenticator}' in name ' ${cert_name}'\" elif [ -n \" ${CERTBOT_AUTHENTICATOR}\" ] ; then authenticator=\" ${CERTBOT_AUTHENTICATOR}\" else authenticator=\"webroot\" fi # Assemble the list of domains to be included in the request from # the parsed 'server_names' domain_request=\"\" for server_name in \" ${server_names[@]}\" ; do domain_request=\" ${domain_request} -d ${server_name}\" done # Hand over all the info required for the certificate request, and # let certbot decide if it is necessary to update the certificate. if ! get_certificate \" ${cert_name}\" \" ${domain_request}\" \" ${key_type}\" \" ${authenticator}\" ; then error \"Certbot failed for ' ${cert_name}'. Check the logs for details.\" fi done # After trying to get all our certificates, auto enable any configs that we # did indeed get certificates for. auto_enable_configs # Finally, tell Nginx to reload the configs. nginx -s reload \u7136\u800c\uff0c\u8bf7\u6c42\u91cd\u65b0\u52a0\u8f7d\u6240\u6709\u914d\u7f6e\u6587\u4ef6\u7684\u9996\u9009\u65b9\u6cd5\u662f\u5411\u5bb9\u5668\u53d1\u9001 SIGHUP : docker kill --signal = HUP <container_name> \u8fd9\u5c06\u7ec8\u6b62 \u7761\u7720\u8ba1\u65f6\u5668 \uff0c\u5e76\u4f7f\u66f4\u65b0\u5faa\u73af\u4ece\u5934\u5f00\u59cb\uff0c\u5176\u4e2d\u5305\u62ec\u8bb8\u591a\u5176\u4ed6\u68c0\u67e5\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u8bc1\u4e66\u3002 \u867d\u7136\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u8fd9\u5c31\u8db3\u591f\u4e86\uff0c\u4f46\u6709\u65f6\u53ef\u80fd\u9700\u8981 \u5f3a\u5236 \u66f4\u65b0\u8bc1\u4e66\uff0c\u5373\u4f7f certbot \u8ba4\u4e3a\u5b83\u53ef\u4ee5\u4fdd\u7559\u8bc1\u4e66\u4e00\u6bb5\u65f6\u95f4(\u5c31\u50cf \u8fd9\u4e2a \u53d1\u751f\u65f6)\u3002 \u56e0\u6b64\uff0c\u5f53\u8c03\u7528 run_certbot.sh \u811a\u672c\u65f6\uff0c\u53ef\u4ee5\u6dfb\u52a0 force \u4f5c\u4e3a\u53c2\u6570\uff0c\u4f7f\u5176\u5c06 --force-renewal \u6807\u8bb0\u9644\u52a0\u5230\u6240\u53d1\u51fa\u7684\u8bf7\u6c42\u4e0a\u3002 docker exec -it <container_name> /scripts/run_certbot.sh force \u8fd9\u5c06\u8bf7\u6c42\u65b0\u7684\u8bc1\u4e66\uff0c\u800c\u4e0d\u7ba1\u5b83\u4eec\u4f55\u65f6\u88ab\u8bbe\u7f6e\u4e3a\u8fc7\u671f\u3002 \u4f7f\u7528 force \u4f1a\u5bf9 \u6240\u6709 \u8bc1\u4e66\u53d1\u51fa\u65b0\u7684\u8bf7\u6c42\uff0c\u6240\u4ee5\u4e0d\u8981\u7ecf\u5e38\u8fd0\u884c\u5b83\uff0c\u56e0\u4e3a\u8bf7\u6c42 \u751f\u4ea7\u8bc1\u4e66 \u662f\u6709\u9650\u5236\u7684\u3002 \u8986\u76d6 server_name \u00b6 Nginx \u5141\u8bb8\u4f60\u5728 server_name declaration \u4e2d\u505a\u5f88\u591a\u4e8b\u60c5\uff0c\u4f46\u7531\u4e8e\u8fd9\u4e2a\u6620\u50cf\u4e2d\u7684\u811a\u672c\u4ece\u76f8\u540c\u7684\u884c\u4e2d\u7ec4\u6210\u8bc1\u4e66\u8bf7\u6c42\uff0c\u6211\u4eec\u5728\u8fd9\u4e9b\u884c\u4e2d\u53ef\u80fd\u5b9a\u4e49\u7684\u5185\u5bb9\u53d7\u5230\u4e25\u91cd\u9650\u5236\u3002 \u4f8b\u5982\uff0c\u884c server_name mail.* \u5c06\u4ea7\u751f\u4e00\u4e2a\u57df\u540d mail.* \u7684\u8bc1\u4e66\u8bf7\u6c42\uff0c\u8be5\u57df\u540d\u65e0\u6548\u3002 \u7136\u800c\uff0c\u4e3a\u4e86\u514b\u670d\u8fd9\u79cd\u9650\u5236\uff0c\u53ef\u4ee5\u5728\u540c\u4e00\u884c\u4e0a\u5b9a\u4e49\u4e00\u4e2a\u7279\u6b8a\u7684\u6ce8\u91ca\uff0c\u4ee5\u8986\u76d6\u811a\u672c\u5c06\u62fe\u53d6\u7684\u5185\u5bb9\u3002 \u5728\u8fd9\u4e2a\u4eba\u4e3a\u7684\u4f8b\u5b50\u4e2d server { listen 443 ssl ; ssl_certificate_key /etc/letsencrypt/live/test-name/privkey.pem ; server_name yourdomain.org ; server_name www.yourdomain.org ; # certbot_domain:*.yourdomain.org server_name sub.yourdomain.org ; # certbot_domain:*.yourdomain.org server_name mail.* ; # certbot_domain:*.yourdomain.org server_name ~ ^(?<user>.+)\\.yourdomain\\.org$; ... } \u6211\u4eec\u5c06\u4ee5\u4e00\u4e2a\u8bc1\u4e66\u8bf7\u6c42\u7ed3\u675f\uff0c\u5b83\u770b\u8d77\u6765\u50cf\u8fd9\u6837: certbot --cert-name \"test-name\" ... -d yourdomain.org -d *.yourdomain.org \u7b2c\u4e00\u4e2a\u670d\u52a1\u5668\u540d\u79f0\u5c06\u50cf\u5f80\u5e38\u4e00\u6837\u88ab\u9009\u4e2d\uff0c\u800c\u4e0b\u9762\u4e09\u4e2a\u5c06\u88ab\u6ce8\u91ca\u4e2d\u7684\u57df\u540d\u906e\u853d\uff0c\u5373 *.yourdomain.org (\u91cd\u590d\u7684\u540d\u79f0\u5c06\u5728\u6700\u7ec8\u8bf7\u6c42\u4e2d\u5220\u9664)\u3002 \u6700\u540e\u4e00\u4e2a\u670d\u52a1\u5668\u540d\u662f\u7279\u6b8a\u7684\uff0c\u56e0\u4e3a\u5b83\u662f\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u5e76\u4e14\u603b\u662f\u4ee5 ~ \u5f00\u5934\u3002 \u56e0\u4e3a\u6211\u4eec\u77e5\u9053\u6211\u4eec\u6c38\u8fdc\u4e0d\u80fd\u4ece\u4e00\u4e2a\u4ee5\u8be5\u5b57\u7b26\u5f00\u5934\u7684\u540d\u79f0\u521b\u5efa\u4e00\u4e2a\u6709\u6548\u7684\u8bf7\u6c42\uff0c\u5b83\u4eec\u5c06\u603b\u662f\u88ab\u811a\u672c\u5ffd\u7565(\u540e\u9762\u7684\u6ce8\u91ca\u5c06\u4f18\u5148\u800c\u4e0d\u662f\u88ab\u5ffd\u7565)\u3002 \u66f4\u8be6\u7ec6\u7684\u793a\u4f8b\u53ef\u4ee5\u5728 example_server_overrides.conf \u4e2d\u67e5\u770b\u3002. ../examples/example_server_overrides.conf server { # Listen to port 443 on both IPv4 and IPv6. listen 443 ssl ; listen [::]:443 ssl ; # Domain names this server should respond to. server_name yourdomain.org ; server_name www.yourdomain.org ; # certbot_domain:*.yourdomain.org # Load the certificate files. ssl_certificate /etc/letsencrypt/live/test-name/fullchain.pem ; ssl_certificate_key /etc/letsencrypt/live/test-name/privkey.pem ; ssl_trusted_certificate /etc/letsencrypt/live/test-name/chain.pem ; # Load the Diffie-Hellman parameter. ssl_dhparam /etc/letsencrypt/dhparams/dhparam.pem ; return 200 'You have reached either yourdomain.org or www.yourdomain.org' ; add_header Content-Type text/plain ; } server { listen 443 ssl ; listen [::]:443 ssl ; server_name sub1.yourdomain.org sub2.yourdomain.org ; # certbot_domain:*.yourdomain.org ssl_certificate /etc/letsencrypt/live/test-name/fullchain.pem ; ssl_certificate_key /etc/letsencrypt/live/test-name/privkey.pem ; ssl_trusted_certificate /etc/letsencrypt/live/test-name/chain.pem ; ssl_dhparam /etc/letsencrypt/dhparams/dhparam.pem ; return 200 'You have reached either sub1.yourdomain.org or sub2.yourdomain.org' ; add_header Content-Type text/plain ; } server { listen 443 ssl ; listen [::]:443 ssl ; # Server names that start with ~ will be ignored, and in this example the # \"test-name\" certificate will already include *.yourdomain.org which will # cover all the cases here. server_name ~ ^(?<user>.+)\\.yourdomain\\.org$; ssl_certificate /etc/letsencrypt/live/test-name/fullchain.pem ; ssl_certificate_key /etc/letsencrypt/live/test-name/privkey.pem ; ssl_trusted_certificate /etc/letsencrypt/live/test-name/chain.pem ; ssl_dhparam /etc/letsencrypt/dhparams/dhparam.pem ; location / { # Return content based on the capture group in the server name. # Note: \"sub1\" and \"sub2\" will be caught by the sever above. root /content/ $user ; } } server { # Drop any request that does not match any of the other server names. listen 443 ssl default_server ; ssl_reject_handshake on ; } \u91cd\u8981\u7684\u662f\u8981\u8bb0\u4f4f\uff0c\u8fd9\u91cc\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u901a\u914d\u7b26\u57df\u540d( *.yourdomain.org \u4e2d\u7684 * )\uff0c\u8fd9\u8981\u6c42\u60a8\u4f7f\u7528\u80fd\u591f\u8fdb\u884c DNS-01 \u6311\u6218\u7684\u9a8c\u8bc1\u5668\uff0c\u6709\u5173\u6b64\u7684\u66f4\u591a\u4fe1\u606f\u53ef\u4ee5\u5728 certbot_authenticators.md \u6587\u6863\u4e2d\u627e\u5230\u3002 \u591a\u8bc1\u4e66\u8bbe\u7f6e \u00b6 \u8fd9\u662f Good to Know \u6587\u6863\u4e2d RSA \u548c ECDSA \u90e8\u5206\u7684\u5ef6\u7eed\uff0c\u5176\u4e2d\u7b80\u8981\u63d0\u5230\uff0c\u5b9e\u9645\u4e0a\u53ef\u4ee5\u8ba9 Nginx \u540c\u65f6\u670d\u52a1\u4e8e\u8fd9\u4e24\u79cd\u8bc1\u4e66\u7c7b\u578b\uff0c\u4ece\u800c\u518d\u6b21\u6269\u5c55\u5bf9\u534a\u65e7\u8bbe\u5907\u7684\u652f\u6301\uff0c\u540c\u65f6\u8fd8\u5141\u8bb8\u4f7f\u7528\u6700\u65b0\u7684\u52a0\u5bc6\u3002 \u8bbe\u7f6e \u7a0d\u5fae\u590d\u6742\u4e00\u4e9b\uff0c\u4f46\u662f example_server_multicert.conf \u6587\u4ef6\u5e94\u8be5\u88ab\u914d\u7f6e\uff0c\u56e0\u6b64\u60a8\u5e94\u8be5\u53ea\u9700\u8981\u7f16\u8f91\u9876\u90e8\u7684\"yourdomain.org\"\u8bed\u53e5\u3002 ../examples/example_server_multicert.conf server { # Listen to port 443 on both IPv4 and IPv6. listen 443 ssl default_server reuseport ; listen [::]:443 ssl default_server reuseport ; # Domain names this server should respond to. server_name yourdomain.org www.yourdomain.org ; # Load the ECDSA certificates. ssl_certificate /etc/letsencrypt/live/test-ecc/fullchain.pem ; ssl_certificate_key /etc/letsencrypt/live/test-ecc/privkey.pem ; # Load the RSA certificates. ssl_certificate /etc/letsencrypt/live/test-rsa/fullchain.pem ; ssl_certificate_key /etc/letsencrypt/live/test-rsa/privkey.pem ; # Load the Diffie-Hellman parameter. ssl_dhparam /etc/letsencrypt/dhparams/dhparam.pem ; # Define the ciphers to use in the preferred order. ssl_protocols TLSv1.2 TLSv1.3 ; ssl_prefer_server_ciphers on ; ssl_ciphers \"EECDH+ECDSA+AESGCM:EECDH+aRSA+AESGCM:EECDH+ECDSA+SHA384:EECDH+ECDSA+SHA256:EECDH+aRSA+SHA384:EECDH+aRSA+SHA256:EECDH:DHE+AESGCM:DHE:!RSA!aNULL:!eNULL:!LOW:!RC4:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS:!CAMELLIA:!SEED\" ; return 200 'Let\\'s Encrypt certificate successfully installed!' ; add_header Content-Type text/plain ; } \u5b83\u7684\u5de5\u4f5c\u539f\u7406\u662f Nginx \u80fd\u591f\u4e3a\u6bcf\u4e2a\u670d\u52a1\u5668\u5757 \u52a0\u8f7d\u591a\u4e2a\u8bc1\u4e66\u6587\u4ef6 \uff0c\u7136\u540e\u4f60\u6309\u7167\u4f18\u5148\u9009\u62e9 ECDSA \u8bc1\u4e66\u7684\u987a\u5e8f\u914d\u7f6e\u5bc6\u7801\u5957\u4ef6\u3002 \u5728\u5bb9\u5668\u5185\u8fd0\u884c\u7684 scripts \u7136\u540e\u5728 --cert-name \u53c2\u6570\u4e2d\u5bfb\u627e\u8fd9\u4e9b\u5b57\u7b26\u4e32\u7684\u4e00\u4e9b(\u4e0d\u533a\u5206\u5927\u5c0f\u5199)\u53d8\u4f53: -rsa .rsa -ecc .ecc -ecdsa .ecdsa \u5e76\u4f7f\u7528\u6b63\u786e\u7684\u7c7b\u578b\u96c6\u53d1\u51fa\u8bc1\u4e66\u8bf7\u6c42\u3002 \u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 \u5b9e\u9645\u63d0\u4ea4 \uff0c\u4f46\u60a8\u9700\u8981\u77e5\u9053\u7684\u662f\uff0c\u5982\u679c\u53d1\u73b0\u8fd9\u4e9b\u9009\u9879\uff0c\u5b83\u4eec\u5c06\u8986\u76d6 USE_ECDSA \u73af\u5883\u53d8\u91cf\u3002 \u4f7f\u7528\u81ea\u5b9a\u4e49 ACME URL \u00b6 \u5728 run_certbot.sh \u811a\u672c\u7684\u9876\u90e8\u6709\u4e24\u4e2a\u53d8\u91cf: CERTBOT_PRODUCTION_URL CERTBOT_STAGING_URL \u5b83\u4eec\u7528\u4e8e\u5b9a\u4e49\u5728\u8bf7\u6c42\u65b0\u8bc1\u4e66\u65f6 certbot \u5c06\u5c1d\u8bd5\u8054\u7cfb\u54ea\u4e2a\u670d\u52a1\u5668\u3002 \u8fd9\u4e9b\u53d8\u91cf\u5177\u6709\u9ed8\u8ba4\u503c\uff0c\u4f46\u662f\u53ef\u4ee5\u901a\u8fc7\u5b9a\u4e49\u5177\u6709\u76f8\u540c\u540d\u79f0\u7684\u73af\u5883\u53d8\u91cf\u6765\u8986\u76d6\u5b83\u4eec\u3002 \u8fd9\u5141\u8bb8\u60a8\u5c06 certbot \u91cd\u5b9a\u5411\u5230\u53e6\u4e00\u4e2a\u81ea\u5b9a\u4e49 URL(\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u6b63\u5728\u8fd0\u884c\u81ea\u5df1\u7684\u81ea\u5b9a\u4e49 AMCE \u670d\u52a1\u5668)\u3002 \u672c\u5730 CA \u00b6 \u5728\u4e00\u4e2a\u7f51\u7ad9\u7684\u5f00\u53d1\u9636\u6bb5\uff0c\u4f60\u53ef\u80fd\u5728\u4e00\u53f0\u6ca1\u6709\u6307\u5411\u81ea\u5df1\u7684 DNS \u8bb0\u5f55\u7684\u8ba1\u7b97\u673a\u4e0a\u6d4b\u8bd5\u4e1c\u897f\uff0c\u6216\u8005\u5b83\u53ef\u80fd\u6839\u672c\u6ca1\u6709\u4e92\u8054\u7f51\u8bbf\u95ee\u3002 \u7531\u4e8e certbot \u9700\u8981\u8fd9\u4e24\u4e2a\u6761\u4ef6\u624d\u80fd\u6b63\u5e38\u5de5\u4f5c\uff0c\u56e0\u6b64\u5728\u8fd9\u4e9b\u7279\u6b8a\u60c5\u51b5\u4e0b\uff0c\u4ee5\u524d\u4e0d\u53ef\u80fd\u4f7f\u7528\u8fd9\u4e2a\u56fe\u50cf\u3002 \u8fd9\u5c31\u662f\u521b\u5efa run_local_ca.sh \u811a\u672c\u7684\u539f\u56e0\uff0c\u56e0\u4e3a\u8fd9\u4f7f\u5f97\u4f7f\u7528 \u672c\u5730(\u81ea\u7b7e\u540d)\u8bc1\u4e66\u9881\u53d1\u673a\u6784 \u53ef\u4ee5\u5728\u4e0d\u4f9d\u8d56\u4efb\u4f55\u5916\u90e8\u670d\u52a1\u6216\u4e92\u8054\u7f51\u8fde\u63a5\u7684\u60c5\u51b5\u4e0b\u9881\u53d1\u7f51\u7ad9\u8bc1\u4e66\u6210\u4e3a\u53ef\u80fd\u3002 \u5b83\u8fd8\u4f7f\u6211\u4eec\u80fd\u591f\u9881\u53d1\u5bf9 localhost \u548c/\u6216 ::1 \u7b49 IP \u5730\u5740\u6709\u6548\u7684\u8bc1\u4e66\uff0c\u5426\u5219 certbot \u65e0\u6cd5 \u521b\u5efa\u8fd9\u4e9b\u5730\u5740\u3002 To enable the usage of this local CA you just set USE_LOCAL_CA=1 , and this will then trigger the execution of the run_local_ca.sh script instead of the run_certbot.sh one when it is time to renew the certificates. This script, when run, will always overwrite any previous keys and certificates, so alternating between the use of a local CA and certbot without first emptying the /etc/letsencrypt folder is not supported. The script is designed to mimic certbot as closely as reasonable, so the keys/certs created are placed in the same locations as certbot would have. This means that you only have to edit the server_name in your server configuration files to include the variant that you want for your local instance (e.g. localhost ) and you should be all set. However, if you navigate to your site at this point you will run into an error named similar to Firefox's SEC_ERROR_UNKNOWN_ISSUER , which just means that your browser does not recognize the CA that has signed your site's certificate. This is expected (since we just created our own local CA), but at this point the connection is using all the fancy HTTPS stuff, and is thus \"secure\", so you can just ignore this warning if you want. Another solution is to import the local CA's certificate created by this script into your browser, thus making this a known certificate authority and any of its signed certs trusted. What this file is, and how to obtain it, is explained further in the next section . \u6587\u4ef6\u548c\u6587\u4ef6\u5939 \u00b6 \u672c\u5730 CA \u8981\u8fd0\u884c\uff0c\u9700\u8981\u505a\u51e0\u4ef6\u4e8b: caPrivkey.pem : CA \u4f7f\u7528\u7684\u79c1\u94a5->\u8fd9\u662f\u6700\u673a\u5bc6\u7684\u4e1c\u897f(\u5728\u771f\u5b9e CA \u7684\u60c5\u51b5\u4e0b)\uff0c\u5fc5\u987b\u4e0d\u60dc\u4e00\u5207\u4ee3\u4ef7\u4fdd\u62a4\u5b83\u3002 caCert.pem : \u6240\u6709\u5ba2\u6237\u7aef\u90fd\u9700\u8981 CA \u7684\u516c\u5171\u8bc1\u4e66\u90e8\u5206\uff0c\u4ee5\u4fbf\u4fe1\u4efb\u6b64 CA \u7b7e\u7f72\u7684\u4efb\u4f55\u5176\u4ed6\u8bc1\u4e66\u3002 serial.txt : CA \u6bcf\u6b21\u7b7e\u7f72\u65b0\u8bc1\u4e66\u65f6\u52a0 1 \u7684\u957f\u968f\u673a\u5341\u516d\u8fdb\u5236\u6570\u3002 index.txt : \u4fdd\u5b58\u6b64 CA \u5df2\u9881\u53d1\u7684\u6240\u6709\u8bc1\u4e66\u7684 \u8bb0\u5f55 \u3002 new_certs/ : \u5b58\u653e\u6240\u6709\u65b0\u7b7e\u7f72\u8bc1\u4e66\u526f\u672c\u7684\u6587\u4ef6\u5939\u3002 All of these are created automatically by the script inside the folder defined by LOCAL_CA_DIR (which defaults to /etc/local_ca ), so by host mounting this folder you will be able to see all these files. By then taking the caCert.pem and importing it in your browser you will be able to visit these sites without the error stating that the certificate is signed by an unknown authority. The validity period for the automatically created CA is only 30 days, and the reason for this is to deter people from using this solution in production. An important thing to know is that these files are only created if they do not exist. What this enables is an even more advanced usecase where you might already have a private key and certificate that you trust on your devices, so you would like to continue using it for the websites you host as well. Read more about this in the next section . \u521b\u5efa\u81ea\u5b9a\u4e49 CA \u00b6 \u5982\u524d\u4e00\u8282\u6240\u8ff0\uff0c\u53ef\u4ee5\u4e3a run_local_ca.sh \u811a\u672c\u63d0\u4f9b\u60a8\u624b\u52a8\u521b\u5efa\u7684\u672c\u5730\u8bc1\u4e66\u9881\u53d1\u673a\u6784\uff0c\u8be5\u8bc1\u4e66\u9881\u53d1\u673a\u6784\u7684\u6709\u6548\u671f\u53ef\u80fd\u8d85\u8fc7 30 \u5929\uff0c\u5e76\u4e14\u60a8\u5e0c\u671b\u5728\u5176\u4ed6\u591a\u4e2a\u8bbe\u5907\u4e0a\u4fe1\u4efb\u8be5\u8bc1\u4e66\u9881\u53d1\u673a\u6784\u3002 \u8fd9\u662f\u4e00\u79cd\u89e3\u51b3\u65b9\u6848\uff0c\u5982\u679c\u60a8\u60f3\u5728\u6c38\u8fdc\u65e0\u6cd5\u901a\u8fc7\u5f00\u653e\u4e92\u8054\u7f51\u8bbf\u95ee\u7684\u670d\u52a1\u4e0a\u8bbe\u7f6e HTTPS\uff0c\u4f46\u60a8\u4ecd\u7136\u5e0c\u671b\u5b83\u4eec\u7684\u901a\u4fe1\u662f\u5b89\u5168\u7684\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u8be5\u89e3\u51b3\u65b9\u6848\u3002 \u57fa\u672c\u4e0a\uff0c\u4f60\u6240\u9700\u8981\u505a\u7684\u5c31\u662f\u4e3b\u673a\u6302\u8f7d\u4f60\u7684\u81ea\u5b9a\u4e49\u79c1\u94a5\u548c\u8bc1\u4e66\u5230 LOCAL_CA_DIR \uff0c\u811a\u672c\u5c06\u4f7f\u7528\u8fd9\u4e9b\u79c1\u94a5\u548c\u8bc1\u4e66\uff0c\u800c\u4e0d\u662f\u81ea\u52a8\u521b\u5efa\u7684\u77ed\u65f6\u95f4\u7684\u79c1\u94a5\u548c\u8bc1\u4e66\u3002 \u53ea\u9700\u786e\u4fdd\u6587\u4ef6\u7684\u547d\u540d\u7b26\u5408 \u811a\u672c\u671f\u671b\u7684 \uff0c\u5982\u679c\u8fd9\u4e9b\u7ec4\u4ef6\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u7f3a\u5931\uff0c\u5b83\u4eec\u5c06\u5728\u670d\u52a1\u7b2c\u4e00\u6b21\u542f\u52a8\u65f6\u521b\u5efa\u3002 \u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u4e0d\u652f\u6301\u5bc6\u7801\u4fdd\u62a4\u7684\u79c1\u94a5\u3002 I did not find it trivial to create a well configured CA, so if you want to go this route I really suggest that you read up on what you are doing and making sure all settings are correctly tuned for your usecase. There is a lot of high-level information available in regards to how to create your own CA, but what I found most confusing was exactly what was expected to be inside the openssl.cnf file that is necessary to have when running most of the OpenSSL commands. The configuration that is present inside the run_local_ca.sh script should be quite minimalistic for what we need, while still providing the strict settings that some clients need else they will reject these custom certificates. The most comprehensive guide I have found is the OpenSSL Cookbook , which goes into great detail about basically everything OpenSSL is able to do, along with this post which summarizes the settings needed for different certificate types. With these two you should be able to make an informed configuration in case you want to create your own custom certificate authority, and you may of course take a look at the commands used in the generate_ca() function to help you on your way of creating your own files.","title":"\u9ad8\u7ea7\u7528\u6cd5"},{"location":"docker-nginx-certbot/docs/advanced_usage/#_1","text":"\u8fd9\u4e2a\u6587\u6863\u5305\u542b\u4e86\u5173\u4e8e\u88ab\u8ba4\u4e3a\u662f\u201c\u9ad8\u7ea7\u201d\u7684\u7279\u6027\u7684\u4fe1\u606f\uff0c\u5e76\u4e14\u5f88\u53ef\u80fd\u9700\u8981\u4f60\u9605\u8bfb\u4e00\u4e9b\u5b9e\u9645\u7684\u4ee3\u7801\u6765\u5b8c\u5168\u7406\u89e3\u53d1\u751f\u4e86\u4ec0\u4e48\u3002","title":"\u9ad8\u7ea7\u7528\u6cd5"},{"location":"docker-nginx-certbot/docs/advanced_usage/#_2","text":"\u624b\u52a8\u89e6\u53d1\u8bc1\u4e66\u7684\u66f4\u65b0\u53ef\u80fd\u4f1a\u5f88\u6709\u8da3\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48 run_certbot.sh (1) \u811a\u672c\u53ef\u4ee5\u5728\u4efb\u4f55\u65f6\u5019\u4ece\u5bb9\u5668\u4e2d\u72ec\u7acb\u8fd0\u884c\u7684\u539f\u56e0\u3002 ../src/scripts/run_certbot.sh #!/bin/bash set -e # URLs used when requesting certificates. # These are picked up from the environment if they are set, which enables # advanced usage of custom ACME servers, else it will use the default Let's # Encrypt servers defined here. : \" ${CERTBOT_PRODUCTION_URL=https://acme-v02.api.letsencrypt.org/directory}\" : \" ${CERTBOT_STAGING_URL=https://acme-staging-v02.api.letsencrypt.org/directory}\" # Source in util.sh so we can have our nice tools. . \" $ (cd \" $ (dirname \" $0\" )\" ; pwd)/util.sh\" info \"Starting certificate renewal process\" # We require an email to be able to request a certificate. if [ -z \" ${CERTBOT_EMAIL}\" ] ; then error \"CERTBOT_EMAIL environment variable undefined ; certbot will do nothing!\" exit 1 fi # Use the correct challenge URL depending on if we want staging or not. if [ \" ${STAGING}\" = \"1\" ] ; then debug \"Using staging environment\" letsencrypt_url=\" ${CERTBOT_STAGING_URL}\" else debug \"Using production environment\" letsencrypt_url=\" ${CERTBOT_PRODUCTION_URL}\" fi # Ensure that an RSA key size is set. if [ -z \" ${RSA_KEY_SIZE}\" ] ; then debug \"RSA_KEY_SIZE unset, defaulting to 2048 \" RSA_KEY_SIZE=2048 fi # Ensure that an elliptic curve is set. if [ -z \" ${ELLIPTIC_CURVE}\" ] ; then debug \"ELLIPTIC_CURVE unset, defaulting to 'secp256r1'\" ELLIPTIC_CURVE=\"secp256r1\" fi if [ \" ${1}\" = \"force\" ] ; then info \"Forcing renewal of certificates\" force_renew=\"--force-renewal\" fi # Helper function to ask certbot to request a certificate for the given cert # name. The CERTBOT_EMAIL environment variable must be defined, so that # Let's Encrypt may contact you in case of security issues. # # $1: The name of the certificate (e.g. domain.rsa.dns-rfc2136) # $2: String with all requested domains (e.g. -d domain.org -d www.domain.org) # $3: Type of key algorithm to use (rsa or ecdsa) # $4: The authenticator to use to solve the challenge get_certificate() { local authenticator=\" ${4,,}\" local authenticator_params=\"\" local challenge_type=\"\" # Add correct parameters for the different authenticator types. if [ \" ${authenticator}\" == \"webroot\" ] ; then challenge_type=\"http-01\" authenticator_params=\"--webroot-path=/var/www/letsencrypt\" elif [[ \" ${authenticator}\" == dns-* ]] ; then challenge_type=\"dns-01\" if [ \" ${authenticator #dns-}\" == \"route53\" ]; then # This one is special and makes use of a different configuration. if [[ ( -z \" ${AWS_ACCESS_KEY_ID}\" || -z \" ${AWS_SECRET_ACCESS_KEY}\" ) && ! -f \" ${HOME}/.aws/config\" ]] ; then error \"Authenticator is ' ${authenticator}' but neither ' ${HOME}/.aws/config' or AWS_ACCESS_KEY_ID + AWS_SECRET_ACCESS_KEY are found\" return 1 fi else local configfile=\"/etc/letsencrypt/ ${authenticator #dns-}.ini\" if [ ! -f \" ${configfile}\" ] ; then error \"Authenticator is ' ${authenticator}' but ' ${configfile}' is missing\" return 1 fi authenticator_params=\"-- ${authenticator}-credentials=${configfile}\" fi if [ -n \" ${CERTBOT_DNS_PROPAGATION_SECONDS}\" ] ; then authenticator_params=\" ${authenticator_params} -- ${authenticator}-propagation-seconds=${CERTBOT_DNS_PROPAGATION_SECONDS}\" fi else error \"Unknown authenticator ' ${authenticator}' for ' ${1}'\" return 1 fi info \"Requesting an ${3^^} certificate for ' ${1}' ( ${challenge_type} through ${authenticator} )\" certbot certonly \\ --agree-tos --keep -n --text \\ --preferred-challenges ${challenge_type} \\ --authenticator ${authenticator} \\ ${authenticator_params} \\ --email \" ${CERTBOT_EMAIL}\" \\ --server \" ${letsencrypt_url}\" \\ --rsa-key-size \" ${RSA_KEY_SIZE}\" \\ --elliptic-curve \" ${ELLIPTIC_CURVE}\" \\ --key-type \" ${3}\" \\ --cert-name \" ${1}\" \\ ${2} \\ --debug ${force_renew} } # Get all the cert names for which we should create certificate requests and # have them signed, along with the corresponding server names. # # This will return an associative array that looks something like this: # \"cert_name\" => \"server_name1 server_name2\" declare -A certificates for conf_file in /etc/nginx/conf.d/*.conf* ; do parse_config_file \" ${conf_file}\" certificates done # Iterate over each key and make a certificate request for them. for cert_name in \" ${!certificates[@]}\" ; do server_names=( ${certificates[\"$cert_name\"]} ) # Determine which type of key algorithm to use for this certificate # request. Having the algorithm specified in the certificate name will # take precedence over the environmental variable. if [[ \" ${cert_name,,}\" =~ (^|[-.])ecdsa([-.]|$) ]] ; then debug \"Found variant of 'ECDSA' in name ' ${cert_name}\" key_type=\"ecdsa\" elif [[ \" ${cert_name,,}\" =~ (^|[-.])ecc([-.]|$) ]] ; then debug \"Found variant of 'ECC' in name ' ${cert_name}\" key_type=\"ecdsa\" elif [[ \" ${cert_name,,}\" =~ (^|[-.])rsa([-.]|$) ]] ; then debug \"Found variant of 'RSA' in name ' ${cert_name}\" key_type=\"rsa\" elif [ \" ${USE_ECDSA}\" == \"0\" ] ; then key_type=\"rsa\" else key_type=\"ecdsa\" fi # Determine the authenticator to use to solve the authentication challenge. # Having the authenticator specified in the certificate name will take # precedence over the environmental variable. if [[ \" ${cert_name,,}\" =~ (^|[-.])webroot([-.]|$) ]] ; then authenticator=\"webroot\" debug \"Found mention of 'webroot' in name ' ${cert_name}\" elif [[ \" ${cert_name,,}\" =~ (^|[-.])(dns-($(echo ${CERTBOT_DNS_AUTHENTICATORS} | sed 's/ /|/g')))([-.]| $ ) ]] ; then authenticator= ${BASH_REMATCH[2]} debug \"Found mention of authenticator ' ${authenticator}' in name ' ${cert_name}'\" elif [ -n \" ${CERTBOT_AUTHENTICATOR}\" ] ; then authenticator=\" ${CERTBOT_AUTHENTICATOR}\" else authenticator=\"webroot\" fi # Assemble the list of domains to be included in the request from # the parsed 'server_names' domain_request=\"\" for server_name in \" ${server_names[@]}\" ; do domain_request=\" ${domain_request} -d ${server_name}\" done # Hand over all the info required for the certificate request, and # let certbot decide if it is necessary to update the certificate. if ! get_certificate \" ${cert_name}\" \" ${domain_request}\" \" ${key_type}\" \" ${authenticator}\" ; then error \"Certbot failed for ' ${cert_name}'. Check the logs for details.\" fi done # After trying to get all our certificates, auto enable any configs that we # did indeed get certificates for. auto_enable_configs # Finally, tell Nginx to reload the configs. nginx -s reload \u7136\u800c\uff0c\u8bf7\u6c42\u91cd\u65b0\u52a0\u8f7d\u6240\u6709\u914d\u7f6e\u6587\u4ef6\u7684\u9996\u9009\u65b9\u6cd5\u662f\u5411\u5bb9\u5668\u53d1\u9001 SIGHUP : docker kill --signal = HUP <container_name> \u8fd9\u5c06\u7ec8\u6b62 \u7761\u7720\u8ba1\u65f6\u5668 \uff0c\u5e76\u4f7f\u66f4\u65b0\u5faa\u73af\u4ece\u5934\u5f00\u59cb\uff0c\u5176\u4e2d\u5305\u62ec\u8bb8\u591a\u5176\u4ed6\u68c0\u67e5\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u8bc1\u4e66\u3002 \u867d\u7136\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u8fd9\u5c31\u8db3\u591f\u4e86\uff0c\u4f46\u6709\u65f6\u53ef\u80fd\u9700\u8981 \u5f3a\u5236 \u66f4\u65b0\u8bc1\u4e66\uff0c\u5373\u4f7f certbot \u8ba4\u4e3a\u5b83\u53ef\u4ee5\u4fdd\u7559\u8bc1\u4e66\u4e00\u6bb5\u65f6\u95f4(\u5c31\u50cf \u8fd9\u4e2a \u53d1\u751f\u65f6)\u3002 \u56e0\u6b64\uff0c\u5f53\u8c03\u7528 run_certbot.sh \u811a\u672c\u65f6\uff0c\u53ef\u4ee5\u6dfb\u52a0 force \u4f5c\u4e3a\u53c2\u6570\uff0c\u4f7f\u5176\u5c06 --force-renewal \u6807\u8bb0\u9644\u52a0\u5230\u6240\u53d1\u51fa\u7684\u8bf7\u6c42\u4e0a\u3002 docker exec -it <container_name> /scripts/run_certbot.sh force \u8fd9\u5c06\u8bf7\u6c42\u65b0\u7684\u8bc1\u4e66\uff0c\u800c\u4e0d\u7ba1\u5b83\u4eec\u4f55\u65f6\u88ab\u8bbe\u7f6e\u4e3a\u8fc7\u671f\u3002 \u4f7f\u7528 force \u4f1a\u5bf9 \u6240\u6709 \u8bc1\u4e66\u53d1\u51fa\u65b0\u7684\u8bf7\u6c42\uff0c\u6240\u4ee5\u4e0d\u8981\u7ecf\u5e38\u8fd0\u884c\u5b83\uff0c\u56e0\u4e3a\u8bf7\u6c42 \u751f\u4ea7\u8bc1\u4e66 \u662f\u6709\u9650\u5236\u7684\u3002","title":"\u624b\u52a8/\u5f3a\u5236 \u66f4\u65b0"},{"location":"docker-nginx-certbot/docs/advanced_usage/#server_name","text":"Nginx \u5141\u8bb8\u4f60\u5728 server_name declaration \u4e2d\u505a\u5f88\u591a\u4e8b\u60c5\uff0c\u4f46\u7531\u4e8e\u8fd9\u4e2a\u6620\u50cf\u4e2d\u7684\u811a\u672c\u4ece\u76f8\u540c\u7684\u884c\u4e2d\u7ec4\u6210\u8bc1\u4e66\u8bf7\u6c42\uff0c\u6211\u4eec\u5728\u8fd9\u4e9b\u884c\u4e2d\u53ef\u80fd\u5b9a\u4e49\u7684\u5185\u5bb9\u53d7\u5230\u4e25\u91cd\u9650\u5236\u3002 \u4f8b\u5982\uff0c\u884c server_name mail.* \u5c06\u4ea7\u751f\u4e00\u4e2a\u57df\u540d mail.* \u7684\u8bc1\u4e66\u8bf7\u6c42\uff0c\u8be5\u57df\u540d\u65e0\u6548\u3002 \u7136\u800c\uff0c\u4e3a\u4e86\u514b\u670d\u8fd9\u79cd\u9650\u5236\uff0c\u53ef\u4ee5\u5728\u540c\u4e00\u884c\u4e0a\u5b9a\u4e49\u4e00\u4e2a\u7279\u6b8a\u7684\u6ce8\u91ca\uff0c\u4ee5\u8986\u76d6\u811a\u672c\u5c06\u62fe\u53d6\u7684\u5185\u5bb9\u3002 \u5728\u8fd9\u4e2a\u4eba\u4e3a\u7684\u4f8b\u5b50\u4e2d server { listen 443 ssl ; ssl_certificate_key /etc/letsencrypt/live/test-name/privkey.pem ; server_name yourdomain.org ; server_name www.yourdomain.org ; # certbot_domain:*.yourdomain.org server_name sub.yourdomain.org ; # certbot_domain:*.yourdomain.org server_name mail.* ; # certbot_domain:*.yourdomain.org server_name ~ ^(?<user>.+)\\.yourdomain\\.org$; ... } \u6211\u4eec\u5c06\u4ee5\u4e00\u4e2a\u8bc1\u4e66\u8bf7\u6c42\u7ed3\u675f\uff0c\u5b83\u770b\u8d77\u6765\u50cf\u8fd9\u6837: certbot --cert-name \"test-name\" ... -d yourdomain.org -d *.yourdomain.org \u7b2c\u4e00\u4e2a\u670d\u52a1\u5668\u540d\u79f0\u5c06\u50cf\u5f80\u5e38\u4e00\u6837\u88ab\u9009\u4e2d\uff0c\u800c\u4e0b\u9762\u4e09\u4e2a\u5c06\u88ab\u6ce8\u91ca\u4e2d\u7684\u57df\u540d\u906e\u853d\uff0c\u5373 *.yourdomain.org (\u91cd\u590d\u7684\u540d\u79f0\u5c06\u5728\u6700\u7ec8\u8bf7\u6c42\u4e2d\u5220\u9664)\u3002 \u6700\u540e\u4e00\u4e2a\u670d\u52a1\u5668\u540d\u662f\u7279\u6b8a\u7684\uff0c\u56e0\u4e3a\u5b83\u662f\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u5e76\u4e14\u603b\u662f\u4ee5 ~ \u5f00\u5934\u3002 \u56e0\u4e3a\u6211\u4eec\u77e5\u9053\u6211\u4eec\u6c38\u8fdc\u4e0d\u80fd\u4ece\u4e00\u4e2a\u4ee5\u8be5\u5b57\u7b26\u5f00\u5934\u7684\u540d\u79f0\u521b\u5efa\u4e00\u4e2a\u6709\u6548\u7684\u8bf7\u6c42\uff0c\u5b83\u4eec\u5c06\u603b\u662f\u88ab\u811a\u672c\u5ffd\u7565(\u540e\u9762\u7684\u6ce8\u91ca\u5c06\u4f18\u5148\u800c\u4e0d\u662f\u88ab\u5ffd\u7565)\u3002 \u66f4\u8be6\u7ec6\u7684\u793a\u4f8b\u53ef\u4ee5\u5728 example_server_overrides.conf \u4e2d\u67e5\u770b\u3002. ../examples/example_server_overrides.conf server { # Listen to port 443 on both IPv4 and IPv6. listen 443 ssl ; listen [::]:443 ssl ; # Domain names this server should respond to. server_name yourdomain.org ; server_name www.yourdomain.org ; # certbot_domain:*.yourdomain.org # Load the certificate files. ssl_certificate /etc/letsencrypt/live/test-name/fullchain.pem ; ssl_certificate_key /etc/letsencrypt/live/test-name/privkey.pem ; ssl_trusted_certificate /etc/letsencrypt/live/test-name/chain.pem ; # Load the Diffie-Hellman parameter. ssl_dhparam /etc/letsencrypt/dhparams/dhparam.pem ; return 200 'You have reached either yourdomain.org or www.yourdomain.org' ; add_header Content-Type text/plain ; } server { listen 443 ssl ; listen [::]:443 ssl ; server_name sub1.yourdomain.org sub2.yourdomain.org ; # certbot_domain:*.yourdomain.org ssl_certificate /etc/letsencrypt/live/test-name/fullchain.pem ; ssl_certificate_key /etc/letsencrypt/live/test-name/privkey.pem ; ssl_trusted_certificate /etc/letsencrypt/live/test-name/chain.pem ; ssl_dhparam /etc/letsencrypt/dhparams/dhparam.pem ; return 200 'You have reached either sub1.yourdomain.org or sub2.yourdomain.org' ; add_header Content-Type text/plain ; } server { listen 443 ssl ; listen [::]:443 ssl ; # Server names that start with ~ will be ignored, and in this example the # \"test-name\" certificate will already include *.yourdomain.org which will # cover all the cases here. server_name ~ ^(?<user>.+)\\.yourdomain\\.org$; ssl_certificate /etc/letsencrypt/live/test-name/fullchain.pem ; ssl_certificate_key /etc/letsencrypt/live/test-name/privkey.pem ; ssl_trusted_certificate /etc/letsencrypt/live/test-name/chain.pem ; ssl_dhparam /etc/letsencrypt/dhparams/dhparam.pem ; location / { # Return content based on the capture group in the server name. # Note: \"sub1\" and \"sub2\" will be caught by the sever above. root /content/ $user ; } } server { # Drop any request that does not match any of the other server names. listen 443 ssl default_server ; ssl_reject_handshake on ; } \u91cd\u8981\u7684\u662f\u8981\u8bb0\u4f4f\uff0c\u8fd9\u91cc\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u901a\u914d\u7b26\u57df\u540d( *.yourdomain.org \u4e2d\u7684 * )\uff0c\u8fd9\u8981\u6c42\u60a8\u4f7f\u7528\u80fd\u591f\u8fdb\u884c DNS-01 \u6311\u6218\u7684\u9a8c\u8bc1\u5668\uff0c\u6709\u5173\u6b64\u7684\u66f4\u591a\u4fe1\u606f\u53ef\u4ee5\u5728 certbot_authenticators.md \u6587\u6863\u4e2d\u627e\u5230\u3002","title":"\u8986\u76d6 server_name"},{"location":"docker-nginx-certbot/docs/advanced_usage/#_3","text":"\u8fd9\u662f Good to Know \u6587\u6863\u4e2d RSA \u548c ECDSA \u90e8\u5206\u7684\u5ef6\u7eed\uff0c\u5176\u4e2d\u7b80\u8981\u63d0\u5230\uff0c\u5b9e\u9645\u4e0a\u53ef\u4ee5\u8ba9 Nginx \u540c\u65f6\u670d\u52a1\u4e8e\u8fd9\u4e24\u79cd\u8bc1\u4e66\u7c7b\u578b\uff0c\u4ece\u800c\u518d\u6b21\u6269\u5c55\u5bf9\u534a\u65e7\u8bbe\u5907\u7684\u652f\u6301\uff0c\u540c\u65f6\u8fd8\u5141\u8bb8\u4f7f\u7528\u6700\u65b0\u7684\u52a0\u5bc6\u3002 \u8bbe\u7f6e \u7a0d\u5fae\u590d\u6742\u4e00\u4e9b\uff0c\u4f46\u662f example_server_multicert.conf \u6587\u4ef6\u5e94\u8be5\u88ab\u914d\u7f6e\uff0c\u56e0\u6b64\u60a8\u5e94\u8be5\u53ea\u9700\u8981\u7f16\u8f91\u9876\u90e8\u7684\"yourdomain.org\"\u8bed\u53e5\u3002 ../examples/example_server_multicert.conf server { # Listen to port 443 on both IPv4 and IPv6. listen 443 ssl default_server reuseport ; listen [::]:443 ssl default_server reuseport ; # Domain names this server should respond to. server_name yourdomain.org www.yourdomain.org ; # Load the ECDSA certificates. ssl_certificate /etc/letsencrypt/live/test-ecc/fullchain.pem ; ssl_certificate_key /etc/letsencrypt/live/test-ecc/privkey.pem ; # Load the RSA certificates. ssl_certificate /etc/letsencrypt/live/test-rsa/fullchain.pem ; ssl_certificate_key /etc/letsencrypt/live/test-rsa/privkey.pem ; # Load the Diffie-Hellman parameter. ssl_dhparam /etc/letsencrypt/dhparams/dhparam.pem ; # Define the ciphers to use in the preferred order. ssl_protocols TLSv1.2 TLSv1.3 ; ssl_prefer_server_ciphers on ; ssl_ciphers \"EECDH+ECDSA+AESGCM:EECDH+aRSA+AESGCM:EECDH+ECDSA+SHA384:EECDH+ECDSA+SHA256:EECDH+aRSA+SHA384:EECDH+aRSA+SHA256:EECDH:DHE+AESGCM:DHE:!RSA!aNULL:!eNULL:!LOW:!RC4:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS:!CAMELLIA:!SEED\" ; return 200 'Let\\'s Encrypt certificate successfully installed!' ; add_header Content-Type text/plain ; } \u5b83\u7684\u5de5\u4f5c\u539f\u7406\u662f Nginx \u80fd\u591f\u4e3a\u6bcf\u4e2a\u670d\u52a1\u5668\u5757 \u52a0\u8f7d\u591a\u4e2a\u8bc1\u4e66\u6587\u4ef6 \uff0c\u7136\u540e\u4f60\u6309\u7167\u4f18\u5148\u9009\u62e9 ECDSA \u8bc1\u4e66\u7684\u987a\u5e8f\u914d\u7f6e\u5bc6\u7801\u5957\u4ef6\u3002 \u5728\u5bb9\u5668\u5185\u8fd0\u884c\u7684 scripts \u7136\u540e\u5728 --cert-name \u53c2\u6570\u4e2d\u5bfb\u627e\u8fd9\u4e9b\u5b57\u7b26\u4e32\u7684\u4e00\u4e9b(\u4e0d\u533a\u5206\u5927\u5c0f\u5199)\u53d8\u4f53: -rsa .rsa -ecc .ecc -ecdsa .ecdsa \u5e76\u4f7f\u7528\u6b63\u786e\u7684\u7c7b\u578b\u96c6\u53d1\u51fa\u8bc1\u4e66\u8bf7\u6c42\u3002 \u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 \u5b9e\u9645\u63d0\u4ea4 \uff0c\u4f46\u60a8\u9700\u8981\u77e5\u9053\u7684\u662f\uff0c\u5982\u679c\u53d1\u73b0\u8fd9\u4e9b\u9009\u9879\uff0c\u5b83\u4eec\u5c06\u8986\u76d6 USE_ECDSA \u73af\u5883\u53d8\u91cf\u3002","title":"\u591a\u8bc1\u4e66\u8bbe\u7f6e"},{"location":"docker-nginx-certbot/docs/advanced_usage/#acme-url","text":"\u5728 run_certbot.sh \u811a\u672c\u7684\u9876\u90e8\u6709\u4e24\u4e2a\u53d8\u91cf: CERTBOT_PRODUCTION_URL CERTBOT_STAGING_URL \u5b83\u4eec\u7528\u4e8e\u5b9a\u4e49\u5728\u8bf7\u6c42\u65b0\u8bc1\u4e66\u65f6 certbot \u5c06\u5c1d\u8bd5\u8054\u7cfb\u54ea\u4e2a\u670d\u52a1\u5668\u3002 \u8fd9\u4e9b\u53d8\u91cf\u5177\u6709\u9ed8\u8ba4\u503c\uff0c\u4f46\u662f\u53ef\u4ee5\u901a\u8fc7\u5b9a\u4e49\u5177\u6709\u76f8\u540c\u540d\u79f0\u7684\u73af\u5883\u53d8\u91cf\u6765\u8986\u76d6\u5b83\u4eec\u3002 \u8fd9\u5141\u8bb8\u60a8\u5c06 certbot \u91cd\u5b9a\u5411\u5230\u53e6\u4e00\u4e2a\u81ea\u5b9a\u4e49 URL(\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u6b63\u5728\u8fd0\u884c\u81ea\u5df1\u7684\u81ea\u5b9a\u4e49 AMCE \u670d\u52a1\u5668)\u3002","title":"\u4f7f\u7528\u81ea\u5b9a\u4e49 ACME URL"},{"location":"docker-nginx-certbot/docs/advanced_usage/#ca","text":"\u5728\u4e00\u4e2a\u7f51\u7ad9\u7684\u5f00\u53d1\u9636\u6bb5\uff0c\u4f60\u53ef\u80fd\u5728\u4e00\u53f0\u6ca1\u6709\u6307\u5411\u81ea\u5df1\u7684 DNS \u8bb0\u5f55\u7684\u8ba1\u7b97\u673a\u4e0a\u6d4b\u8bd5\u4e1c\u897f\uff0c\u6216\u8005\u5b83\u53ef\u80fd\u6839\u672c\u6ca1\u6709\u4e92\u8054\u7f51\u8bbf\u95ee\u3002 \u7531\u4e8e certbot \u9700\u8981\u8fd9\u4e24\u4e2a\u6761\u4ef6\u624d\u80fd\u6b63\u5e38\u5de5\u4f5c\uff0c\u56e0\u6b64\u5728\u8fd9\u4e9b\u7279\u6b8a\u60c5\u51b5\u4e0b\uff0c\u4ee5\u524d\u4e0d\u53ef\u80fd\u4f7f\u7528\u8fd9\u4e2a\u56fe\u50cf\u3002 \u8fd9\u5c31\u662f\u521b\u5efa run_local_ca.sh \u811a\u672c\u7684\u539f\u56e0\uff0c\u56e0\u4e3a\u8fd9\u4f7f\u5f97\u4f7f\u7528 \u672c\u5730(\u81ea\u7b7e\u540d)\u8bc1\u4e66\u9881\u53d1\u673a\u6784 \u53ef\u4ee5\u5728\u4e0d\u4f9d\u8d56\u4efb\u4f55\u5916\u90e8\u670d\u52a1\u6216\u4e92\u8054\u7f51\u8fde\u63a5\u7684\u60c5\u51b5\u4e0b\u9881\u53d1\u7f51\u7ad9\u8bc1\u4e66\u6210\u4e3a\u53ef\u80fd\u3002 \u5b83\u8fd8\u4f7f\u6211\u4eec\u80fd\u591f\u9881\u53d1\u5bf9 localhost \u548c/\u6216 ::1 \u7b49 IP \u5730\u5740\u6709\u6548\u7684\u8bc1\u4e66\uff0c\u5426\u5219 certbot \u65e0\u6cd5 \u521b\u5efa\u8fd9\u4e9b\u5730\u5740\u3002 To enable the usage of this local CA you just set USE_LOCAL_CA=1 , and this will then trigger the execution of the run_local_ca.sh script instead of the run_certbot.sh one when it is time to renew the certificates. This script, when run, will always overwrite any previous keys and certificates, so alternating between the use of a local CA and certbot without first emptying the /etc/letsencrypt folder is not supported. The script is designed to mimic certbot as closely as reasonable, so the keys/certs created are placed in the same locations as certbot would have. This means that you only have to edit the server_name in your server configuration files to include the variant that you want for your local instance (e.g. localhost ) and you should be all set. However, if you navigate to your site at this point you will run into an error named similar to Firefox's SEC_ERROR_UNKNOWN_ISSUER , which just means that your browser does not recognize the CA that has signed your site's certificate. This is expected (since we just created our own local CA), but at this point the connection is using all the fancy HTTPS stuff, and is thus \"secure\", so you can just ignore this warning if you want. Another solution is to import the local CA's certificate created by this script into your browser, thus making this a known certificate authority and any of its signed certs trusted. What this file is, and how to obtain it, is explained further in the next section .","title":"\u672c\u5730 CA"},{"location":"docker-nginx-certbot/docs/advanced_usage/#_4","text":"\u672c\u5730 CA \u8981\u8fd0\u884c\uff0c\u9700\u8981\u505a\u51e0\u4ef6\u4e8b: caPrivkey.pem : CA \u4f7f\u7528\u7684\u79c1\u94a5->\u8fd9\u662f\u6700\u673a\u5bc6\u7684\u4e1c\u897f(\u5728\u771f\u5b9e CA \u7684\u60c5\u51b5\u4e0b)\uff0c\u5fc5\u987b\u4e0d\u60dc\u4e00\u5207\u4ee3\u4ef7\u4fdd\u62a4\u5b83\u3002 caCert.pem : \u6240\u6709\u5ba2\u6237\u7aef\u90fd\u9700\u8981 CA \u7684\u516c\u5171\u8bc1\u4e66\u90e8\u5206\uff0c\u4ee5\u4fbf\u4fe1\u4efb\u6b64 CA \u7b7e\u7f72\u7684\u4efb\u4f55\u5176\u4ed6\u8bc1\u4e66\u3002 serial.txt : CA \u6bcf\u6b21\u7b7e\u7f72\u65b0\u8bc1\u4e66\u65f6\u52a0 1 \u7684\u957f\u968f\u673a\u5341\u516d\u8fdb\u5236\u6570\u3002 index.txt : \u4fdd\u5b58\u6b64 CA \u5df2\u9881\u53d1\u7684\u6240\u6709\u8bc1\u4e66\u7684 \u8bb0\u5f55 \u3002 new_certs/ : \u5b58\u653e\u6240\u6709\u65b0\u7b7e\u7f72\u8bc1\u4e66\u526f\u672c\u7684\u6587\u4ef6\u5939\u3002 All of these are created automatically by the script inside the folder defined by LOCAL_CA_DIR (which defaults to /etc/local_ca ), so by host mounting this folder you will be able to see all these files. By then taking the caCert.pem and importing it in your browser you will be able to visit these sites without the error stating that the certificate is signed by an unknown authority. The validity period for the automatically created CA is only 30 days, and the reason for this is to deter people from using this solution in production. An important thing to know is that these files are only created if they do not exist. What this enables is an even more advanced usecase where you might already have a private key and certificate that you trust on your devices, so you would like to continue using it for the websites you host as well. Read more about this in the next section .","title":"\u6587\u4ef6\u548c\u6587\u4ef6\u5939"},{"location":"docker-nginx-certbot/docs/advanced_usage/#ca_1","text":"\u5982\u524d\u4e00\u8282\u6240\u8ff0\uff0c\u53ef\u4ee5\u4e3a run_local_ca.sh \u811a\u672c\u63d0\u4f9b\u60a8\u624b\u52a8\u521b\u5efa\u7684\u672c\u5730\u8bc1\u4e66\u9881\u53d1\u673a\u6784\uff0c\u8be5\u8bc1\u4e66\u9881\u53d1\u673a\u6784\u7684\u6709\u6548\u671f\u53ef\u80fd\u8d85\u8fc7 30 \u5929\uff0c\u5e76\u4e14\u60a8\u5e0c\u671b\u5728\u5176\u4ed6\u591a\u4e2a\u8bbe\u5907\u4e0a\u4fe1\u4efb\u8be5\u8bc1\u4e66\u9881\u53d1\u673a\u6784\u3002 \u8fd9\u662f\u4e00\u79cd\u89e3\u51b3\u65b9\u6848\uff0c\u5982\u679c\u60a8\u60f3\u5728\u6c38\u8fdc\u65e0\u6cd5\u901a\u8fc7\u5f00\u653e\u4e92\u8054\u7f51\u8bbf\u95ee\u7684\u670d\u52a1\u4e0a\u8bbe\u7f6e HTTPS\uff0c\u4f46\u60a8\u4ecd\u7136\u5e0c\u671b\u5b83\u4eec\u7684\u901a\u4fe1\u662f\u5b89\u5168\u7684\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u8be5\u89e3\u51b3\u65b9\u6848\u3002 \u57fa\u672c\u4e0a\uff0c\u4f60\u6240\u9700\u8981\u505a\u7684\u5c31\u662f\u4e3b\u673a\u6302\u8f7d\u4f60\u7684\u81ea\u5b9a\u4e49\u79c1\u94a5\u548c\u8bc1\u4e66\u5230 LOCAL_CA_DIR \uff0c\u811a\u672c\u5c06\u4f7f\u7528\u8fd9\u4e9b\u79c1\u94a5\u548c\u8bc1\u4e66\uff0c\u800c\u4e0d\u662f\u81ea\u52a8\u521b\u5efa\u7684\u77ed\u65f6\u95f4\u7684\u79c1\u94a5\u548c\u8bc1\u4e66\u3002 \u53ea\u9700\u786e\u4fdd\u6587\u4ef6\u7684\u547d\u540d\u7b26\u5408 \u811a\u672c\u671f\u671b\u7684 \uff0c\u5982\u679c\u8fd9\u4e9b\u7ec4\u4ef6\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u7f3a\u5931\uff0c\u5b83\u4eec\u5c06\u5728\u670d\u52a1\u7b2c\u4e00\u6b21\u542f\u52a8\u65f6\u521b\u5efa\u3002 \u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u4e0d\u652f\u6301\u5bc6\u7801\u4fdd\u62a4\u7684\u79c1\u94a5\u3002 I did not find it trivial to create a well configured CA, so if you want to go this route I really suggest that you read up on what you are doing and making sure all settings are correctly tuned for your usecase. There is a lot of high-level information available in regards to how to create your own CA, but what I found most confusing was exactly what was expected to be inside the openssl.cnf file that is necessary to have when running most of the OpenSSL commands. The configuration that is present inside the run_local_ca.sh script should be quite minimalistic for what we need, while still providing the strict settings that some clients need else they will reject these custom certificates. The most comprehensive guide I have found is the OpenSSL Cookbook , which goes into great detail about basically everything OpenSSL is able to do, along with this post which summarizes the settings needed for different certificate types. With these two you should be able to make an informed configuration in case you want to create your own custom certificate authority, and you may of course take a look at the commands used in the generate_ca() function to help you on your way of creating your own files.","title":"\u521b\u5efa\u81ea\u5b9a\u4e49 CA"},{"location":"docker-nginx-certbot/docs/certbot_authenticators/","text":"Certbot \u8ba4\u8bc1 \u00b6 Certbot allows to use a number of authenticators to get certificates . By default, and this will be sufficient for most users, this container uses the webroot authenticator , which will provision certificates for your domain names by doing what is called HTTP-01 validation , where ownership of the domain name is proven by serving a specific content at a given URL. Among the other authenticators available to certbot, the DNS authenticators are also available through this container. DNS authenticators allow you to prove ownership of a domain name by serving a challenge directly through a TXT record added in your DNS provider. This challenge is called DNS-01 and is a stronger proof of ownership than using HTTP-01, which is why this method also allow wildcard certificates (e.g. *.yourdomain.org ). \u4e3a DNS-01 \u6311\u6218\u51c6\u5907\u5bb9\u5668 \u00b6 To use DNS-01 challenges, you will need to create the credentials file for the chosen authenticator. You can find information about how to configure them by following those links for the supported authenticators: dns-cloudflare dns-cloudxns dns-digitalocean dns-dnsimple dns-dnsmadeeasy dns-gehirn dns-google dns-linode dns-luadns dns-nsone dns-ovh dns-rfc2136 dns-route53 dns-sakuracloud You will need to setup the authenticator file at /etc/letsencrypt/<authenticator provider>.ini , so for e.g. Cloudflare you would need the file /etc/letsencrypt/cloudflare.ini with the following content: # Cloudflare API token used by Certbot dns_cloudflare_api_token = 0123456789abcdef0123456789abcdef01234567 \u9ed8\u8ba4\u4f7f\u7528 DNS-01 \u8ba4\u8bc1\u5668 \u00b6 You can use an authenticator solving DNS-01 challenges by default by setting the CERTBOT_AUTHENTICATOR environment variable with the value as the name of the authenticator you wish to use (e.g. dns-cloudflare ). All the certificates needing renewal or creation will then start using that authenticator. Make sure, of course, that you've setup the authenticator correctly, as described above. \u4ec5\u5bf9\u7279\u5b9a\u8bc1\u4e66\u4f7f\u7528 DNS-01 \u9a8c\u8bc1\u5668 \u00b6 You might want to keep using the webroot authenticator in most cases, but need to use a DNS-01 challenge to setup a wildcard certificate for a given domain. Or you might even have a domain set up on Route53 while your other domains are on Cloudflare, and you thus are using dns-cloudflare as your default authenticator. In such cases, you can specify the authenticator you wish to use in the certificate path that you are setting up as ssl_certificate_key in your server block of the nginx configuration. In our case, if we want to use dns-route53 for a specific certificate, we could be using the following: server { listen 443 ssl; server_name yourdomain.org *.yourdomain.org; ssl_certificate_key /etc/letsencrypt/live/test-name.dns-route53/privkey.pem; ... } The script running in the container to renew certificates will automatically identify that it needs to use the Route53 authenticator here. Of course, you will need that authenticator to be configured properly in order to be able to use it. This setting is also compatible with the multi-certificate setup , so an RSA certificate via Clouflare's authenticator can be specified like this: ssl_certificate_key /etc/letsencrypt/live/test-name.dns-cloudflare.rsa/privkey.pem; \u6545\u969c\u6392\u9664\u6280\u5de7 \u00b6 DNS propagation is usually quite fast, but depends a lot on caching. This means that if Let's Encrypt tried to read the challenge recently, it might still hit a cache returning an older value of the TXT record that was added by certbot. If this happens often to you, you can set the CERTBOT_DNS_PROPAGATION_SECONDS environment variable in your docker configuration, to increase the time to wait for DNS propagation to happen. When that environment variable is not set, certbot will use a default value, which can be found in the documentation of the authenticator of your chosing. At the time of writing, this default value is of 10 seconds for all of the DNS authenticators.","title":"DNS\u9a8c\u8bc1\u5668"},{"location":"docker-nginx-certbot/docs/certbot_authenticators/#certbot","text":"Certbot allows to use a number of authenticators to get certificates . By default, and this will be sufficient for most users, this container uses the webroot authenticator , which will provision certificates for your domain names by doing what is called HTTP-01 validation , where ownership of the domain name is proven by serving a specific content at a given URL. Among the other authenticators available to certbot, the DNS authenticators are also available through this container. DNS authenticators allow you to prove ownership of a domain name by serving a challenge directly through a TXT record added in your DNS provider. This challenge is called DNS-01 and is a stronger proof of ownership than using HTTP-01, which is why this method also allow wildcard certificates (e.g. *.yourdomain.org ).","title":"Certbot \u8ba4\u8bc1"},{"location":"docker-nginx-certbot/docs/certbot_authenticators/#dns-01","text":"To use DNS-01 challenges, you will need to create the credentials file for the chosen authenticator. You can find information about how to configure them by following those links for the supported authenticators: dns-cloudflare dns-cloudxns dns-digitalocean dns-dnsimple dns-dnsmadeeasy dns-gehirn dns-google dns-linode dns-luadns dns-nsone dns-ovh dns-rfc2136 dns-route53 dns-sakuracloud You will need to setup the authenticator file at /etc/letsencrypt/<authenticator provider>.ini , so for e.g. Cloudflare you would need the file /etc/letsencrypt/cloudflare.ini with the following content: # Cloudflare API token used by Certbot dns_cloudflare_api_token = 0123456789abcdef0123456789abcdef01234567","title":"\u4e3a DNS-01 \u6311\u6218\u51c6\u5907\u5bb9\u5668"},{"location":"docker-nginx-certbot/docs/certbot_authenticators/#dns-01_1","text":"You can use an authenticator solving DNS-01 challenges by default by setting the CERTBOT_AUTHENTICATOR environment variable with the value as the name of the authenticator you wish to use (e.g. dns-cloudflare ). All the certificates needing renewal or creation will then start using that authenticator. Make sure, of course, that you've setup the authenticator correctly, as described above.","title":"\u9ed8\u8ba4\u4f7f\u7528 DNS-01 \u8ba4\u8bc1\u5668"},{"location":"docker-nginx-certbot/docs/certbot_authenticators/#dns-01_2","text":"You might want to keep using the webroot authenticator in most cases, but need to use a DNS-01 challenge to setup a wildcard certificate for a given domain. Or you might even have a domain set up on Route53 while your other domains are on Cloudflare, and you thus are using dns-cloudflare as your default authenticator. In such cases, you can specify the authenticator you wish to use in the certificate path that you are setting up as ssl_certificate_key in your server block of the nginx configuration. In our case, if we want to use dns-route53 for a specific certificate, we could be using the following: server { listen 443 ssl; server_name yourdomain.org *.yourdomain.org; ssl_certificate_key /etc/letsencrypt/live/test-name.dns-route53/privkey.pem; ... } The script running in the container to renew certificates will automatically identify that it needs to use the Route53 authenticator here. Of course, you will need that authenticator to be configured properly in order to be able to use it. This setting is also compatible with the multi-certificate setup , so an RSA certificate via Clouflare's authenticator can be specified like this: ssl_certificate_key /etc/letsencrypt/live/test-name.dns-cloudflare.rsa/privkey.pem;","title":"\u4ec5\u5bf9\u7279\u5b9a\u8bc1\u4e66\u4f7f\u7528 DNS-01 \u9a8c\u8bc1\u5668"},{"location":"docker-nginx-certbot/docs/certbot_authenticators/#_1","text":"DNS propagation is usually quite fast, but depends a lot on caching. This means that if Let's Encrypt tried to read the challenge recently, it might still hit a cache returning an older value of the TXT record that was added by certbot. If this happens often to you, you can set the CERTBOT_DNS_PROPAGATION_SECONDS environment variable in your docker configuration, to increase the time to wait for DNS propagation to happen. When that environment variable is not set, certbot will use a default value, which can be found in the documentation of the authenticator of your chosing. At the time of writing, this default value is of 10 seconds for all of the DNS authenticators.","title":"\u6545\u969c\u6392\u9664\u6280\u5de7"},{"location":"docker-nginx-certbot/docs/changelog/","text":"Changelog \u00b6 3.2.2 \u00b6 Small syntax fixes recommended by shellcheck. PR by @ericstengard . 3.2.1 \u00b6 Small syntax fixes recommended by shellcheck. PR by @ericstengard . 3.2.0 \u00b6 Make it possible to override the CERTBOT_PRODUCTION_URL and CERTBOT_STAGING_URL variables. You can now point certbot to whichever ACME server you want. 3.1.3 \u00b6 Recover and retry in case of failed dhparam creation. PR by @staticfloat . 3.1.2 \u00b6 Use latest version of Bash in the Alpine image again. The wait bug is fixed since Bash 5.1.10. 3.1.1 \u00b6 Small bugfix for the dns-route53 authenticator. Made so it is only bash that is installed from an older Alpine repository. PR by @dtcooper . 3.1.0 \u00b6 Replace sort -u with awk '!a[$0]++' to keep distinct order of the domain names. PR by @dtcooper . 3.0.1 \u00b6 Actually use ECDSA certificates by default. Eagerness to deploy latest version this update was forgotten. 3.0.0 \u00b6 Add support for DNS-01 challenges. Check out the list of all currently supported authenticators . This also means it is now possible to request wildcard certificates! PR by @XaF . Make it possible to define which authenticator to use on a certificate basis. Like with ECDSA/RSA , you can add the authenicator's name in the cert_name to override the default. PR by @XaF . Make it possible to use same cert_name across multiple config files. The scripts will remember all domain names associated with the cert name. This means you can now use as many config files as you want and have them all point to a single certificate. Add BATS . A lot unit tests for the Bash functions we use in the util.sh file. Also add it as a GitHub action . A huge thank you to @XaF for providing the foundation for this. Add ability to override found server_name . By adding a comment on the server_name line the script will now use that instead . This enables you to easily group domains under a common wildcard certificate ( example config ). Any server name beginning with ' ~ ' will be ignored. This character means that the server name is a regex, and we cannot use it when requesting certificates. Use ECDSA certificates by default. You now have to explicitly set USE_ECDSA=0 to disable this. We aren't actually introducing any breaking changes, but such a large change deserves a major release. Update documentation. Update examples. 2.4.1 \u00b6 Fix missing quotes around variable. PR by @LucianDavies . Changed package mirror used by Alpine images. More info in issue #70 . Added more documentation. Updated the docker-compose examples a bit. 2.4.0 \u00b6 Create a script that can sign certificates with the help of a local certificate authortiy . It is now possible to work completely offline. We can now create certificates for localhost . Restructure and add a lot of documentation. openssl is now a symlink to libressl in the Alpine images. This is done to simplify the rest of the scripts since the arguments are the same. 2.3.0 \u00b6 Add support for ECDSA certificates. It is possible to have Nginx serve both ECDSA and RSA certificates at the same time for the same server. Read more in its good to know section . Made so that the the \"primary domain\"/\"cert name\" can be whatever you want. This was actually already possible from v0.12 , but it is first now we allow it. 2.2.0 \u00b6 Listen to IPv6 in the redirector.conf in addition to IPv4. PR by @staticfloat . Add reuseport in the redirector.conf , which improves latency and parallelization. PR by @staticfloat . Add mentions in the changelog to people who have helped with issues. 2.1.0 \u00b6 Made the create_dhparams.sh script capable of creating missing directories. Our small /docker-entrypoint.d/40-create-dhparam-folder.sh script is therefore no longer necessary. Made so that we run symlink_user_configs at startup so we do not run into a race condition with Nginx. Some minor cleanup in the Dockerfiles related to the above changes. 2.0.1 \u00b6 There now exist a Dockerfile for building from the Nginx Alpine image as well. It is possible to use the Alpine version by appending -alpine to any of the tags from now on. There are now so many tags available, see dockerhub_tags.md for the possible combinations. NOTE: There exists a bug in Bash 5.1.0, which is described in detail here . Suggested by @tudddorrr . Small fix to the create_dhparams.sh script to handle the use of libressl in Alpine. Added a small sleep in order to mitigate a rare race condition between Nginx startup and the symlink script. Fix an ugly printout in the case when the sleep function exited naturally. 2.0.0 \u00b6 Big change on how we recommend users to get their .conf files into the container. Created a script that creates symlinks from conf.d/ to the files in user_conf.d/ . Users can now start the container without having to build anything. Still compatible with the old way , but I still think it's a \"major\" change. Suggested by @MauriceNino . Examples are updated to reflect changes. Add more logging. Add more \" around variables for extra safety. Big overhaul of how the documentation is structured. Even more tags now available on Docker Hub! See dockerhub_tags.md for the list. 1.3.0 \u00b6 Ignore values starting with data: and engine: when verifying that all files exists. PR by @bblanchon . Add a debug mode which is enabled by setting the environment variable DEBUG=1 . 1.2.0 \u00b6 Fix dependencies so that it is possible to build in 32-bit ARM architectures. Reported by RtKelleher . Added Dependabot to monitor and update the Dockerfiles. PR by @odin568 . Added GitHub Actions/Workflows so that each tag now is built for multiple arches ( issue #28 ). 1.1.0 \u00b6 Fix that scripts inside /docker-entrypoint.d/ were never run ( issue #21 ). Found while helping @isomerpages move from @staticfloats image. Fix for issue where the script failed in case the /etc/letsencrypt/dhparams folder was missing. Reported by @pmkyl . 1.0.0 \u00b6 Move over to semantic versioning . The version number will now be given like this: [MAJOR].[MINOR].[PATCH] This is done to signify that I feel like this code is stable, since I have been running this for quite a while. Build from a defined version of Nginx. This is done to facilitate a way to lock this container to a more specific version. This also allows us to more often trigger rebuilds of this container on Docker Hub. New tags are available on Docker Hub . There will now be tags on the following form: latest 1.0.0 1.0.0-nginx1.19.7 0.16 \u00b6 Container now listens to SIGHUP and will reload all configs if this signal is received. More details can be found in the commit message: bf2c135 Made Docker image slightly smaller by including --no-install-recommends . There is now also a dev branch /tag if you are brave and want to run experimental builds. JonasAlfredsson/docker-nginx-certbot is now its own independent repository (i.e. no longer just a fork). 0.15 \u00b6 It is now possible to manually trigger a renewal of certificates. It is also possible to include \"force\" to add --force-renewal to the request. The \"clean exit\" trap now handle that parent container changed to SIGQUIT as stop signal. The \"certbot\" server block (in Nginx) now prints to stdout by default. Massive refactoring of both code and files: Our \"start command \" file is now called start_nginx_certbot.sh instead of entrypoint.sh . Both create_dhparams.sh and run_certbot.sh can now be run by themselves inside the container. I have added set -e in most of the files so the program exit as intended when unexpected errors occurs. Added {} and \"\" around most of the bash variables. Change some log messages and where they appear. Our /scripts/startup/ folder has been removed. The parent container will run any *.sh file found inside the /docker-entrypoint.d/ folder. 0.14 \u00b6 Made so that the container now exits gracefully and reports the correct exit code. More details can be found in the commit message: 43dde6e Bash script now correctly monitors both the Nginx and the certbot renewal process PIDs. If either one of these processes dies, the container will exit with the same exit code as that process. This will also trigger a graceful exit for the rest of the processes. Removed unnecessary and empty ENTRYPOINT from Dockerfile. A lot of refactoring of the code, cosmetic changes and editing of comments. 0.13 \u00b6 Fixed the regex used in all of the sed commands. Now makes sure that the proper amount of spaces are present in the right places. Now allows comments at the end of the lines in the configs. # Nice! Made the expression a little bit more readable thanks to the -r flag. Now made certbot solely responsible for checking if the certificates needs to be renewed. Certbot is actually smart enough to not send any renewal requests if it doesn't have to. The time interval used to trigger the certbot renewal check is now user configurable. The environment variable to use is RENEWAL_INTERVAL . 0.12 \u00b6 Added --cert-name flag to the certbot certificate request command. This allows for both adding and subtracting domains to the same certificate file. Makes it possible to have path names that are not domain names (but this is not allowed yet). Made the file parsing functions smarter so they only find unique file paths. Cleaned up some log output. Updated the docker-compose example. Fixed some spelling in the documentation. 0.11 \u00b6 Python 2 is EOL, so it's time to move over to Python 3. From now on Docker Hub will also automatically build with tags. Lock the version by specifying the tag: jonasal/nginx-certbot:0.11 0.10 \u00b6 Update to new ACME v2 servers. PR by @seaneshbaugh . 0.9 \u00b6 I am now confident enough to remove the version suffixes. nginx:mainline is now using Debian 10 Buster. Updated documentation. 0.9-gamma \u00b6 Make both Nginx and the update script child processes of the entrypoint.sh script. Container will now die along with Nginx like it should. The Diffie-Hellman parameters now have better permissions. Container now exist on Docker Hub under jonasal/nginx-certbot:latest More documentation. 0.9-beta \u00b6 @JonasAlfredsson enters the battle. Diffie-Hellman parameters are now automatically generated. Nginx now handles everything HTTP related -> certbot set to webroot mode. Better checking to see if necessary files exist. Will now request a certificate that includes all domain variants listed on the server_name line. More extensive documentation. 0.8 \u00b6 Ditch cron, it never liked me anyway. Just use sleep and a while loop instead. 0.7 \u00b6 Complete rewrite, build this image on top of the nginx image, and run cron / certbot alongside nginx so that we can have Nginx configs dynamically enabled as we get SSL certificates. 0.6 \u00b6 Add nginx_auto_enable.sh script to /etc/letsencrypt/ so that users can bring Nginx up before SSL certs are actually available. 0.5 \u00b6 Change the name to docker-certbot-cron , update documentation, strip out even more stuff I don't care about. 0.4 \u00b6 Rip out a bunch of stuff because @staticfloat is a monster, and likes to do things his way 0.3 \u00b6 Add support for webroot mode. Run certbot once with all domains. 0.2 \u00b6 Upgraded to use certbot client Changed image to use alpine linux 0.1 \u00b6 Initial release","title":"\u66f4\u65b0\u65e5\u5fd7"},{"location":"docker-nginx-certbot/docs/changelog/#changelog","text":"","title":"Changelog"},{"location":"docker-nginx-certbot/docs/changelog/#322","text":"Small syntax fixes recommended by shellcheck. PR by @ericstengard .","title":"3.2.2"},{"location":"docker-nginx-certbot/docs/changelog/#321","text":"Small syntax fixes recommended by shellcheck. PR by @ericstengard .","title":"3.2.1"},{"location":"docker-nginx-certbot/docs/changelog/#320","text":"Make it possible to override the CERTBOT_PRODUCTION_URL and CERTBOT_STAGING_URL variables. You can now point certbot to whichever ACME server you want.","title":"3.2.0"},{"location":"docker-nginx-certbot/docs/changelog/#313","text":"Recover and retry in case of failed dhparam creation. PR by @staticfloat .","title":"3.1.3"},{"location":"docker-nginx-certbot/docs/changelog/#312","text":"Use latest version of Bash in the Alpine image again. The wait bug is fixed since Bash 5.1.10.","title":"3.1.2"},{"location":"docker-nginx-certbot/docs/changelog/#311","text":"Small bugfix for the dns-route53 authenticator. Made so it is only bash that is installed from an older Alpine repository. PR by @dtcooper .","title":"3.1.1"},{"location":"docker-nginx-certbot/docs/changelog/#310","text":"Replace sort -u with awk '!a[$0]++' to keep distinct order of the domain names. PR by @dtcooper .","title":"3.1.0"},{"location":"docker-nginx-certbot/docs/changelog/#301","text":"Actually use ECDSA certificates by default. Eagerness to deploy latest version this update was forgotten.","title":"3.0.1"},{"location":"docker-nginx-certbot/docs/changelog/#300","text":"Add support for DNS-01 challenges. Check out the list of all currently supported authenticators . This also means it is now possible to request wildcard certificates! PR by @XaF . Make it possible to define which authenticator to use on a certificate basis. Like with ECDSA/RSA , you can add the authenicator's name in the cert_name to override the default. PR by @XaF . Make it possible to use same cert_name across multiple config files. The scripts will remember all domain names associated with the cert name. This means you can now use as many config files as you want and have them all point to a single certificate. Add BATS . A lot unit tests for the Bash functions we use in the util.sh file. Also add it as a GitHub action . A huge thank you to @XaF for providing the foundation for this. Add ability to override found server_name . By adding a comment on the server_name line the script will now use that instead . This enables you to easily group domains under a common wildcard certificate ( example config ). Any server name beginning with ' ~ ' will be ignored. This character means that the server name is a regex, and we cannot use it when requesting certificates. Use ECDSA certificates by default. You now have to explicitly set USE_ECDSA=0 to disable this. We aren't actually introducing any breaking changes, but such a large change deserves a major release. Update documentation. Update examples.","title":"3.0.0"},{"location":"docker-nginx-certbot/docs/changelog/#241","text":"Fix missing quotes around variable. PR by @LucianDavies . Changed package mirror used by Alpine images. More info in issue #70 . Added more documentation. Updated the docker-compose examples a bit.","title":"2.4.1"},{"location":"docker-nginx-certbot/docs/changelog/#240","text":"Create a script that can sign certificates with the help of a local certificate authortiy . It is now possible to work completely offline. We can now create certificates for localhost . Restructure and add a lot of documentation. openssl is now a symlink to libressl in the Alpine images. This is done to simplify the rest of the scripts since the arguments are the same.","title":"2.4.0"},{"location":"docker-nginx-certbot/docs/changelog/#230","text":"Add support for ECDSA certificates. It is possible to have Nginx serve both ECDSA and RSA certificates at the same time for the same server. Read more in its good to know section . Made so that the the \"primary domain\"/\"cert name\" can be whatever you want. This was actually already possible from v0.12 , but it is first now we allow it.","title":"2.3.0"},{"location":"docker-nginx-certbot/docs/changelog/#220","text":"Listen to IPv6 in the redirector.conf in addition to IPv4. PR by @staticfloat . Add reuseport in the redirector.conf , which improves latency and parallelization. PR by @staticfloat . Add mentions in the changelog to people who have helped with issues.","title":"2.2.0"},{"location":"docker-nginx-certbot/docs/changelog/#210","text":"Made the create_dhparams.sh script capable of creating missing directories. Our small /docker-entrypoint.d/40-create-dhparam-folder.sh script is therefore no longer necessary. Made so that we run symlink_user_configs at startup so we do not run into a race condition with Nginx. Some minor cleanup in the Dockerfiles related to the above changes.","title":"2.1.0"},{"location":"docker-nginx-certbot/docs/changelog/#201","text":"There now exist a Dockerfile for building from the Nginx Alpine image as well. It is possible to use the Alpine version by appending -alpine to any of the tags from now on. There are now so many tags available, see dockerhub_tags.md for the possible combinations. NOTE: There exists a bug in Bash 5.1.0, which is described in detail here . Suggested by @tudddorrr . Small fix to the create_dhparams.sh script to handle the use of libressl in Alpine. Added a small sleep in order to mitigate a rare race condition between Nginx startup and the symlink script. Fix an ugly printout in the case when the sleep function exited naturally.","title":"2.0.1"},{"location":"docker-nginx-certbot/docs/changelog/#200","text":"Big change on how we recommend users to get their .conf files into the container. Created a script that creates symlinks from conf.d/ to the files in user_conf.d/ . Users can now start the container without having to build anything. Still compatible with the old way , but I still think it's a \"major\" change. Suggested by @MauriceNino . Examples are updated to reflect changes. Add more logging. Add more \" around variables for extra safety. Big overhaul of how the documentation is structured. Even more tags now available on Docker Hub! See dockerhub_tags.md for the list.","title":"2.0.0"},{"location":"docker-nginx-certbot/docs/changelog/#130","text":"Ignore values starting with data: and engine: when verifying that all files exists. PR by @bblanchon . Add a debug mode which is enabled by setting the environment variable DEBUG=1 .","title":"1.3.0"},{"location":"docker-nginx-certbot/docs/changelog/#120","text":"Fix dependencies so that it is possible to build in 32-bit ARM architectures. Reported by RtKelleher . Added Dependabot to monitor and update the Dockerfiles. PR by @odin568 . Added GitHub Actions/Workflows so that each tag now is built for multiple arches ( issue #28 ).","title":"1.2.0"},{"location":"docker-nginx-certbot/docs/changelog/#110","text":"Fix that scripts inside /docker-entrypoint.d/ were never run ( issue #21 ). Found while helping @isomerpages move from @staticfloats image. Fix for issue where the script failed in case the /etc/letsencrypt/dhparams folder was missing. Reported by @pmkyl .","title":"1.1.0"},{"location":"docker-nginx-certbot/docs/changelog/#100","text":"Move over to semantic versioning . The version number will now be given like this: [MAJOR].[MINOR].[PATCH] This is done to signify that I feel like this code is stable, since I have been running this for quite a while. Build from a defined version of Nginx. This is done to facilitate a way to lock this container to a more specific version. This also allows us to more often trigger rebuilds of this container on Docker Hub. New tags are available on Docker Hub . There will now be tags on the following form: latest 1.0.0 1.0.0-nginx1.19.7","title":"1.0.0"},{"location":"docker-nginx-certbot/docs/changelog/#016","text":"Container now listens to SIGHUP and will reload all configs if this signal is received. More details can be found in the commit message: bf2c135 Made Docker image slightly smaller by including --no-install-recommends . There is now also a dev branch /tag if you are brave and want to run experimental builds. JonasAlfredsson/docker-nginx-certbot is now its own independent repository (i.e. no longer just a fork).","title":"0.16"},{"location":"docker-nginx-certbot/docs/changelog/#015","text":"It is now possible to manually trigger a renewal of certificates. It is also possible to include \"force\" to add --force-renewal to the request. The \"clean exit\" trap now handle that parent container changed to SIGQUIT as stop signal. The \"certbot\" server block (in Nginx) now prints to stdout by default. Massive refactoring of both code and files: Our \"start command \" file is now called start_nginx_certbot.sh instead of entrypoint.sh . Both create_dhparams.sh and run_certbot.sh can now be run by themselves inside the container. I have added set -e in most of the files so the program exit as intended when unexpected errors occurs. Added {} and \"\" around most of the bash variables. Change some log messages and where they appear. Our /scripts/startup/ folder has been removed. The parent container will run any *.sh file found inside the /docker-entrypoint.d/ folder.","title":"0.15"},{"location":"docker-nginx-certbot/docs/changelog/#014","text":"Made so that the container now exits gracefully and reports the correct exit code. More details can be found in the commit message: 43dde6e Bash script now correctly monitors both the Nginx and the certbot renewal process PIDs. If either one of these processes dies, the container will exit with the same exit code as that process. This will also trigger a graceful exit for the rest of the processes. Removed unnecessary and empty ENTRYPOINT from Dockerfile. A lot of refactoring of the code, cosmetic changes and editing of comments.","title":"0.14"},{"location":"docker-nginx-certbot/docs/changelog/#013","text":"Fixed the regex used in all of the sed commands. Now makes sure that the proper amount of spaces are present in the right places. Now allows comments at the end of the lines in the configs. # Nice! Made the expression a little bit more readable thanks to the -r flag. Now made certbot solely responsible for checking if the certificates needs to be renewed. Certbot is actually smart enough to not send any renewal requests if it doesn't have to. The time interval used to trigger the certbot renewal check is now user configurable. The environment variable to use is RENEWAL_INTERVAL .","title":"0.13"},{"location":"docker-nginx-certbot/docs/changelog/#012","text":"Added --cert-name flag to the certbot certificate request command. This allows for both adding and subtracting domains to the same certificate file. Makes it possible to have path names that are not domain names (but this is not allowed yet). Made the file parsing functions smarter so they only find unique file paths. Cleaned up some log output. Updated the docker-compose example. Fixed some spelling in the documentation.","title":"0.12"},{"location":"docker-nginx-certbot/docs/changelog/#011","text":"Python 2 is EOL, so it's time to move over to Python 3. From now on Docker Hub will also automatically build with tags. Lock the version by specifying the tag: jonasal/nginx-certbot:0.11","title":"0.11"},{"location":"docker-nginx-certbot/docs/changelog/#010","text":"Update to new ACME v2 servers. PR by @seaneshbaugh .","title":"0.10"},{"location":"docker-nginx-certbot/docs/changelog/#09","text":"I am now confident enough to remove the version suffixes. nginx:mainline is now using Debian 10 Buster. Updated documentation.","title":"0.9"},{"location":"docker-nginx-certbot/docs/changelog/#09-gamma","text":"Make both Nginx and the update script child processes of the entrypoint.sh script. Container will now die along with Nginx like it should. The Diffie-Hellman parameters now have better permissions. Container now exist on Docker Hub under jonasal/nginx-certbot:latest More documentation.","title":"0.9-gamma"},{"location":"docker-nginx-certbot/docs/changelog/#09-beta","text":"@JonasAlfredsson enters the battle. Diffie-Hellman parameters are now automatically generated. Nginx now handles everything HTTP related -> certbot set to webroot mode. Better checking to see if necessary files exist. Will now request a certificate that includes all domain variants listed on the server_name line. More extensive documentation.","title":"0.9-beta"},{"location":"docker-nginx-certbot/docs/changelog/#08","text":"Ditch cron, it never liked me anyway. Just use sleep and a while loop instead.","title":"0.8"},{"location":"docker-nginx-certbot/docs/changelog/#07","text":"Complete rewrite, build this image on top of the nginx image, and run cron / certbot alongside nginx so that we can have Nginx configs dynamically enabled as we get SSL certificates.","title":"0.7"},{"location":"docker-nginx-certbot/docs/changelog/#06","text":"Add nginx_auto_enable.sh script to /etc/letsencrypt/ so that users can bring Nginx up before SSL certs are actually available.","title":"0.6"},{"location":"docker-nginx-certbot/docs/changelog/#05","text":"Change the name to docker-certbot-cron , update documentation, strip out even more stuff I don't care about.","title":"0.5"},{"location":"docker-nginx-certbot/docs/changelog/#04","text":"Rip out a bunch of stuff because @staticfloat is a monster, and likes to do things his way","title":"0.4"},{"location":"docker-nginx-certbot/docs/changelog/#03","text":"Add support for webroot mode. Run certbot once with all domains.","title":"0.3"},{"location":"docker-nginx-certbot/docs/changelog/#02","text":"Upgraded to use certbot client Changed image to use alpine linux","title":"0.2"},{"location":"docker-nginx-certbot/docs/changelog/#01","text":"Initial release","title":"0.1"},{"location":"docker-nginx-certbot/docs/dockerhub_tags/","text":"\u53ef\u7528\u7684\u56fe\u50cf\u6807\u7b7e \u00b6 latest \u6807\u7b7e\u603b\u662f\u6784\u5efa master branch \u7684\u5934\uff0c\u6240\u4ee5\u5982\u679c\u53ef\u4ee5\u7684\u8bdd\u8bf7\u4f7f\u7528\u4e00\u4e2a\u66f4\u5177\u4f53\u7684\u5934\uff0c\u56e0\u4e3a master \u4e0d\u5e94\u8be5\u88ab\u8ba4\u4e3a\u662f\"stable\"\u3002 2.0.0 \u4e4b\u540e\u7684\u6240\u6709\u6807\u7b7e\u90fd\u662f\u4e3a\u4ee5\u4e0b\u67b6\u6784\u6784\u5efa\u7684: linux/amd64 linux/386 ( not available for Alpine since Nginx v1.21.0 ) linux/arm64 linux/arm/v7 ( not available for Alpine since tag v3.1.2 ) \u5e76\u4e14\u53ef\u4ee5\u5c06 -alpine \u9644\u52a0\u5230 2.0.1 \u4e2d\u7684\u4efb\u4f55\u6807\u7b7e\u4ee5\u83b7\u5f97\u4e00\u4e2a\u57fa\u4e8e Alpine \u7684\u56fe\u50cf\u3002 \u8f83\u4e0d\u7279\u5b9a\u7684\u6807\u8bb0\u5c06\u968f\u7740\u8f83\u7279\u5b9a\u7684\u6807\u8bb0\u7684\u66f4\u65b0\u800c\u79fb\u52a8\u3002 Major Minor Patch Nginx 3 3.2 3.2.2 3.2.2-nginx1.23.3 3.2.2-nginx1.23.2 3.2.1 3.2.1-nginx1.23.2 3.2.1-nginx1.23.1 3.2.0 3.2.0-nginx1.23.1 3.2.0-nginx1.23.0 3.1 3.1.3 3.1.3-nginx1.23.0 3.1.2 3.1.2-nginx1.23.0 3.1.2-nginx1.21.6 3.1.1 3.1.1-nginx1.21.6 3.1.0 3.1.0-nginx1.21.6 3.0 3.0.1 3.0.1-nginx1.21.6 3.0.1-nginx1.21.5 3.0.1-nginx1.21.4 3.0.1-nginx1.21.3 3.0.0 3.0.0-nginx1.21.3 2 2.4 2.4.1 2.4.1-nginx1.21.3 2.4.1-nginx1.21.1 2.4.1-nginx1.21.0 2.4.0 2.4.0-nginx1.21.0 2.3 2.3.0 2.3.0-nginx1.21.0 2.2 2.2.0 2.2.0-nginx1.21.0 2.2.0-nginx1.19.10 2.1 2.1.0 2.1.0-nginx1.19.10 2.0 2.0.1 2.0.1-nginx1.19.10 2.0.0 2.0.0-nginx1.19.10 1.3.0 1.3.0-nginx1.19.10 1.3.0-nginx1.19.9 1.2.0 1.2.0-nginx1.19.9 1.2.0-nginx1.19.8 1.1.0 1.1.0-nginx1.19.8 1.1.0-nginx1.19.7 1.0.0 1.0.0-nginx1.19.7","title":"DockerHub\u6807\u7b7e"},{"location":"docker-nginx-certbot/docs/dockerhub_tags/#_1","text":"latest \u6807\u7b7e\u603b\u662f\u6784\u5efa master branch \u7684\u5934\uff0c\u6240\u4ee5\u5982\u679c\u53ef\u4ee5\u7684\u8bdd\u8bf7\u4f7f\u7528\u4e00\u4e2a\u66f4\u5177\u4f53\u7684\u5934\uff0c\u56e0\u4e3a master \u4e0d\u5e94\u8be5\u88ab\u8ba4\u4e3a\u662f\"stable\"\u3002 2.0.0 \u4e4b\u540e\u7684\u6240\u6709\u6807\u7b7e\u90fd\u662f\u4e3a\u4ee5\u4e0b\u67b6\u6784\u6784\u5efa\u7684: linux/amd64 linux/386 ( not available for Alpine since Nginx v1.21.0 ) linux/arm64 linux/arm/v7 ( not available for Alpine since tag v3.1.2 ) \u5e76\u4e14\u53ef\u4ee5\u5c06 -alpine \u9644\u52a0\u5230 2.0.1 \u4e2d\u7684\u4efb\u4f55\u6807\u7b7e\u4ee5\u83b7\u5f97\u4e00\u4e2a\u57fa\u4e8e Alpine \u7684\u56fe\u50cf\u3002 \u8f83\u4e0d\u7279\u5b9a\u7684\u6807\u8bb0\u5c06\u968f\u7740\u8f83\u7279\u5b9a\u7684\u6807\u8bb0\u7684\u66f4\u65b0\u800c\u79fb\u52a8\u3002 Major Minor Patch Nginx 3 3.2 3.2.2 3.2.2-nginx1.23.3 3.2.2-nginx1.23.2 3.2.1 3.2.1-nginx1.23.2 3.2.1-nginx1.23.1 3.2.0 3.2.0-nginx1.23.1 3.2.0-nginx1.23.0 3.1 3.1.3 3.1.3-nginx1.23.0 3.1.2 3.1.2-nginx1.23.0 3.1.2-nginx1.21.6 3.1.1 3.1.1-nginx1.21.6 3.1.0 3.1.0-nginx1.21.6 3.0 3.0.1 3.0.1-nginx1.21.6 3.0.1-nginx1.21.5 3.0.1-nginx1.21.4 3.0.1-nginx1.21.3 3.0.0 3.0.0-nginx1.21.3 2 2.4 2.4.1 2.4.1-nginx1.21.3 2.4.1-nginx1.21.1 2.4.1-nginx1.21.0 2.4.0 2.4.0-nginx1.21.0 2.3 2.3.0 2.3.0-nginx1.21.0 2.2 2.2.0 2.2.0-nginx1.21.0 2.2.0-nginx1.19.10 2.1 2.1.0 2.1.0-nginx1.19.10 2.0 2.0.1 2.0.1-nginx1.19.10 2.0.0 2.0.0-nginx1.19.10 1.3.0 1.3.0-nginx1.19.10 1.3.0-nginx1.19.9 1.2.0 1.2.0-nginx1.19.9 1.2.0-nginx1.19.8 1.1.0 1.1.0-nginx1.19.8 1.1.0-nginx1.19.7 1.0.0 1.0.0-nginx1.19.7","title":"\u53ef\u7528\u7684\u56fe\u50cf\u6807\u7b7e"},{"location":"docker-nginx-certbot/docs/good_to_know/","text":"\u77e5\u9053\u5c31\u597d \u00b6 \u672c\u6587\u6863\u5305\u542b\u5728\u5f00\u59cb\u4f7f\u7528\u6b64\u56fe\u50cf\u4e4b\u524d\u6700\u597d\u4e86\u89e3\u7684\u529f\u80fd\u548c\u884c\u4e3a\u4fe1\u606f\u3002 \u8bf7\u968f\u610f\u9605\u8bfb\uff0c\u4f46\u6211\u5411\u5927\u5bb6\u63a8\u8350\u524d\u4e24\u90e8\u5206\u3002 \u521d\u59cb\u6d4b\u8bd5 \u00b6 \u5982\u679c\u4f60\u53ea\u662f\u5728\u5c1d\u8bd5\u8bbe\u7f6e\u8fd9\u4e2a\uff0c\u6211\u5efa\u8bae\u4f60\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf STAGING=1 \uff0c\u56e0\u4e3a\u8fd9\u4f1a\u5c06 Let\u2019s Encrypt \u6311\u6218 URL \u66f4\u6539\u4e3a\u4ed6\u4eec\u7684 STAGING URL\u3002 \u8fd9\u4e0d\u4f1a\u4e3a\u60a8\u63d0\u4f9b \u5408\u9002\u7684 \u8bc1\u4e66\uff0c\u4f46\u4e0e\u975e\u5206\u671f \u751f\u4ea7\u8bc1\u4e66 \u76f8\u6bd4\uff0c\u5b83\u5177\u6709\u9ad8\u5f97\u53ef\u7b11\u7684 \u901f\u7387\u9650\u5236 \uff0c\u56e0\u6b64\u60a8\u53ef\u4ee5\u5728\u4e0d\u5fc5\u62c5\u5fc3\u7684\u60c5\u51b5\u4e0b\u72af\u66f4\u591a\u9519\u8bef\u3002 \u60a8\u8fd8\u53ef\u4ee5\u6dfb\u52a0 DEBUG=1 \u4ee5\u83b7\u5f97\u66f4\u8be6\u7ec6\u7684\u65e5\u5fd7\u8bb0\u5f55\uff0c\u4ee5\u4fbf\u66f4\u597d\u5730\u7406\u89e3\u6b63\u5728\u53d1\u751f\u7684\u4e8b\u60c5\u3002 \u50cf\u8fd9\u6837\u5f15\u5165\u4ed6\u4eec: docker run -it -p 80 :80 -p 443 :443 \\ --env CERTBOT_EMAIL = your@email.org \\ --env STAGING = 1 \\ --env DEBUG = 1 \\ jonasal/nginx-certbot:latest Note \u8bf7\u6ce8\u610f\uff0c\u5f53\u5207\u6362\u5230\u751f\u4ea7\u8bc1\u4e66\u65f6\uff0c\u60a8\u8981\u4e48\u9700\u8981\u5220\u9664\u9884\u6f14\u8bc1\u4e66\uff0c\u8981\u4e48\u53d1\u51fa \u5f3a\u5236\u66f4\u65b0 \uff0c \u56e0\u4e3a\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u4efb\u4f55\u6709\u6548\u7684(\u9884\u6f14\u6216\u751f\u4ea7)\u8bc1\u4e66\u5df2\u7ecf\u5b58\u5728\uff0ccertbot \u5c06\u4e0d\u4f1a\u8bf7\u6c42\u65b0\u8bc1\u4e66\u3002 \u521b\u5efa\u4e00\u4e2a\u670d\u52a1\u5668\u7684 .conf \u6587\u4ef6 \u00b6 \u4f5c\u4e3a Nginx \u4e2d\u4e00\u4e2a\u57fa\u672c\u7684(\u4f46\u6709\u6548\u7684)SSL \u670d\u52a1\u5668\u7684\u4f8b\u5b50\uff0c\u4f60\u53ef\u4ee5\u67e5\u770b examples/ \u76ee\u5f55\u4e2d\u7684 example_server.conf \u6587\u4ef6\u3002 ../examples/example_server.conf server { # Listen to port 443 on both IPv4 and IPv6. listen 443 ssl default_server reuseport ; listen [::]:443 ssl default_server reuseport ; # Domain names this server should respond to. server_name yourdomain.org www.yourdomain.org ; # Load the certificate files. ssl_certificate /etc/letsencrypt/live/test-name/fullchain.pem ; ssl_certificate_key /etc/letsencrypt/live/test-name/privkey.pem ; ssl_trusted_certificate /etc/letsencrypt/live/test-name/chain.pem ; # Load the Diffie-Hellman parameter. ssl_dhparam /etc/letsencrypt/dhparams/dhparam.pem ; return 200 'Let\\'s Encrypt certificate successfully installed!' ; add_header Content-Type text/plain ; } \u901a\u8fc7\u5c06 yourdomain.org \u66ff\u6362\u4e3a\u60a8\u81ea\u5df1\u7684\u57df\u540d\uff0c\u60a8\u5b9e\u9645\u4e0a\u53ef\u4ee5\u4f7f\u7528\u6b64\u914d\u7f6e\u5feb\u901f\u6d4b\u8bd5\u4e8b\u60c5\u662f\u5426\u6b63\u5e38\u5de5\u4f5c\u3002 \u5728\u5b9e\u9645\u6267\u884c\u6b64\u64cd\u4f5c\u65f6\uff0c\u8fd8\u5e94\u8be5\u5c06\u8bc1\u4e66\u8def\u5f84 \"test-name\" \u66f4\u6539\u4e3a\u66f4\u5177\u63cf\u8ff0\u6027\u7684\u5185\u5bb9\u3002 \u5c06\u4fee\u6539\u540e\u7684\u914d\u7f6e\u653e\u5728 user_conf.d/ \u6587\u4ef6\u5939\u4e2d\uff0c\u7136\u540e\u6309\u7167 \u4e3b README \u4e2d\u63cf\u8ff0\u7684\u90a3\u6837\u8fd0\u884c\u5b83\u3002 \u8ba9\u5bb9\u5668\u6682\u65f6\u53d1\u6325\u5b83\u7684 \u9b54\u529b \uff0c\u7136\u540e\u5c1d\u8bd5\u8bbf\u95ee\u60a8\u7684\u57df\u3002 \u73b0\u5728\uff0c\u60a8\u5e94\u8be5\u770b\u5230\u5b57\u7b26\u4e32\u201c Let's Encrypt certificate successfully installed! \u201d\u3002 \u5bb9\u5668\u7684\u914d\u7f6e\u6587\u4ef6\u5939\u4e2d \u5df2\u7ecf\u5b58\u5728 \u7684\u6587\u4ef6\u7528\u4e8e\u5904\u7406\u6240\u6709\u4f20\u5165\u8bf7\u6c42(\u4e0d\u5c5e\u4e8e certbot \u6311\u6218\u8bf7\u6c42)\u7684 HTTPS \u91cd\u5b9a\u5411\uff0c\u56e0\u6b64\u8981\u6ce8\u610f\u4e0d\u8981\u8986\u76d6\u8fd9\u4e9b\u6587\u4ef6\uff0c\u9664\u975e\u60a8\u77e5\u9053\u81ea\u5df1\u5728\u505a\u4ec0\u4e48\u3002 user_conf.d \u6587\u4ef6\u5939 \u00b6 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cNginx \u5c06\u4ece /etc/nginx/conf.d/ \u6587\u4ef6\u5939\u4e2d\u52a0\u8f7d\u4efb\u4f55\u4ee5 .conf \u7ed3\u5c3e\u7684\u6587\u4ef6\u3002 \u7136\u800c\uff0c\u8fd9\u4e2a\u6620\u50cf\u4f7f\u7528\u4e86\u4e24\u4e2a\u91cd\u8981\u7684 \u914d\u7f6e\u6587\u4ef6 \uff0c\u5b83\u4eec\u9700\u8981\u5b58\u5728(\u9664\u975e\u4f60\u77e5\u9053\u5982\u4f55\u7528\u4f60\u81ea\u5df1\u7684\u6587\u4ef6\u66ff\u6362\u5b83\u4eec)\uff0c\u5e76\u4e14\u4e3b\u673a\u6302\u8f7d\u4e00\u4e2a\u672c\u5730\u6587\u4ef6\u5939\u5230\u524d\u9762\u63d0\u5230\u7684\u4f4d\u7f6e\u4f1a\u63a9\u76d6\u8fd9\u4e9b\u91cd\u8981\u6587\u4ef6\u3002 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u5efa\u8bae\u4f60\u4e3b\u673a\u6302\u8f7d\u4e00\u4e2a\u672c\u5730\u6587\u4ef6\u5939\u5230 /etc/nginx/user_conf.d/ \uff0c\u4e00\u90e8\u5206\u7ba1\u7406\u811a\u672c\u5c06 \u521b\u5efa\u7b26\u53f7\u94fe\u63a5 \u4ece conf.d/ \u5230 user_conf.d/ \u4e2d\u7684\u6587\u4ef6\u3002 \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6211\u4eec\u4e3a\u7528\u6237\u63d0\u4f9b\u4e86\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u6cd5\u6765\u542f\u52a8\u5bb9\u5668\uff0c\u800c\u4e0d\u5fc5\u9996\u5148\u6784\u5efa\u672c\u5730\u6620\u50cf\uff0c\u540c\u65f6\u4ecd\u7136\u8ba9\u4ed6\u4eec\u6709\u673a\u4f1a\u7ee7\u7eed\u4ee5\u65e7\u7684\u65b9\u5f0f\u8fdb\u884c\u64cd\u4f5c\uff0c\u4f8b\u5982 @staticfloat \u955c\u50cf \u7684\u5de5\u4f5c\u65b9\u5f0f\u3002 \u811a\u672c\u5982\u4f55\u5411\u8bc1\u4e66\u8bf7\u6c42\u6dfb\u52a0\u57df\u540d \u00b6 \u6240\u5305\u542b\u7684\u811a\u672c\u5c06\u904d\u5386 Nginx /etc/nginx/conf.d/ \u6587\u4ef6\u5939\u4e2d\u627e\u5230\u7684\u6240\u6709\u914d\u7f6e\u6587\u4ef6( .conf )\uff0c\u5e76\u4ece\u6587\u4ef6\u7684\u5185\u5bb9\u521b\u5efa\u8bf7\u6c42\u3002 \u5728\u6bcf\u4e2a\u72ec\u7279\u7684\u6587\u4ef6\u4e2d\uff0c\u5b83\u4f1a\u627e\u5230\u4efb\u4f55\u4e00\u884c\u8bf4: ssl_certificate_key /etc/letsencrypt/live/test-name/privkey.pem; \u5e76\u4e14\u53ea\u63d0\u53d6\u8fd9\u91cc\u8bf4\u201c test-name \u201d\u7684\u90e8\u5206\u3002 \u8fd9\u662f\u5c06\u63d0\u4f9b\u7ed9 certbot \u7684 --cert-name \u53c2\u6570\u7684\u503c\uff0c\u56e0\u6b64\u5c3d\u7ba1\u60a8\u57fa\u672c\u4e0a\u53ef\u4ee5\u5728\u8fd9\u91cc\u8bbe\u7f6e\u4efb\u4f55\u60a8\u60f3\u8981\u7684\u540d\u79f0\uff0c\u4f46\u6211\u5efa\u8bae\u60a8\u4e3a\u4e86\u81ea\u5df1\u7684\u7f18\u6545\u4fdd\u6301\u5b83\u7684\u63cf\u8ff0\u6027\u3002 \u5728\u6b64\u4e4b\u540e\uff0c\u811a\u672c\u5c06\u627e\u5230\u5305\u542b server_name \u7684\u6240\u6709\u884c\uff0c\u5e76\u5728\u540c\u4e00\u884c\u4e2d\u5217\u51fa\u6240\u6709\u57df\u540d\u3002 \u4e00\u4e2a\u5305\u542b\u5982\u4e0b\u5185\u5bb9\u7684\u6587\u4ef6: server { listen 443 ssl; server_name yourdomain.org www.yourdomain.org; ssl_certificate_key /etc/letsencrypt/live/test-name/privkey.pem; ... } server { listen 443 ssl; server_name sub.yourdomain.org; ssl_certificate_key /etc/letsencrypt/live/test-name/privkey.pem; ... } \u5c06\u5171\u4eab\u76f8\u540c\u7684\u8bc1\u4e66\u6587\u4ef6(\u5373\"test-name\" \u8bc1\u4e66)\uff0c\u5e76\u4e14\u6240\u6709\u5217\u51fa\u7684\u57df\u53d8\u4f53\u5c06\u5305\u62ec\u4e3a\u6709\u6548\u7684 alt names \u3002 \u4e5f\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u670d\u52a1\u5668\u5757\u5206\u5272\u4e3a\u4e24\u4e2a\u5355\u72ec\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u56e0\u4e3a\u811a\u672c\u5c06\u5728\u6574\u4e2a\u626b\u63cf\u8fc7\u7a0b\u4e2d\u8ddf\u8e2a\"test-name\"\u503c\uff0c\u5e76\u5c06\u4efb\u4f55\u989d\u5916\u7684\u53d1\u73b0\u6dfb\u52a0\u5230\u5176\u4e2d\u3002 \u6240\u4ee5\u6700\u540e\u6211\u4eec\u4f1a\u5f97\u5230\u4e00\u4e2a\u8bf7\u6c42\uff0c\u770b\u8d77\u6765\u50cf\u8fd9\u6837: certbot --cert-name \"test-name\" ... -d yourdomain.org -d www.yourdomain.org -d sub.yourdomain.org \u811a\u672c\u5728\u5b9a\u4e49\u8bf7\u6c42\u4e2d\u5e94\u8be5\u5305\u542b\u7684\u5185\u5bb9\u7684\u53ef\u5b9a\u5236\u6027\u65b9\u9762\u975e\u5e38\u5f3a\u5927\uff0c\u4f46\u8fd9\u88ab\u8ba4\u4e3a\u662f\u4e00\u4e2a\u66f4\u9ad8\u7ea7\u7684\u7528\u4f8b\uff0c\u53ef\u4ee5\u5728\u9ad8\u7ea7\u7528\u6cd5\u6587\u6863\u7684 \u8986\u76d6 server_name \u90e8\u5206\u4e2d\u8fdb\u4e00\u6b65\u7814\u7a76\u3002 \u6b64\u5916\uff0c\u6211\u4eec\u652f\u6301\u901a\u914d\u7b26\u57df\u540d\uff0c\u4f46\u8fd9\u8981\u6c42\u60a8\u4f7f\u7528\u80fd\u591f\u8fdb\u884c DNS-01 \u6311\u6218\u7684\u9a8c\u8bc1\u5668\uff0c\u6709\u5173\u8fd9\u65b9\u9762\u7684\u66f4\u591a\u4fe1\u606f\u53ef\u4ee5\u5728 Certbot \u8ba4\u8bc1 \u6587\u6863\u4e2d\u627e\u5230\u3002 ECDSA \u548c RSA \u8bc1\u4e66 \u00b6 ECDSA(\u6216 ECC) \u8bc1\u4e66\u4f7f\u7528\u6bd4\u6210\u719f\u7684 RSA \u8bc1\u4e66\u66f4\u65b0\u7684\u52a0\u5bc6\u7b97\u6cd5\uff0c\u5e76\u4e14\u636e\u79f0\u66f4\u5b89\u5168\uff0c\u540c\u65f6\u66f4\u5c0f\u3002 \u5b83\u4eec\u7684\u7f3a\u70b9\u662f\u8fd8\u6ca1\u6709\u88ab\u6240\u6709\u5ba2\u6237\u7aef\u652f\u6301\uff0c\u4f46\u662f\u5982\u679c\u60a8\u4e0d\u5e0c\u671b\u63d0\u4f9b Mozillas \u517c\u5bb9\u6027\u8868 \u4e2d\u201cModern\u201d\u884c\u4ee5\u5916\u7684\u4efb\u4f55\u670d\u52a1\uff0c\u90a3\u4e48\u60a8\u5e94\u8be5\u6beb\u4e0d\u72b9\u8c6b\u5730\u914d\u7f6e certbot \u6765\u8bf7\u6c42\u8fd9\u4e9b\u7c7b\u578b\u7684\u8bc1\u4e66\u3002 \u8fd9\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e \u73af\u5883\u53d8\u91cf USE_ECDSA=1 (3.0.1 \u7248\u672c\u4ee5\u6765\u7684\u9ed8\u8ba4\u503c)\u6765\u5b9e\u73b0\uff0c\u5e76\u4e14\u60a8\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528 ELLIPTIC_CURVE \u6765\u4f18\u5316\u8981\u4f7f\u7528\u7684\u66f2\u7ebf\u3002 \u5982\u679c\u4f60\u5df2\u7ecf\u4e0b\u8f7d\u4e86 RSA \u8bc1\u4e66\uff0c\u4f60\u5c06\u4e0d\u5f97\u4e0d\u7b49\u5f85\u76f4\u5230\u4ed6\u4eec\u5230\u671f\uff0c\u6216 \u5f3a\u5236 \u66f4\u65b0\uff0c\u5728\u6b64\u66f4\u6539\u751f\u6548\u4e4b\u524d\u3002 \u4f7f\u7528\u8fd9\u4e2a\u9009\u9879\uff0c\u4f60\u5c06\u53ea\u4e3a\u4f60\u6240\u6709\u7684\u670d\u52a1\u5668\u914d\u7f6e\u521b\u5efa ECDSA \u8bc1\u4e66\uff0c\u7136\u800c\uff0c\u6211\u5e94\u8be5\u63d0\u5230\u7684\u662f\uff0c\u6709\u4e00\u79cd\u65b9\u6cd5\u53ef\u4ee5\u914d\u7f6e Nginx \u540c\u65f6\u63d0\u4f9b ECDSA \u548c RSA \u8bc1\u4e66\uff0c\u4f46\u8fd9\u5728 \u9ad8\u7ea7\u7528\u6cd5 \u6587\u6863\u4e2d\u6709\u8fdb\u4e00\u6b65\u7684\u89e3\u91ca\u3002 \u7eed\u8ba2\u68c0\u67e5\u5468\u671f \u00b6 \u8be5\u5bb9\u5668\u5c06\u5728\u73af\u5883\u53d8\u91cf RENEWAL_INTERVAL \u4e2d\u5b9a\u4e49\u7684\u65f6\u95f4\u6301\u7eed\u65f6\u95f4\u8fc7\u540e\u81ea\u52a8\u542f\u52a8 certbot \u8bc1\u4e66\u66f4\u65b0\u68c0\u67e5\u3002 \u5728 certbot \u5b8c\u6210\u5b83\u7684\u5de5\u4f5c\u540e\uff0c\u4ee3\u7801\u5c06\u8fd4\u56de\u5e76\u7b49\u5f85\u5b9a\u4e49\u7684\u65f6\u95f4\uff0c\u7136\u540e\u518d\u6b21\u89e6\u53d1\u3002 \u8fd9\u4e2a\u8fc7\u7a0b\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u662f\u4e00\u4e2a while [ true ]; \u5faa\u73af\uff0c\u7ed3\u5c3e\u662f sleep : while [ true ] ; do # Run certbot... sleep \" $RENEWAL_INTERVAL \" done \u56e0\u6b64\uff0c\u5728\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 sleep \u8bc6\u522b\u7684\u4efb\u4f55\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982 3600 or 60m or 1h \u3002 \u5728\u5b83\u7684 \u624b\u518c \u4e2d\u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u5141\u8bb8\u7684\u503c\u3002 \u9ed8\u8ba4\u503c\u662f 8d \uff0c\u56e0\u4e3a\u8fd9\u5141\u8bb8\u6bcf\u6708\u591a\u6b21\u91cd\u8bd5\uff0c\u540c\u65f6\u5c06\u65e5\u5fd7\u4e2d\u7684\u8f93\u51fa\u4fdd\u6301\u5728\u975e\u5e38\u4f4e\u7684\u6c34\u5e73\u3002 \u5982\u679c\u6ca1\u6709\u4ec0\u4e48\u9700\u8981\u66f4\u65b0\uff0ccertbot \u4e0d\u4f1a\u505a\u4efb\u4f55\u4e8b\u60c5\uff0c\u6240\u4ee5\u5982\u679c\u4f60\u60f3\u628a\u5b83\u8bbe\u7f6e\u5f97\u66f4\u4f4e\u5e94\u8be5\u662f\u6ca1\u6709\u95ee\u9898\u7684\u3002 \u552f\u4e00\u9700\u8981\u8003\u8651\u7684\u662f\u4e0d\u8981\u8ba9\u5b83\u8d85\u8fc7\u4e00\u4e2a\u6708\uff0c\u56e0\u4e3a\u8fd9\u6837\u60a8\u5c31\u4f1a\u9519\u8fc7 certbot \u8ba4\u4e3a\u6709\u5fc5\u8981\u66f4\u65b0\u8bc1\u4e66\u7684\u7a97\u53e3 6 \u3002 Diffie-Hellman \u53c2\u6570 \u00b6 \u5173\u4e8e Diffie-Hellman \u53c2\u6570\uff0c\u5efa\u8bae\u4f60\u4e3a\u4f60\u7684\u670d\u52a1\u5668\u8bbe\u7f6e\u4e00\u4e2a\uff0c\u5728 Nginx \u4e2d\uff0c\u4f60\u901a\u8fc7\u5728\u670d\u52a1\u5668\u5757\u4e2d\u5305\u542b\u4ee5 ssl_dhparam \u5f00\u5934\u7684\u884c\u6765\u5b9a\u4e49\u5b83(\u53c2\u89c1 example_server.conf )\u3002 \u7136\u800c\uff0c\u4f60\u53ef\u4ee5\u5728\u6ca1\u6709\u5b83\u7684\u60c5\u51b5\u4e0b\u521b\u5efa\u4e00\u4e2a\u914d\u7f6e\u6587\u4ef6\uff0cNginx \u53ef\u4ee5\u5f88\u597d\u5730\u5904\u7406\u4e0d\u4f9d\u8d56\u4e8e Diffie-Hellman \u5bc6\u94a5\u4ea4\u6362\u7684\u5bc6\u7801( \u5173\u4e8e\u5bc6\u7801\u7684\u66f4\u591a\u4fe1\u606f )\u3002 ../examples/example_server.conf server { # Listen to port 443 on both IPv4 and IPv6. listen 443 ssl default_server reuseport ; listen [::]:443 ssl default_server reuseport ; # Domain names this server should respond to. server_name yourdomain.org www.yourdomain.org ; # Load the certificate files. ssl_certificate /etc/letsencrypt/live/test-name/fullchain.pem ; ssl_certificate_key /etc/letsencrypt/live/test-name/privkey.pem ; ssl_trusted_certificate /etc/letsencrypt/live/test-name/chain.pem ; # Load the Diffie-Hellman parameter. ssl_dhparam /etc/letsencrypt/dhparams/dhparam.pem ; return 200 'Let\\'s Encrypt certificate successfully installed!' ; add_header Content-Type text/plain ; } \u8fd9\u4e9b\u53c2\u6570\u8d8a\u5927\uff0c\u751f\u6210\u5b83\u4eec\u6240\u9700\u7684\u65f6\u95f4\u5c31\u8d8a\u957f\u3002 \u6211\u5f88\u4e0d\u5e78\uff0c\u6211\u82b1\u4e86 65 \u5206\u949f\u5728\u4e00\u4e2a\u65e7\u7684 3.0GHz CPU \u4e0a\u751f\u6210\u4e00\u4e2a 4096 \u4f4d\u7684\u53c2\u6570\u3002 \u8fd9\u5c06\u5728\u8fd0\u884c\u4e4b\u95f4\u53d1\u751f\u5f88\u5927\u7684\u53d8\u5316\uff0c\u56e0\u4e3a\u5176\u4e2d\u6d89\u53ca\u5230\u4e00\u4e9b\u968f\u673a\u6027\u3002 \u4e00\u4e2a 2048 \u4f4d\u7684\u53c2\u6570\uff0c\u4eca\u5929\u4ecd\u7136\u662f\u5b89\u5168\u7684\uff0c\u5728\u73b0\u4ee3 CPU \u4e0a\u5927\u7ea6\u53ef\u4ee5\u5728 1-3 \u5206\u949f\u5185\u8ba1\u7b97\u51fa\u6765(\u8fd9\u4e2a\u8fc7\u7a0b\u53ea\u9700\u8981\u5b8c\u6210\u4e00\u6b21\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u53c2\u6570\u4e2d\u7684\u4e00\u4e2a\u5728\u4f60\u7f51\u7ad9\u7684\u5269\u4f59\u751f\u547d\u5468\u671f\u4e2d\u90fd\u662f\u6709\u6548\u7684)\u3002 \u8981\u4fee\u6539\u53c2\u6570\u7684\u5927\u5c0f\uff0c\u53ef\u4ee5\u8bbe\u7f6e DHPARAM_SIZE \u73af\u5883\u53d8\u91cf\u3002 \u5982\u679c\u6ca1\u6709\u63d0\u4f9b\u4efb\u4f55\u4fe1\u606f\uff0c\u9ed8\u8ba4\u4e3a 2048 \u3002 It is also possible to have all your server configs point to the same Diffie-Hellman parameter on disk. There is no negative effects in doing this for home use ( source 1 & source 2 ). For persistence you should place it inside the dedicated folder /etc/letsencrypt/dhparams/ , which is inside the predefined Docker volume . There is, however, no requirement to do so, since a missing parameter will be created where the config file expects the file to be. But this would mean that the script will have to re-create these every time you restart the container, which may become a little bit tedious. You can also create this file on a completely different (faster?) computer and just mount/copy the created file into this container. This is perfectly fine, since it is nothing \"private/personal\" about this file. The only thing to think about in that case would perhaps be to use a folder that is not under /etc/letsencrypt/ , since that would otherwise cause a double mount. \u5e2e\u52a9\u4ece @staticfloat \u7684\u6620\u50cf\u8fc1\u79fb \u00b6 \u5f53\u6d89\u53ca\u5230\u6784\u5efa/\u8fd0\u884c\u65f6\uff0c\u8fd9\u4e24\u4e2a\u6620\u50cf\u5e76\u6ca1\u6709\u4ec0\u4e48\u4e0d\u540c\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u5b58\u50a8\u5e93\u6700\u521d\u662f\u4e00\u4e2a\u5206\u652f\u3002 \u6240\u4ee5\u5c31\u50cf\u5728 @staticfloat \u7684\u8bbe\u7f6e\u4e2d\u4e00\u6837\uff0c\u4f60\u9700\u8981\u628a\u4f60\u81ea\u5df1\u7684 *.conf \u6587\u4ef6\u653e\u5230\u5bb9\u5668\u7684 /etc/nginx/conf.d/ \u6587\u4ef6\u5939\u4e2d\uff0c\u7136\u540e\u4f60\u5e94\u8be5\u53ef\u4ee5\u50cf\u542f\u52a8\u4ed6\u7684\u4e00\u6837\u542f\u52a8\u8fd9\u4e2a\u6587\u4ef6\u3002 This can either be done by copying your own files into the container at build time , or you can mount a local folder to /etc/nginx/user_conf.d/ and run it directly . In the former case you need to make sure you do not accidentally overwrite the two files present in this repository's nginx_conf.d/ folder, since these are required in order for certbot to request certificates. The only obligatory environment variable for starting this container is the CERTBOT_EMAIL one, just like in @staticfloat 's case, but I have exposed a couple of more that can be changed from their defaults if you like. Then there is of course any environment variables read by the parent container as well, but those are probably not as important. If you were using templating before, you should probably look into \"template\" files used by the Nginx parent container, since this is not something I have personally implemented in mine.","title":"\u8be6\u7ec6\u4ecb\u7ecd"},{"location":"docker-nginx-certbot/docs/good_to_know/#_1","text":"\u672c\u6587\u6863\u5305\u542b\u5728\u5f00\u59cb\u4f7f\u7528\u6b64\u56fe\u50cf\u4e4b\u524d\u6700\u597d\u4e86\u89e3\u7684\u529f\u80fd\u548c\u884c\u4e3a\u4fe1\u606f\u3002 \u8bf7\u968f\u610f\u9605\u8bfb\uff0c\u4f46\u6211\u5411\u5927\u5bb6\u63a8\u8350\u524d\u4e24\u90e8\u5206\u3002","title":"\u77e5\u9053\u5c31\u597d"},{"location":"docker-nginx-certbot/docs/good_to_know/#_2","text":"\u5982\u679c\u4f60\u53ea\u662f\u5728\u5c1d\u8bd5\u8bbe\u7f6e\u8fd9\u4e2a\uff0c\u6211\u5efa\u8bae\u4f60\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf STAGING=1 \uff0c\u56e0\u4e3a\u8fd9\u4f1a\u5c06 Let\u2019s Encrypt \u6311\u6218 URL \u66f4\u6539\u4e3a\u4ed6\u4eec\u7684 STAGING URL\u3002 \u8fd9\u4e0d\u4f1a\u4e3a\u60a8\u63d0\u4f9b \u5408\u9002\u7684 \u8bc1\u4e66\uff0c\u4f46\u4e0e\u975e\u5206\u671f \u751f\u4ea7\u8bc1\u4e66 \u76f8\u6bd4\uff0c\u5b83\u5177\u6709\u9ad8\u5f97\u53ef\u7b11\u7684 \u901f\u7387\u9650\u5236 \uff0c\u56e0\u6b64\u60a8\u53ef\u4ee5\u5728\u4e0d\u5fc5\u62c5\u5fc3\u7684\u60c5\u51b5\u4e0b\u72af\u66f4\u591a\u9519\u8bef\u3002 \u60a8\u8fd8\u53ef\u4ee5\u6dfb\u52a0 DEBUG=1 \u4ee5\u83b7\u5f97\u66f4\u8be6\u7ec6\u7684\u65e5\u5fd7\u8bb0\u5f55\uff0c\u4ee5\u4fbf\u66f4\u597d\u5730\u7406\u89e3\u6b63\u5728\u53d1\u751f\u7684\u4e8b\u60c5\u3002 \u50cf\u8fd9\u6837\u5f15\u5165\u4ed6\u4eec: docker run -it -p 80 :80 -p 443 :443 \\ --env CERTBOT_EMAIL = your@email.org \\ --env STAGING = 1 \\ --env DEBUG = 1 \\ jonasal/nginx-certbot:latest Note \u8bf7\u6ce8\u610f\uff0c\u5f53\u5207\u6362\u5230\u751f\u4ea7\u8bc1\u4e66\u65f6\uff0c\u60a8\u8981\u4e48\u9700\u8981\u5220\u9664\u9884\u6f14\u8bc1\u4e66\uff0c\u8981\u4e48\u53d1\u51fa \u5f3a\u5236\u66f4\u65b0 \uff0c \u56e0\u4e3a\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u4efb\u4f55\u6709\u6548\u7684(\u9884\u6f14\u6216\u751f\u4ea7)\u8bc1\u4e66\u5df2\u7ecf\u5b58\u5728\uff0ccertbot \u5c06\u4e0d\u4f1a\u8bf7\u6c42\u65b0\u8bc1\u4e66\u3002","title":"\u521d\u59cb\u6d4b\u8bd5"},{"location":"docker-nginx-certbot/docs/good_to_know/#conf","text":"\u4f5c\u4e3a Nginx \u4e2d\u4e00\u4e2a\u57fa\u672c\u7684(\u4f46\u6709\u6548\u7684)SSL \u670d\u52a1\u5668\u7684\u4f8b\u5b50\uff0c\u4f60\u53ef\u4ee5\u67e5\u770b examples/ \u76ee\u5f55\u4e2d\u7684 example_server.conf \u6587\u4ef6\u3002 ../examples/example_server.conf server { # Listen to port 443 on both IPv4 and IPv6. listen 443 ssl default_server reuseport ; listen [::]:443 ssl default_server reuseport ; # Domain names this server should respond to. server_name yourdomain.org www.yourdomain.org ; # Load the certificate files. ssl_certificate /etc/letsencrypt/live/test-name/fullchain.pem ; ssl_certificate_key /etc/letsencrypt/live/test-name/privkey.pem ; ssl_trusted_certificate /etc/letsencrypt/live/test-name/chain.pem ; # Load the Diffie-Hellman parameter. ssl_dhparam /etc/letsencrypt/dhparams/dhparam.pem ; return 200 'Let\\'s Encrypt certificate successfully installed!' ; add_header Content-Type text/plain ; } \u901a\u8fc7\u5c06 yourdomain.org \u66ff\u6362\u4e3a\u60a8\u81ea\u5df1\u7684\u57df\u540d\uff0c\u60a8\u5b9e\u9645\u4e0a\u53ef\u4ee5\u4f7f\u7528\u6b64\u914d\u7f6e\u5feb\u901f\u6d4b\u8bd5\u4e8b\u60c5\u662f\u5426\u6b63\u5e38\u5de5\u4f5c\u3002 \u5728\u5b9e\u9645\u6267\u884c\u6b64\u64cd\u4f5c\u65f6\uff0c\u8fd8\u5e94\u8be5\u5c06\u8bc1\u4e66\u8def\u5f84 \"test-name\" \u66f4\u6539\u4e3a\u66f4\u5177\u63cf\u8ff0\u6027\u7684\u5185\u5bb9\u3002 \u5c06\u4fee\u6539\u540e\u7684\u914d\u7f6e\u653e\u5728 user_conf.d/ \u6587\u4ef6\u5939\u4e2d\uff0c\u7136\u540e\u6309\u7167 \u4e3b README \u4e2d\u63cf\u8ff0\u7684\u90a3\u6837\u8fd0\u884c\u5b83\u3002 \u8ba9\u5bb9\u5668\u6682\u65f6\u53d1\u6325\u5b83\u7684 \u9b54\u529b \uff0c\u7136\u540e\u5c1d\u8bd5\u8bbf\u95ee\u60a8\u7684\u57df\u3002 \u73b0\u5728\uff0c\u60a8\u5e94\u8be5\u770b\u5230\u5b57\u7b26\u4e32\u201c Let's Encrypt certificate successfully installed! \u201d\u3002 \u5bb9\u5668\u7684\u914d\u7f6e\u6587\u4ef6\u5939\u4e2d \u5df2\u7ecf\u5b58\u5728 \u7684\u6587\u4ef6\u7528\u4e8e\u5904\u7406\u6240\u6709\u4f20\u5165\u8bf7\u6c42(\u4e0d\u5c5e\u4e8e certbot \u6311\u6218\u8bf7\u6c42)\u7684 HTTPS \u91cd\u5b9a\u5411\uff0c\u56e0\u6b64\u8981\u6ce8\u610f\u4e0d\u8981\u8986\u76d6\u8fd9\u4e9b\u6587\u4ef6\uff0c\u9664\u975e\u60a8\u77e5\u9053\u81ea\u5df1\u5728\u505a\u4ec0\u4e48\u3002","title":"\u521b\u5efa\u4e00\u4e2a\u670d\u52a1\u5668\u7684.conf\u6587\u4ef6"},{"location":"docker-nginx-certbot/docs/good_to_know/#user_confd","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cNginx \u5c06\u4ece /etc/nginx/conf.d/ \u6587\u4ef6\u5939\u4e2d\u52a0\u8f7d\u4efb\u4f55\u4ee5 .conf \u7ed3\u5c3e\u7684\u6587\u4ef6\u3002 \u7136\u800c\uff0c\u8fd9\u4e2a\u6620\u50cf\u4f7f\u7528\u4e86\u4e24\u4e2a\u91cd\u8981\u7684 \u914d\u7f6e\u6587\u4ef6 \uff0c\u5b83\u4eec\u9700\u8981\u5b58\u5728(\u9664\u975e\u4f60\u77e5\u9053\u5982\u4f55\u7528\u4f60\u81ea\u5df1\u7684\u6587\u4ef6\u66ff\u6362\u5b83\u4eec)\uff0c\u5e76\u4e14\u4e3b\u673a\u6302\u8f7d\u4e00\u4e2a\u672c\u5730\u6587\u4ef6\u5939\u5230\u524d\u9762\u63d0\u5230\u7684\u4f4d\u7f6e\u4f1a\u63a9\u76d6\u8fd9\u4e9b\u91cd\u8981\u6587\u4ef6\u3002 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u5efa\u8bae\u4f60\u4e3b\u673a\u6302\u8f7d\u4e00\u4e2a\u672c\u5730\u6587\u4ef6\u5939\u5230 /etc/nginx/user_conf.d/ \uff0c\u4e00\u90e8\u5206\u7ba1\u7406\u811a\u672c\u5c06 \u521b\u5efa\u7b26\u53f7\u94fe\u63a5 \u4ece conf.d/ \u5230 user_conf.d/ \u4e2d\u7684\u6587\u4ef6\u3002 \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6211\u4eec\u4e3a\u7528\u6237\u63d0\u4f9b\u4e86\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u6cd5\u6765\u542f\u52a8\u5bb9\u5668\uff0c\u800c\u4e0d\u5fc5\u9996\u5148\u6784\u5efa\u672c\u5730\u6620\u50cf\uff0c\u540c\u65f6\u4ecd\u7136\u8ba9\u4ed6\u4eec\u6709\u673a\u4f1a\u7ee7\u7eed\u4ee5\u65e7\u7684\u65b9\u5f0f\u8fdb\u884c\u64cd\u4f5c\uff0c\u4f8b\u5982 @staticfloat \u955c\u50cf \u7684\u5de5\u4f5c\u65b9\u5f0f\u3002","title":"user_conf.d \u6587\u4ef6\u5939"},{"location":"docker-nginx-certbot/docs/good_to_know/#_3","text":"\u6240\u5305\u542b\u7684\u811a\u672c\u5c06\u904d\u5386 Nginx /etc/nginx/conf.d/ \u6587\u4ef6\u5939\u4e2d\u627e\u5230\u7684\u6240\u6709\u914d\u7f6e\u6587\u4ef6( .conf )\uff0c\u5e76\u4ece\u6587\u4ef6\u7684\u5185\u5bb9\u521b\u5efa\u8bf7\u6c42\u3002 \u5728\u6bcf\u4e2a\u72ec\u7279\u7684\u6587\u4ef6\u4e2d\uff0c\u5b83\u4f1a\u627e\u5230\u4efb\u4f55\u4e00\u884c\u8bf4: ssl_certificate_key /etc/letsencrypt/live/test-name/privkey.pem; \u5e76\u4e14\u53ea\u63d0\u53d6\u8fd9\u91cc\u8bf4\u201c test-name \u201d\u7684\u90e8\u5206\u3002 \u8fd9\u662f\u5c06\u63d0\u4f9b\u7ed9 certbot \u7684 --cert-name \u53c2\u6570\u7684\u503c\uff0c\u56e0\u6b64\u5c3d\u7ba1\u60a8\u57fa\u672c\u4e0a\u53ef\u4ee5\u5728\u8fd9\u91cc\u8bbe\u7f6e\u4efb\u4f55\u60a8\u60f3\u8981\u7684\u540d\u79f0\uff0c\u4f46\u6211\u5efa\u8bae\u60a8\u4e3a\u4e86\u81ea\u5df1\u7684\u7f18\u6545\u4fdd\u6301\u5b83\u7684\u63cf\u8ff0\u6027\u3002 \u5728\u6b64\u4e4b\u540e\uff0c\u811a\u672c\u5c06\u627e\u5230\u5305\u542b server_name \u7684\u6240\u6709\u884c\uff0c\u5e76\u5728\u540c\u4e00\u884c\u4e2d\u5217\u51fa\u6240\u6709\u57df\u540d\u3002 \u4e00\u4e2a\u5305\u542b\u5982\u4e0b\u5185\u5bb9\u7684\u6587\u4ef6: server { listen 443 ssl; server_name yourdomain.org www.yourdomain.org; ssl_certificate_key /etc/letsencrypt/live/test-name/privkey.pem; ... } server { listen 443 ssl; server_name sub.yourdomain.org; ssl_certificate_key /etc/letsencrypt/live/test-name/privkey.pem; ... } \u5c06\u5171\u4eab\u76f8\u540c\u7684\u8bc1\u4e66\u6587\u4ef6(\u5373\"test-name\" \u8bc1\u4e66)\uff0c\u5e76\u4e14\u6240\u6709\u5217\u51fa\u7684\u57df\u53d8\u4f53\u5c06\u5305\u62ec\u4e3a\u6709\u6548\u7684 alt names \u3002 \u4e5f\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u670d\u52a1\u5668\u5757\u5206\u5272\u4e3a\u4e24\u4e2a\u5355\u72ec\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u56e0\u4e3a\u811a\u672c\u5c06\u5728\u6574\u4e2a\u626b\u63cf\u8fc7\u7a0b\u4e2d\u8ddf\u8e2a\"test-name\"\u503c\uff0c\u5e76\u5c06\u4efb\u4f55\u989d\u5916\u7684\u53d1\u73b0\u6dfb\u52a0\u5230\u5176\u4e2d\u3002 \u6240\u4ee5\u6700\u540e\u6211\u4eec\u4f1a\u5f97\u5230\u4e00\u4e2a\u8bf7\u6c42\uff0c\u770b\u8d77\u6765\u50cf\u8fd9\u6837: certbot --cert-name \"test-name\" ... -d yourdomain.org -d www.yourdomain.org -d sub.yourdomain.org \u811a\u672c\u5728\u5b9a\u4e49\u8bf7\u6c42\u4e2d\u5e94\u8be5\u5305\u542b\u7684\u5185\u5bb9\u7684\u53ef\u5b9a\u5236\u6027\u65b9\u9762\u975e\u5e38\u5f3a\u5927\uff0c\u4f46\u8fd9\u88ab\u8ba4\u4e3a\u662f\u4e00\u4e2a\u66f4\u9ad8\u7ea7\u7684\u7528\u4f8b\uff0c\u53ef\u4ee5\u5728\u9ad8\u7ea7\u7528\u6cd5\u6587\u6863\u7684 \u8986\u76d6 server_name \u90e8\u5206\u4e2d\u8fdb\u4e00\u6b65\u7814\u7a76\u3002 \u6b64\u5916\uff0c\u6211\u4eec\u652f\u6301\u901a\u914d\u7b26\u57df\u540d\uff0c\u4f46\u8fd9\u8981\u6c42\u60a8\u4f7f\u7528\u80fd\u591f\u8fdb\u884c DNS-01 \u6311\u6218\u7684\u9a8c\u8bc1\u5668\uff0c\u6709\u5173\u8fd9\u65b9\u9762\u7684\u66f4\u591a\u4fe1\u606f\u53ef\u4ee5\u5728 Certbot \u8ba4\u8bc1 \u6587\u6863\u4e2d\u627e\u5230\u3002","title":"\u811a\u672c\u5982\u4f55\u5411\u8bc1\u4e66\u8bf7\u6c42\u6dfb\u52a0\u57df\u540d"},{"location":"docker-nginx-certbot/docs/good_to_know/#ecdsa-rsa","text":"ECDSA(\u6216 ECC) \u8bc1\u4e66\u4f7f\u7528\u6bd4\u6210\u719f\u7684 RSA \u8bc1\u4e66\u66f4\u65b0\u7684\u52a0\u5bc6\u7b97\u6cd5\uff0c\u5e76\u4e14\u636e\u79f0\u66f4\u5b89\u5168\uff0c\u540c\u65f6\u66f4\u5c0f\u3002 \u5b83\u4eec\u7684\u7f3a\u70b9\u662f\u8fd8\u6ca1\u6709\u88ab\u6240\u6709\u5ba2\u6237\u7aef\u652f\u6301\uff0c\u4f46\u662f\u5982\u679c\u60a8\u4e0d\u5e0c\u671b\u63d0\u4f9b Mozillas \u517c\u5bb9\u6027\u8868 \u4e2d\u201cModern\u201d\u884c\u4ee5\u5916\u7684\u4efb\u4f55\u670d\u52a1\uff0c\u90a3\u4e48\u60a8\u5e94\u8be5\u6beb\u4e0d\u72b9\u8c6b\u5730\u914d\u7f6e certbot \u6765\u8bf7\u6c42\u8fd9\u4e9b\u7c7b\u578b\u7684\u8bc1\u4e66\u3002 \u8fd9\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e \u73af\u5883\u53d8\u91cf USE_ECDSA=1 (3.0.1 \u7248\u672c\u4ee5\u6765\u7684\u9ed8\u8ba4\u503c)\u6765\u5b9e\u73b0\uff0c\u5e76\u4e14\u60a8\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528 ELLIPTIC_CURVE \u6765\u4f18\u5316\u8981\u4f7f\u7528\u7684\u66f2\u7ebf\u3002 \u5982\u679c\u4f60\u5df2\u7ecf\u4e0b\u8f7d\u4e86 RSA \u8bc1\u4e66\uff0c\u4f60\u5c06\u4e0d\u5f97\u4e0d\u7b49\u5f85\u76f4\u5230\u4ed6\u4eec\u5230\u671f\uff0c\u6216 \u5f3a\u5236 \u66f4\u65b0\uff0c\u5728\u6b64\u66f4\u6539\u751f\u6548\u4e4b\u524d\u3002 \u4f7f\u7528\u8fd9\u4e2a\u9009\u9879\uff0c\u4f60\u5c06\u53ea\u4e3a\u4f60\u6240\u6709\u7684\u670d\u52a1\u5668\u914d\u7f6e\u521b\u5efa ECDSA \u8bc1\u4e66\uff0c\u7136\u800c\uff0c\u6211\u5e94\u8be5\u63d0\u5230\u7684\u662f\uff0c\u6709\u4e00\u79cd\u65b9\u6cd5\u53ef\u4ee5\u914d\u7f6e Nginx \u540c\u65f6\u63d0\u4f9b ECDSA \u548c RSA \u8bc1\u4e66\uff0c\u4f46\u8fd9\u5728 \u9ad8\u7ea7\u7528\u6cd5 \u6587\u6863\u4e2d\u6709\u8fdb\u4e00\u6b65\u7684\u89e3\u91ca\u3002","title":"ECDSA \u548c RSA \u8bc1\u4e66"},{"location":"docker-nginx-certbot/docs/good_to_know/#_4","text":"\u8be5\u5bb9\u5668\u5c06\u5728\u73af\u5883\u53d8\u91cf RENEWAL_INTERVAL \u4e2d\u5b9a\u4e49\u7684\u65f6\u95f4\u6301\u7eed\u65f6\u95f4\u8fc7\u540e\u81ea\u52a8\u542f\u52a8 certbot \u8bc1\u4e66\u66f4\u65b0\u68c0\u67e5\u3002 \u5728 certbot \u5b8c\u6210\u5b83\u7684\u5de5\u4f5c\u540e\uff0c\u4ee3\u7801\u5c06\u8fd4\u56de\u5e76\u7b49\u5f85\u5b9a\u4e49\u7684\u65f6\u95f4\uff0c\u7136\u540e\u518d\u6b21\u89e6\u53d1\u3002 \u8fd9\u4e2a\u8fc7\u7a0b\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u662f\u4e00\u4e2a while [ true ]; \u5faa\u73af\uff0c\u7ed3\u5c3e\u662f sleep : while [ true ] ; do # Run certbot... sleep \" $RENEWAL_INTERVAL \" done \u56e0\u6b64\uff0c\u5728\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 sleep \u8bc6\u522b\u7684\u4efb\u4f55\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982 3600 or 60m or 1h \u3002 \u5728\u5b83\u7684 \u624b\u518c \u4e2d\u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u5141\u8bb8\u7684\u503c\u3002 \u9ed8\u8ba4\u503c\u662f 8d \uff0c\u56e0\u4e3a\u8fd9\u5141\u8bb8\u6bcf\u6708\u591a\u6b21\u91cd\u8bd5\uff0c\u540c\u65f6\u5c06\u65e5\u5fd7\u4e2d\u7684\u8f93\u51fa\u4fdd\u6301\u5728\u975e\u5e38\u4f4e\u7684\u6c34\u5e73\u3002 \u5982\u679c\u6ca1\u6709\u4ec0\u4e48\u9700\u8981\u66f4\u65b0\uff0ccertbot \u4e0d\u4f1a\u505a\u4efb\u4f55\u4e8b\u60c5\uff0c\u6240\u4ee5\u5982\u679c\u4f60\u60f3\u628a\u5b83\u8bbe\u7f6e\u5f97\u66f4\u4f4e\u5e94\u8be5\u662f\u6ca1\u6709\u95ee\u9898\u7684\u3002 \u552f\u4e00\u9700\u8981\u8003\u8651\u7684\u662f\u4e0d\u8981\u8ba9\u5b83\u8d85\u8fc7\u4e00\u4e2a\u6708\uff0c\u56e0\u4e3a\u8fd9\u6837\u60a8\u5c31\u4f1a\u9519\u8fc7 certbot \u8ba4\u4e3a\u6709\u5fc5\u8981\u66f4\u65b0\u8bc1\u4e66\u7684\u7a97\u53e3 6 \u3002","title":"\u7eed\u8ba2\u68c0\u67e5\u5468\u671f"},{"location":"docker-nginx-certbot/docs/good_to_know/#diffie-hellman","text":"\u5173\u4e8e Diffie-Hellman \u53c2\u6570\uff0c\u5efa\u8bae\u4f60\u4e3a\u4f60\u7684\u670d\u52a1\u5668\u8bbe\u7f6e\u4e00\u4e2a\uff0c\u5728 Nginx \u4e2d\uff0c\u4f60\u901a\u8fc7\u5728\u670d\u52a1\u5668\u5757\u4e2d\u5305\u542b\u4ee5 ssl_dhparam \u5f00\u5934\u7684\u884c\u6765\u5b9a\u4e49\u5b83(\u53c2\u89c1 example_server.conf )\u3002 \u7136\u800c\uff0c\u4f60\u53ef\u4ee5\u5728\u6ca1\u6709\u5b83\u7684\u60c5\u51b5\u4e0b\u521b\u5efa\u4e00\u4e2a\u914d\u7f6e\u6587\u4ef6\uff0cNginx \u53ef\u4ee5\u5f88\u597d\u5730\u5904\u7406\u4e0d\u4f9d\u8d56\u4e8e Diffie-Hellman \u5bc6\u94a5\u4ea4\u6362\u7684\u5bc6\u7801( \u5173\u4e8e\u5bc6\u7801\u7684\u66f4\u591a\u4fe1\u606f )\u3002 ../examples/example_server.conf server { # Listen to port 443 on both IPv4 and IPv6. listen 443 ssl default_server reuseport ; listen [::]:443 ssl default_server reuseport ; # Domain names this server should respond to. server_name yourdomain.org www.yourdomain.org ; # Load the certificate files. ssl_certificate /etc/letsencrypt/live/test-name/fullchain.pem ; ssl_certificate_key /etc/letsencrypt/live/test-name/privkey.pem ; ssl_trusted_certificate /etc/letsencrypt/live/test-name/chain.pem ; # Load the Diffie-Hellman parameter. ssl_dhparam /etc/letsencrypt/dhparams/dhparam.pem ; return 200 'Let\\'s Encrypt certificate successfully installed!' ; add_header Content-Type text/plain ; } \u8fd9\u4e9b\u53c2\u6570\u8d8a\u5927\uff0c\u751f\u6210\u5b83\u4eec\u6240\u9700\u7684\u65f6\u95f4\u5c31\u8d8a\u957f\u3002 \u6211\u5f88\u4e0d\u5e78\uff0c\u6211\u82b1\u4e86 65 \u5206\u949f\u5728\u4e00\u4e2a\u65e7\u7684 3.0GHz CPU \u4e0a\u751f\u6210\u4e00\u4e2a 4096 \u4f4d\u7684\u53c2\u6570\u3002 \u8fd9\u5c06\u5728\u8fd0\u884c\u4e4b\u95f4\u53d1\u751f\u5f88\u5927\u7684\u53d8\u5316\uff0c\u56e0\u4e3a\u5176\u4e2d\u6d89\u53ca\u5230\u4e00\u4e9b\u968f\u673a\u6027\u3002 \u4e00\u4e2a 2048 \u4f4d\u7684\u53c2\u6570\uff0c\u4eca\u5929\u4ecd\u7136\u662f\u5b89\u5168\u7684\uff0c\u5728\u73b0\u4ee3 CPU \u4e0a\u5927\u7ea6\u53ef\u4ee5\u5728 1-3 \u5206\u949f\u5185\u8ba1\u7b97\u51fa\u6765(\u8fd9\u4e2a\u8fc7\u7a0b\u53ea\u9700\u8981\u5b8c\u6210\u4e00\u6b21\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u53c2\u6570\u4e2d\u7684\u4e00\u4e2a\u5728\u4f60\u7f51\u7ad9\u7684\u5269\u4f59\u751f\u547d\u5468\u671f\u4e2d\u90fd\u662f\u6709\u6548\u7684)\u3002 \u8981\u4fee\u6539\u53c2\u6570\u7684\u5927\u5c0f\uff0c\u53ef\u4ee5\u8bbe\u7f6e DHPARAM_SIZE \u73af\u5883\u53d8\u91cf\u3002 \u5982\u679c\u6ca1\u6709\u63d0\u4f9b\u4efb\u4f55\u4fe1\u606f\uff0c\u9ed8\u8ba4\u4e3a 2048 \u3002 It is also possible to have all your server configs point to the same Diffie-Hellman parameter on disk. There is no negative effects in doing this for home use ( source 1 & source 2 ). For persistence you should place it inside the dedicated folder /etc/letsencrypt/dhparams/ , which is inside the predefined Docker volume . There is, however, no requirement to do so, since a missing parameter will be created where the config file expects the file to be. But this would mean that the script will have to re-create these every time you restart the container, which may become a little bit tedious. You can also create this file on a completely different (faster?) computer and just mount/copy the created file into this container. This is perfectly fine, since it is nothing \"private/personal\" about this file. The only thing to think about in that case would perhaps be to use a folder that is not under /etc/letsencrypt/ , since that would otherwise cause a double mount.","title":"Diffie-Hellman \u53c2\u6570"},{"location":"docker-nginx-certbot/docs/good_to_know/#staticfloat","text":"\u5f53\u6d89\u53ca\u5230\u6784\u5efa/\u8fd0\u884c\u65f6\uff0c\u8fd9\u4e24\u4e2a\u6620\u50cf\u5e76\u6ca1\u6709\u4ec0\u4e48\u4e0d\u540c\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u5b58\u50a8\u5e93\u6700\u521d\u662f\u4e00\u4e2a\u5206\u652f\u3002 \u6240\u4ee5\u5c31\u50cf\u5728 @staticfloat \u7684\u8bbe\u7f6e\u4e2d\u4e00\u6837\uff0c\u4f60\u9700\u8981\u628a\u4f60\u81ea\u5df1\u7684 *.conf \u6587\u4ef6\u653e\u5230\u5bb9\u5668\u7684 /etc/nginx/conf.d/ \u6587\u4ef6\u5939\u4e2d\uff0c\u7136\u540e\u4f60\u5e94\u8be5\u53ef\u4ee5\u50cf\u542f\u52a8\u4ed6\u7684\u4e00\u6837\u542f\u52a8\u8fd9\u4e2a\u6587\u4ef6\u3002 This can either be done by copying your own files into the container at build time , or you can mount a local folder to /etc/nginx/user_conf.d/ and run it directly . In the former case you need to make sure you do not accidentally overwrite the two files present in this repository's nginx_conf.d/ folder, since these are required in order for certbot to request certificates. The only obligatory environment variable for starting this container is the CERTBOT_EMAIL one, just like in @staticfloat 's case, but I have exposed a couple of more that can be changed from their defaults if you like. Then there is of course any environment variables read by the parent container as well, but those are probably not as important. If you were using templating before, you should probably look into \"template\" files used by the Nginx parent container, since this is not something I have personally implemented in mine.","title":"\u5e2e\u52a9\u4ece@staticfloat\u7684\u6620\u50cf\u8fc1\u79fb"},{"location":"docker-nginx-certbot/docs/nginx_tips/","text":"Nginx Tips \u00b6 \u8fd9\u4e2a\u6587\u6863\u5305\u542b\u4e86\u4e00\u4e9b\u5173\u4e8e\u5982\u4f55\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u4fee\u6539 Nginx \u7684\u63d0\u793a\uff0c\u53ef\u80fd\u4f1a\u8ba9\u4f60\u611f\u5174\u8da3\u3002 \u8fd9\u4e9b\u90fd\u4e0d\u662f\u5fc5\u987b\u8981\u505a\u7684\uff0c\u4f46\u77e5\u9053\u8fd9\u4e9b\u4fe1\u606f\u66f4\u6709\u7528\uff0c\u6211\u53d1\u73b0\u8fd9\u4e9b\u4fe1\u606f\u5bf9\u4efb\u4f55\u6f5c\u5728\u7684\u672a\u6765\u52aa\u529b\u90fd\u662f\u6709\u7528\u7684\u3002 Nginx \u5982\u4f55\u52a0\u8f7d\u914d\u7f6e \u00b6 \u4e3a\u4e86\u7406\u89e3 Nginx \u5982\u4f55\u52a0\u8f7d\u4efb\u4f55\u81ea\u5b9a\u4e49\u914d\u7f6e\uff0c\u6211\u4eec\u9996\u5148\u8981\u770b\u4e00\u4e0b\u7236\u955c\u50cf\u4e2d\u7684\u4e3b\u6587\u4ef6 nginx.conf \u3002 \u5b83\u5305\u542b\u4e86\u4e00\u4e9b\u6807\u51c6\u8bbe\u7f6e\uff0c\u4f46\u5728\u6700\u540e\u4e00\u884c\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5b83\u6253\u5f00 /etc/nginx/conf.d/ \u6587\u4ef6\u5939\uff0c\u5e76\u52a0\u8f7d\u4efb\u4f55\u4ee5 .conf \u7ed3\u5c3e\u7684\u6587\u4ef6\u3002 user nginx ; worker_processes auto ; error_log /var/log/nginx/error.log notice ; pid /var/run/nginx.pid ; events { worker_connections 1024 ; } http { include /etc/nginx/mime.types ; default_type application/octet-stream ; log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' '$status $body_bytes_sent \"$http_referer\" ' '\"$http_user_agent\" \"$http_x_forwarded_for\"' ; access_log /var/log/nginx/access.log main ; sendfile on ; #tcp_nopush on; keepalive_timeout 65 ; #gzip on; include /etc/nginx/conf.d/*.conf ; # <------------ Extra stuff loaded here } Files in this folder are being loaded in alphabetical order, so something named 00-proxy.conf will be loaded before 10-other.conf . This i really useful to know, since it allows you to load common settings used by multiple server blocks that are loaded afterwards. However, all of these .conf file are loaded within the http block in Nginx, so if you want to change anything outside of this block (e.g. events ) you will have to add some sort of /docker-entrypoint.d/ script to handle it before Nginx starts, or you can mount your own custom nginx.conf on top of the default. A small disclaimer on the last part is that a host mounted file ( -v $(pwd)/nginx.conf:/etc/nginx/nginx.conf ) will not change inside the container if it is changed on the host. However, if you host mount a directory, and change any of the files within it, the changes will be visible inside the container. \u914d\u7f6e\u7ee7\u627f \u00b6 \u4e3a\u4e86\u4f7f\u8fd9\u4e2a\u89e3\u91ca\u7b80\u5355\u800c\u6709\u7528\uff0c\u6211\u4eec\u9996\u5148\u58f0\u660e Nginx \u914d\u7f6e\u88ab\u5206\u6210\u56db\u4e2a\u5757\u3002 \u5728\u5916\u90e8\u5757(\u4f8b\u5982 Global \u5757)\u4e2d\u58f0\u660e\u7684\u53d8\u91cf\u548c\u8bbe\u7f6e\u5c06\u88ab\u5185\u90e8\u5757(\u4f8b\u5982 Server \u5757)\u7ee7\u627f\uff0c\u9664\u975e\u4f60\u5728\u8fd9\u4e2a\u5185\u90e8\u5757\u4e2d\u66f4\u6539\u5b83\u3002 So in the example below I have added comments with the current value of the keepalive_timeout setting in each block: # -- Global/main block -- # keepalive_timeout = 60 (The default value) http { # -- HTTP block -- keepalive_timeout = 30 # The value has now changed to 30 server { # -- Server block -- # keepalive_timeout = 30 (value inherited from http block) location /abc/ { # -- Location block nbr 1 -- keepalive_timeout = 50 # The value has now changed to 50 } location /xyz/ { # -- Location block nbr 2 -- # keepalive_timeout = 30 (value inherited from server block) } } } This is pretty straight forward for the settings that are only one value, but the commonly used proxy_set_header setting can be declared multiple times in order to add multiple values to it, and its inheritance works a bit differently. The following is true of all of the settings that can be declared multiple times. In the example below we want to add two headers to all requests, so we declare them in the http block. This builds a map/dictionary with the key-value pairs we want, and this will be inherited to all the location blocks. However, in the first location block we want to add another header, but doing it in this way will instead overwrite the current one with just this new header. http { proxy_set_header key1 value1 ; proxy_set_header key2 value2 ; server { # proxy_headers: { # \"key1\": \"value1\" # \"key2\": \"value2\" # } location /abc/ { proxy_set_header key3 value3 ; # proxy_headers: { # \"key3\": \"value3\" # } } location /xyz/ { # proxy_headers: { # \"key1\": \"value1\" # \"key2\": \"value2\" # } } } } The suggested solution to this problem is to create a separate file with the \"common\" headers, and then include this file where needed. So in our case we create the file /etc/nginx/common_headers with the following content: proxy_set_header key1 value1; proxy_set_header key2 value2; and then change the config to the following which would make the special location block have all the desired headers: http { include common_headers ; server { location /abc/ { include common_headers ; proxy_set_header key3 value3 ; # proxy_headers: { # \"key1\": \"value1\" # \"key2\": \"value2\" # \"key3\": \"value3\" # } } location /xyz/ { } } } \u62d2\u7edd\u672a\u77e5\u670d\u52a1\u5668\u540d \u00b6 When setting up server blocks there exist a setting called default_server , which means that Nginx will use this server block in case it cannot match the incoming domain name with any of the other server_name s in its available config files. However, a less known fact is that if you do not specify a default_server Nginx will automatically use the first server block in its configuration files as the default server. This might cause confusion as Nginx could now \"accidentally\" serve a completely wrong site without the user knowing it. Luckily HTTPS removes some of this worry, since the browser will most likely throw an SSL_ERROR_BAD_CERT_DOMAIN if the returned certificate is not valid for the domain that the browser expected to visit. But if the cert is valid for that domain as well, then there will be problems. If you want to guard yourself against this, and return an error in the case that the client tries to connect with an unknown server name, you need to configure a catch-all block that responds in the default case. This is simple in the non-SSL case, where you can just return 444 which will terminate the connection immediately. server { listen 80 default_server; server_name _; return 444; } NOTE: The redirector.conf should be the `default_server` for port 80 in this image. Unfortunately it is not as simple in the secure HTTPS case, since Nginx would first need to perform the SSL handshake (which needs a valid certificate) before it can respond with 444 and drop the connection. To work around this I found a comment in this post which mentions that in version >=1.19.4 of Nginx you can actually use the ssl_reject_handshake feature to achieve the same functionality. server { listen 443 ssl default_server; ssl_reject_handshake on; } This will lead to an SSL_ERROR_UNRECOGNIZED_NAME_ALERT error in case the client tries to connect over HTTPS to a server name that is not served by this instance of Nginx, and the connection will be dropped immediately. \u6dfb\u52a0\u81ea\u5b9a\u4e49\u6a21\u5757 \u00b6 Adding a custom module to Nginx is not enirely trivial, since most guides I have found require you to re-complie everything with the desired module included and thus you cannot make use of the official Docker image to build upon. However, after some research I found that most of these modules are possible to compile and load as a dynamic module , which enables us to more or less just add one file and then change one line in the main nginx.conf . A complete example of how to do this is available over at AxisCommunications/docker-nginx-ldap , where a multi-stage Docker build can be viewed that add the LDAP module to the official Nginx image with minimal changes to the original.","title":"Nginx\u63d0\u793a"},{"location":"docker-nginx-certbot/docs/nginx_tips/#nginx-tips","text":"\u8fd9\u4e2a\u6587\u6863\u5305\u542b\u4e86\u4e00\u4e9b\u5173\u4e8e\u5982\u4f55\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u4fee\u6539 Nginx \u7684\u63d0\u793a\uff0c\u53ef\u80fd\u4f1a\u8ba9\u4f60\u611f\u5174\u8da3\u3002 \u8fd9\u4e9b\u90fd\u4e0d\u662f\u5fc5\u987b\u8981\u505a\u7684\uff0c\u4f46\u77e5\u9053\u8fd9\u4e9b\u4fe1\u606f\u66f4\u6709\u7528\uff0c\u6211\u53d1\u73b0\u8fd9\u4e9b\u4fe1\u606f\u5bf9\u4efb\u4f55\u6f5c\u5728\u7684\u672a\u6765\u52aa\u529b\u90fd\u662f\u6709\u7528\u7684\u3002","title":"Nginx Tips"},{"location":"docker-nginx-certbot/docs/nginx_tips/#nginx","text":"\u4e3a\u4e86\u7406\u89e3 Nginx \u5982\u4f55\u52a0\u8f7d\u4efb\u4f55\u81ea\u5b9a\u4e49\u914d\u7f6e\uff0c\u6211\u4eec\u9996\u5148\u8981\u770b\u4e00\u4e0b\u7236\u955c\u50cf\u4e2d\u7684\u4e3b\u6587\u4ef6 nginx.conf \u3002 \u5b83\u5305\u542b\u4e86\u4e00\u4e9b\u6807\u51c6\u8bbe\u7f6e\uff0c\u4f46\u5728\u6700\u540e\u4e00\u884c\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5b83\u6253\u5f00 /etc/nginx/conf.d/ \u6587\u4ef6\u5939\uff0c\u5e76\u52a0\u8f7d\u4efb\u4f55\u4ee5 .conf \u7ed3\u5c3e\u7684\u6587\u4ef6\u3002 user nginx ; worker_processes auto ; error_log /var/log/nginx/error.log notice ; pid /var/run/nginx.pid ; events { worker_connections 1024 ; } http { include /etc/nginx/mime.types ; default_type application/octet-stream ; log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' '$status $body_bytes_sent \"$http_referer\" ' '\"$http_user_agent\" \"$http_x_forwarded_for\"' ; access_log /var/log/nginx/access.log main ; sendfile on ; #tcp_nopush on; keepalive_timeout 65 ; #gzip on; include /etc/nginx/conf.d/*.conf ; # <------------ Extra stuff loaded here } Files in this folder are being loaded in alphabetical order, so something named 00-proxy.conf will be loaded before 10-other.conf . This i really useful to know, since it allows you to load common settings used by multiple server blocks that are loaded afterwards. However, all of these .conf file are loaded within the http block in Nginx, so if you want to change anything outside of this block (e.g. events ) you will have to add some sort of /docker-entrypoint.d/ script to handle it before Nginx starts, or you can mount your own custom nginx.conf on top of the default. A small disclaimer on the last part is that a host mounted file ( -v $(pwd)/nginx.conf:/etc/nginx/nginx.conf ) will not change inside the container if it is changed on the host. However, if you host mount a directory, and change any of the files within it, the changes will be visible inside the container.","title":"Nginx \u5982\u4f55\u52a0\u8f7d\u914d\u7f6e"},{"location":"docker-nginx-certbot/docs/nginx_tips/#_1","text":"\u4e3a\u4e86\u4f7f\u8fd9\u4e2a\u89e3\u91ca\u7b80\u5355\u800c\u6709\u7528\uff0c\u6211\u4eec\u9996\u5148\u58f0\u660e Nginx \u914d\u7f6e\u88ab\u5206\u6210\u56db\u4e2a\u5757\u3002 \u5728\u5916\u90e8\u5757(\u4f8b\u5982 Global \u5757)\u4e2d\u58f0\u660e\u7684\u53d8\u91cf\u548c\u8bbe\u7f6e\u5c06\u88ab\u5185\u90e8\u5757(\u4f8b\u5982 Server \u5757)\u7ee7\u627f\uff0c\u9664\u975e\u4f60\u5728\u8fd9\u4e2a\u5185\u90e8\u5757\u4e2d\u66f4\u6539\u5b83\u3002 So in the example below I have added comments with the current value of the keepalive_timeout setting in each block: # -- Global/main block -- # keepalive_timeout = 60 (The default value) http { # -- HTTP block -- keepalive_timeout = 30 # The value has now changed to 30 server { # -- Server block -- # keepalive_timeout = 30 (value inherited from http block) location /abc/ { # -- Location block nbr 1 -- keepalive_timeout = 50 # The value has now changed to 50 } location /xyz/ { # -- Location block nbr 2 -- # keepalive_timeout = 30 (value inherited from server block) } } } This is pretty straight forward for the settings that are only one value, but the commonly used proxy_set_header setting can be declared multiple times in order to add multiple values to it, and its inheritance works a bit differently. The following is true of all of the settings that can be declared multiple times. In the example below we want to add two headers to all requests, so we declare them in the http block. This builds a map/dictionary with the key-value pairs we want, and this will be inherited to all the location blocks. However, in the first location block we want to add another header, but doing it in this way will instead overwrite the current one with just this new header. http { proxy_set_header key1 value1 ; proxy_set_header key2 value2 ; server { # proxy_headers: { # \"key1\": \"value1\" # \"key2\": \"value2\" # } location /abc/ { proxy_set_header key3 value3 ; # proxy_headers: { # \"key3\": \"value3\" # } } location /xyz/ { # proxy_headers: { # \"key1\": \"value1\" # \"key2\": \"value2\" # } } } } The suggested solution to this problem is to create a separate file with the \"common\" headers, and then include this file where needed. So in our case we create the file /etc/nginx/common_headers with the following content: proxy_set_header key1 value1; proxy_set_header key2 value2; and then change the config to the following which would make the special location block have all the desired headers: http { include common_headers ; server { location /abc/ { include common_headers ; proxy_set_header key3 value3 ; # proxy_headers: { # \"key1\": \"value1\" # \"key2\": \"value2\" # \"key3\": \"value3\" # } } location /xyz/ { } } }","title":"\u914d\u7f6e\u7ee7\u627f"},{"location":"docker-nginx-certbot/docs/nginx_tips/#_2","text":"When setting up server blocks there exist a setting called default_server , which means that Nginx will use this server block in case it cannot match the incoming domain name with any of the other server_name s in its available config files. However, a less known fact is that if you do not specify a default_server Nginx will automatically use the first server block in its configuration files as the default server. This might cause confusion as Nginx could now \"accidentally\" serve a completely wrong site without the user knowing it. Luckily HTTPS removes some of this worry, since the browser will most likely throw an SSL_ERROR_BAD_CERT_DOMAIN if the returned certificate is not valid for the domain that the browser expected to visit. But if the cert is valid for that domain as well, then there will be problems. If you want to guard yourself against this, and return an error in the case that the client tries to connect with an unknown server name, you need to configure a catch-all block that responds in the default case. This is simple in the non-SSL case, where you can just return 444 which will terminate the connection immediately. server { listen 80 default_server; server_name _; return 444; } NOTE: The redirector.conf should be the `default_server` for port 80 in this image. Unfortunately it is not as simple in the secure HTTPS case, since Nginx would first need to perform the SSL handshake (which needs a valid certificate) before it can respond with 444 and drop the connection. To work around this I found a comment in this post which mentions that in version >=1.19.4 of Nginx you can actually use the ssl_reject_handshake feature to achieve the same functionality. server { listen 443 ssl default_server; ssl_reject_handshake on; } This will lead to an SSL_ERROR_UNRECOGNIZED_NAME_ALERT error in case the client tries to connect over HTTPS to a server name that is not served by this instance of Nginx, and the connection will be dropped immediately.","title":"\u62d2\u7edd\u672a\u77e5\u670d\u52a1\u5668\u540d"},{"location":"docker-nginx-certbot/docs/nginx_tips/#_3","text":"Adding a custom module to Nginx is not enirely trivial, since most guides I have found require you to re-complie everything with the desired module included and thus you cannot make use of the official Docker image to build upon. However, after some research I found that most of these modules are possible to compile and load as a dynamic module , which enables us to more or less just add one file and then change one line in the main nginx.conf . A complete example of how to do this is available over at AxisCommunications/docker-nginx-ldap , where a multi-stage Docker build can be viewed that add the LDAP module to the official Nginx image with minimal changes to the original.","title":"\u6dfb\u52a0\u81ea\u5b9a\u4e49\u6a21\u5757"}]}